
Pedestrian_F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d64  08003d64  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08003d64  08003d64  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d64  08003d64  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d68  08003d68  00013d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000080  08003dec  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003dec  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d65f  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209f  00000000  00000000  0002d708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0002f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  000304d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018100  00000000  00000000  00031130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f12b  00000000  00000000  00049230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088e87  00000000  00000000  0005835b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e11e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a60  00000000  00000000  000e1234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c90 	.word	0x08003c90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003c90 	.word	0x08003c90

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <toggleLED>:

void resetTrafficLight(void){

}

void toggleLED(void){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Blinking_LED_GPIO_Port, Blinking_LED_Pin);
 8000160:	2120      	movs	r1, #32
 8000162:	4802      	ldr	r0, [pc, #8]	; (800016c <toggleLED+0x10>)
 8000164:	f001 faa3 	bl	80016ae <HAL_GPIO_TogglePin>
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}
 800016c:	40010800 	.word	0x40010800

08000170 <transmitMessage>:

void transmitMessage(void){
 8000170:	b598      	push	{r3, r4, r7, lr}
 8000172:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(UART, (uint8_t *) msg, strlen(msg), 500);
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <transmitMessage+0x24>)
 8000176:	681c      	ldr	r4, [r3, #0]
 8000178:	4807      	ldr	r0, [pc, #28]	; (8000198 <transmitMessage+0x28>)
 800017a:	f7ff ffe7 	bl	800014c <strlen>
 800017e:	4603      	mov	r3, r0
 8000180:	b29a      	uxth	r2, r3
 8000182:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000186:	4904      	ldr	r1, [pc, #16]	; (8000198 <transmitMessage+0x28>)
 8000188:	4620      	mov	r0, r4
 800018a:	f002 faf1 	bl	8002770 <HAL_UART_Transmit>
}
 800018e:	bf00      	nop
 8000190:	bd98      	pop	{r3, r4, r7, pc}
 8000192:	bf00      	nop
 8000194:	200000f0 	.word	0x200000f0
 8000198:	200000b0 	.word	0x200000b0

0800019c <inputProcessingInit>:

void inputProcessingInit(UART_HandleTypeDef* huart)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	buttonState[SET_BTN] = RELEASED;
 80001a4:	4b27      	ldr	r3, [pc, #156]	; (8000244 <inputProcessingInit+0xa8>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	709a      	strb	r2, [r3, #2]
	buttonState[MOD_BTN] = RELEASED;
 80001aa:	4b26      	ldr	r3, [pc, #152]	; (8000244 <inputProcessingInit+0xa8>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	705a      	strb	r2, [r3, #1]
	buttonState[SEL_BTN] = RELEASED;
 80001b0:	4b24      	ldr	r3, [pc, #144]	; (8000244 <inputProcessingInit+0xa8>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	701a      	strb	r2, [r3, #0]
	buttonState[P_BTN] 	 = RELEASED;
 80001b6:	4b23      	ldr	r3, [pc, #140]	; (8000244 <inputProcessingInit+0xa8>)
 80001b8:	2200      	movs	r2, #0
 80001ba:	70da      	strb	r2, [r3, #3]
	blinking_counter = 1;
 80001bc:	4b22      	ldr	r3, [pc, #136]	; (8000248 <inputProcessingInit+0xac>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
	increasing_counter = INCREASING_PERIOD;
 80001c2:	4b22      	ldr	r3, [pc, #136]	; (800024c <inputProcessingInit+0xb0>)
 80001c4:	220a      	movs	r2, #10
 80001c6:	601a      	str	r2, [r3, #0]

	durationRed = DURATION_RED_DEFAULT;
 80001c8:	4b21      	ldr	r3, [pc, #132]	; (8000250 <inputProcessingInit+0xb4>)
 80001ca:	2203      	movs	r2, #3
 80001cc:	701a      	strb	r2, [r3, #0]
	durationAmber = DURATION_AMBER_DEFAULT;
 80001ce:	4b21      	ldr	r3, [pc, #132]	; (8000254 <inputProcessingInit+0xb8>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	701a      	strb	r2, [r3, #0]
	durationGreen = DURATION_GREEN_DEFAULT;
 80001d4:	4b20      	ldr	r3, [pc, #128]	; (8000258 <inputProcessingInit+0xbc>)
 80001d6:	2202      	movs	r2, #2
 80001d8:	701a      	strb	r2, [r3, #0]

	light_counter[VERTICAL]   = durationGreen * ONE_SECOND;
 80001da:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <inputProcessingInit+0xbc>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	b29b      	uxth	r3, r3
 80001e0:	461a      	mov	r2, r3
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	4413      	add	r3, r2
 80001e6:	461a      	mov	r2, r3
 80001e8:	0091      	lsls	r1, r2, #2
 80001ea:	461a      	mov	r2, r3
 80001ec:	460b      	mov	r3, r1
 80001ee:	4413      	add	r3, r2
 80001f0:	009b      	lsls	r3, r3, #2
 80001f2:	b29a      	uxth	r2, r3
 80001f4:	4b19      	ldr	r3, [pc, #100]	; (800025c <inputProcessingInit+0xc0>)
 80001f6:	801a      	strh	r2, [r3, #0]
	light_counter[HORIZONTAL] = durationRed * ONE_SECOND;
 80001f8:	4b15      	ldr	r3, [pc, #84]	; (8000250 <inputProcessingInit+0xb4>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	461a      	mov	r2, r3
 8000200:	0092      	lsls	r2, r2, #2
 8000202:	4413      	add	r3, r2
 8000204:	461a      	mov	r2, r3
 8000206:	0091      	lsls	r1, r2, #2
 8000208:	461a      	mov	r2, r3
 800020a:	460b      	mov	r3, r1
 800020c:	4413      	add	r3, r2
 800020e:	009b      	lsls	r3, r3, #2
 8000210:	b29a      	uxth	r2, r3
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <inputProcessingInit+0xc0>)
 8000214:	805a      	strh	r2, [r3, #2]

	runState = NORMAL_MODE;
 8000216:	4b12      	ldr	r3, [pc, #72]	; (8000260 <inputProcessingInit+0xc4>)
 8000218:	2201      	movs	r2, #1
 800021a:	701a      	strb	r2, [r3, #0]
	ledState[VERTICAL] = GREEN;
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <inputProcessingInit+0xc8>)
 800021e:	2206      	movs	r2, #6
 8000220:	701a      	strb	r2, [r3, #0]
	ledState[HORIZONTAL] = RED;
 8000222:	4b10      	ldr	r3, [pc, #64]	; (8000264 <inputProcessingInit+0xc8>)
 8000224:	2203      	movs	r2, #3
 8000226:	705a      	strb	r2, [r3, #1]

	// Take UART from main.c
	UART = huart;
 8000228:	4a0f      	ldr	r2, [pc, #60]	; (8000268 <inputProcessingInit+0xcc>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	6013      	str	r3, [r2, #0]

	// Inform message
	sprintf(msg, "<Pedestrian Project>\r\n");
 800022e:	490f      	ldr	r1, [pc, #60]	; (800026c <inputProcessingInit+0xd0>)
 8000230:	480f      	ldr	r0, [pc, #60]	; (8000270 <inputProcessingInit+0xd4>)
 8000232:	f003 f99f 	bl	8003574 <siprintf>
	transmitMessage();
 8000236:	f7ff ff9b 	bl	8000170 <transmitMessage>
}
 800023a:	bf00      	nop
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	2000009c 	.word	0x2000009c
 8000248:	200000f4 	.word	0x200000f4
 800024c:	200000f8 	.word	0x200000f8
 8000250:	200000ac 	.word	0x200000ac
 8000254:	200000ad 	.word	0x200000ad
 8000258:	200000ae 	.word	0x200000ae
 800025c:	200000a8 	.word	0x200000a8
 8000260:	200000a0 	.word	0x200000a0
 8000264:	200000a4 	.word	0x200000a4
 8000268:	200000f0 	.word	0x200000f0
 800026c:	08003ca8 	.word	0x08003ca8
 8000270:	200000b0 	.word	0x200000b0

08000274 <inputProcessingFSM>:
		durationGreen = adjust_duGreen;
		break;
	}
}
//This is abstract function. Use for those function below.
void inputProcessingFSM(void (*processing) (void), const short index){
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	807b      	strh	r3, [r7, #2]
	switch(buttonState[index]){
 8000280:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000284:	4a26      	ldr	r2, [pc, #152]	; (8000320 <inputProcessingFSM+0xac>)
 8000286:	5cd3      	ldrb	r3, [r2, r3]
 8000288:	2b02      	cmp	r3, #2
 800028a:	d032      	beq.n	80002f2 <inputProcessingFSM+0x7e>
 800028c:	2b02      	cmp	r3, #2
 800028e:	dc43      	bgt.n	8000318 <inputProcessingFSM+0xa4>
 8000290:	2b00      	cmp	r3, #0
 8000292:	d002      	beq.n	800029a <inputProcessingFSM+0x26>
 8000294:	2b01      	cmp	r3, #1
 8000296:	d010      	beq.n	80002ba <inputProcessingFSM+0x46>
		if (!isButtonPressedOneSec(index)){
			buttonState[index] = RELEASED;
		}
		break;
	}
}
 8000298:	e03e      	b.n	8000318 <inputProcessingFSM+0xa4>
		if (isButtonPressed(index)){
 800029a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fa2e 	bl	8000700 <isButtonPressed>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d031      	beq.n	800030e <inputProcessingFSM+0x9a>
			buttonState[index] = PRESSED;
 80002aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80002ae:	4a1c      	ldr	r2, [pc, #112]	; (8000320 <inputProcessingFSM+0xac>)
 80002b0:	2101      	movs	r1, #1
 80002b2:	54d1      	strb	r1, [r2, r3]
			(*processing)();
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4798      	blx	r3
		break;
 80002b8:	e029      	b.n	800030e <inputProcessingFSM+0x9a>
		if (!isButtonPressed(index)){
 80002ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fa1e 	bl	8000700 <isButtonPressed>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d105      	bne.n	80002d6 <inputProcessingFSM+0x62>
			buttonState[index] = RELEASED;
 80002ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80002ce:	4a14      	ldr	r2, [pc, #80]	; (8000320 <inputProcessingFSM+0xac>)
 80002d0:	2100      	movs	r1, #0
 80002d2:	54d1      	strb	r1, [r2, r3]
		break;
 80002d4:	e01d      	b.n	8000312 <inputProcessingFSM+0x9e>
		} else if (isButtonPressedOneSec(index)){
 80002d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 fa26 	bl	800072c <isButtonPressedOneSec>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d015      	beq.n	8000312 <inputProcessingFSM+0x9e>
			buttonState[index] = PRESSED_MORE_THAN_ONE_SECOND;
 80002e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80002ea:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <inputProcessingFSM+0xac>)
 80002ec:	2102      	movs	r1, #2
 80002ee:	54d1      	strb	r1, [r2, r3]
		break;
 80002f0:	e00f      	b.n	8000312 <inputProcessingFSM+0x9e>
		if (!isButtonPressedOneSec(index)){
 80002f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fa18 	bl	800072c <isButtonPressedOneSec>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d109      	bne.n	8000316 <inputProcessingFSM+0xa2>
			buttonState[index] = RELEASED;
 8000302:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000306:	4a06      	ldr	r2, [pc, #24]	; (8000320 <inputProcessingFSM+0xac>)
 8000308:	2100      	movs	r1, #0
 800030a:	54d1      	strb	r1, [r2, r3]
		break;
 800030c:	e003      	b.n	8000316 <inputProcessingFSM+0xa2>
		break;
 800030e:	bf00      	nop
 8000310:	e002      	b.n	8000318 <inputProcessingFSM+0xa4>
		break;
 8000312:	bf00      	nop
 8000314:	e000      	b.n	8000318 <inputProcessingFSM+0xa4>
		break;
 8000316:	bf00      	nop
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	2000009c 	.word	0x2000009c

08000324 <handleSetValueButton>:
void handleSetValueButton(void){
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	buttonReading(SET_BTN);
 8000328:	2002      	movs	r0, #2
 800032a:	f000 f979 	bl	8000620 <buttonReading>
	inputProcessingFSM(toggleLED, SET_BTN);
 800032e:	2102      	movs	r1, #2
 8000330:	4802      	ldr	r0, [pc, #8]	; (800033c <handleSetValueButton+0x18>)
 8000332:	f7ff ff9f 	bl	8000274 <inputProcessingFSM>
	//inputProcessingFSM(setValue, SET_BTN);
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	0800015d 	.word	0x0800015d

08000340 <handleModifyButton>:
void handleModifyButton(void){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	buttonReading(MOD_BTN);
 8000344:	2001      	movs	r0, #1
 8000346:	f000 f96b 	bl	8000620 <buttonReading>
	inputProcessingFSM(toggleLED, MOD_BTN);
 800034a:	2101      	movs	r1, #1
 800034c:	4802      	ldr	r0, [pc, #8]	; (8000358 <handleModifyButton+0x18>)
 800034e:	f7ff ff91 	bl	8000274 <inputProcessingFSM>
		}
	} else {
		increasing_counter = INCREASING_PERIOD;
	}*/

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	0800015d 	.word	0x0800015d

0800035c <handleSelectModeButton>:
void handleSelectModeButton(void){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	buttonReading(SEL_BTN);
 8000360:	2000      	movs	r0, #0
 8000362:	f000 f95d 	bl	8000620 <buttonReading>
	inputProcessingFSM(toggleLED, SEL_BTN);
 8000366:	2100      	movs	r1, #0
 8000368:	4802      	ldr	r0, [pc, #8]	; (8000374 <handleSelectModeButton+0x18>)
 800036a:	f7ff ff83 	bl	8000274 <inputProcessingFSM>
	//inputProcessingFSM(changingMode, SEL_BTN);
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	0800015d 	.word	0x0800015d

08000378 <handlePedestrianButton>:

void handlePedestrianButton(void){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	buttonReading(P_BTN);
 800037c:	2003      	movs	r0, #3
 800037e:	f000 f94f 	bl	8000620 <buttonReading>
	inputProcessingFSM(toggleLED, P_BTN);
 8000382:	2103      	movs	r1, #3
 8000384:	4802      	ldr	r0, [pc, #8]	; (8000390 <handlePedestrianButton+0x18>)
 8000386:	f7ff ff75 	bl	8000274 <inputProcessingFSM>
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	0800015d 	.word	0x0800015d

08000394 <displayingDuration>:

void displayingDuration(uint8_t index){
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af02      	add	r7, sp, #8
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	if (light_counter[index] % ONE_SECOND != 0 || light_counter[index] == 0)
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4a26      	ldr	r2, [pc, #152]	; (800043c <displayingDuration+0xa8>)
 80003a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003a6:	4a26      	ldr	r2, [pc, #152]	; (8000440 <displayingDuration+0xac>)
 80003a8:	fba2 1203 	umull	r1, r2, r2, r3
 80003ac:	0952      	lsrs	r2, r2, #5
 80003ae:	2164      	movs	r1, #100	; 0x64
 80003b0:	fb01 f202 	mul.w	r2, r1, r2
 80003b4:	1a9b      	subs	r3, r3, r2
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d13a      	bne.n	8000432 <displayingDuration+0x9e>
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	4a1f      	ldr	r2, [pc, #124]	; (800043c <displayingDuration+0xa8>)
 80003c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d034      	beq.n	8000432 <displayingDuration+0x9e>
		return;

	char* orientation;
	if (index == VERTICAL) orientation = "VERTICAL";
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d102      	bne.n	80003d4 <displayingDuration+0x40>
 80003ce:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <displayingDuration+0xb0>)
 80003d0:	617b      	str	r3, [r7, #20]
 80003d2:	e001      	b.n	80003d8 <displayingDuration+0x44>
	else orientation = "HORIZONTAL";
 80003d4:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <displayingDuration+0xb4>)
 80003d6:	617b      	str	r3, [r7, #20]

	char* led_state_name;
	switch(ledState[index]){
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	4a1c      	ldr	r2, [pc, #112]	; (800044c <displayingDuration+0xb8>)
 80003dc:	5cd3      	ldrb	r3, [r2, r3]
 80003de:	2b06      	cmp	r3, #6
 80003e0:	d00c      	beq.n	80003fc <displayingDuration+0x68>
 80003e2:	2b06      	cmp	r3, #6
 80003e4:	dc0d      	bgt.n	8000402 <displayingDuration+0x6e>
 80003e6:	2b03      	cmp	r3, #3
 80003e8:	d002      	beq.n	80003f0 <displayingDuration+0x5c>
 80003ea:	2b05      	cmp	r3, #5
 80003ec:	d003      	beq.n	80003f6 <displayingDuration+0x62>
 80003ee:	e008      	b.n	8000402 <displayingDuration+0x6e>
	case RED:
		led_state_name = "RED";
 80003f0:	4b17      	ldr	r3, [pc, #92]	; (8000450 <displayingDuration+0xbc>)
 80003f2:	613b      	str	r3, [r7, #16]
		break;
 80003f4:	e005      	b.n	8000402 <displayingDuration+0x6e>
	case AMBER:
		led_state_name = "AMBER";
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <displayingDuration+0xc0>)
 80003f8:	613b      	str	r3, [r7, #16]
		break;
 80003fa:	e002      	b.n	8000402 <displayingDuration+0x6e>
	case GREEN:
		led_state_name = "GREEN";
 80003fc:	4b16      	ldr	r3, [pc, #88]	; (8000458 <displayingDuration+0xc4>)
 80003fe:	613b      	str	r3, [r7, #16]
		break;
 8000400:	bf00      	nop
	}

	uint16_t numberDisplay = (light_counter[index] - 1) / ONE_SECOND;
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <displayingDuration+0xa8>)
 8000406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800040a:	3b01      	subs	r3, #1
 800040c:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <displayingDuration+0xac>)
 800040e:	fb82 1203 	smull	r1, r2, r2, r3
 8000412:	1152      	asrs	r2, r2, #5
 8000414:	17db      	asrs	r3, r3, #31
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	81fb      	strh	r3, [r7, #14]

	sprintf(msg, "%s: %ds: %s\r\n", orientation, numberDisplay, led_state_name);
 800041a:	89fa      	ldrh	r2, [r7, #14]
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	4613      	mov	r3, r2
 8000422:	697a      	ldr	r2, [r7, #20]
 8000424:	490d      	ldr	r1, [pc, #52]	; (800045c <displayingDuration+0xc8>)
 8000426:	480e      	ldr	r0, [pc, #56]	; (8000460 <displayingDuration+0xcc>)
 8000428:	f003 f8a4 	bl	8003574 <siprintf>
	transmitMessage();
 800042c:	f7ff fea0 	bl	8000170 <transmitMessage>
 8000430:	e000      	b.n	8000434 <displayingDuration+0xa0>
		return;
 8000432:	bf00      	nop
}
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	200000a8 	.word	0x200000a8
 8000440:	51eb851f 	.word	0x51eb851f
 8000444:	08003cc0 	.word	0x08003cc0
 8000448:	08003ccc 	.word	0x08003ccc
 800044c:	200000a4 	.word	0x200000a4
 8000450:	08003cd8 	.word	0x08003cd8
 8000454:	08003cdc 	.word	0x08003cdc
 8000458:	08003ce4 	.word	0x08003ce4
 800045c:	08003cec 	.word	0x08003cec
 8000460:	200000b0 	.word	0x200000b0

08000464 <trafficLightFSM>:


void trafficLightFSM(const short index){
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	80fb      	strh	r3, [r7, #6]
	// Display duration via UART.
	displayingDuration(index);
 800046e:	88fb      	ldrh	r3, [r7, #6]
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ff8e 	bl	8000394 <displayingDuration>
	light_counter[index]--;
 8000478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800047c:	4a3d      	ldr	r2, [pc, #244]	; (8000574 <trafficLightFSM+0x110>)
 800047e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000482:	3a01      	subs	r2, #1
 8000484:	b291      	uxth	r1, r2
 8000486:	4a3b      	ldr	r2, [pc, #236]	; (8000574 <trafficLightFSM+0x110>)
 8000488:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	switch (ledState[index]){
 800048c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000490:	4a39      	ldr	r2, [pc, #228]	; (8000578 <trafficLightFSM+0x114>)
 8000492:	5cd3      	ldrb	r3, [r2, r3]
 8000494:	2b06      	cmp	r3, #6
 8000496:	d044      	beq.n	8000522 <trafficLightFSM+0xbe>
 8000498:	2b06      	cmp	r3, #6
 800049a:	dc66      	bgt.n	800056a <trafficLightFSM+0x106>
 800049c:	2b03      	cmp	r3, #3
 800049e:	d002      	beq.n	80004a6 <trafficLightFSM+0x42>
 80004a0:	2b05      	cmp	r3, #5
 80004a2:	d01f      	beq.n	80004e4 <trafficLightFSM+0x80>
			ledState[index] = AMBER;
		}
		break;
	}

}
 80004a4:	e061      	b.n	800056a <trafficLightFSM+0x106>
		if (light_counter[index] <= 0) {
 80004a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004aa:	4a32      	ldr	r2, [pc, #200]	; (8000574 <trafficLightFSM+0x110>)
 80004ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d155      	bne.n	8000560 <trafficLightFSM+0xfc>
			light_counter[index] = durationGreen * ONE_SECOND;
 80004b4:	4b31      	ldr	r3, [pc, #196]	; (800057c <trafficLightFSM+0x118>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004be:	4611      	mov	r1, r2
 80004c0:	0089      	lsls	r1, r1, #2
 80004c2:	440a      	add	r2, r1
 80004c4:	4611      	mov	r1, r2
 80004c6:	0088      	lsls	r0, r1, #2
 80004c8:	4611      	mov	r1, r2
 80004ca:	4602      	mov	r2, r0
 80004cc:	440a      	add	r2, r1
 80004ce:	0092      	lsls	r2, r2, #2
 80004d0:	b291      	uxth	r1, r2
 80004d2:	4a28      	ldr	r2, [pc, #160]	; (8000574 <trafficLightFSM+0x110>)
 80004d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ledState[index] = GREEN;
 80004d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004dc:	4a26      	ldr	r2, [pc, #152]	; (8000578 <trafficLightFSM+0x114>)
 80004de:	2106      	movs	r1, #6
 80004e0:	54d1      	strb	r1, [r2, r3]
		break;
 80004e2:	e03d      	b.n	8000560 <trafficLightFSM+0xfc>
		if (light_counter[index] <= 0) {
 80004e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004e8:	4a22      	ldr	r2, [pc, #136]	; (8000574 <trafficLightFSM+0x110>)
 80004ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d138      	bne.n	8000564 <trafficLightFSM+0x100>
			light_counter[index] = durationRed * ONE_SECOND;
 80004f2:	4b23      	ldr	r3, [pc, #140]	; (8000580 <trafficLightFSM+0x11c>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004fc:	4611      	mov	r1, r2
 80004fe:	0089      	lsls	r1, r1, #2
 8000500:	440a      	add	r2, r1
 8000502:	4611      	mov	r1, r2
 8000504:	0088      	lsls	r0, r1, #2
 8000506:	4611      	mov	r1, r2
 8000508:	4602      	mov	r2, r0
 800050a:	440a      	add	r2, r1
 800050c:	0092      	lsls	r2, r2, #2
 800050e:	b291      	uxth	r1, r2
 8000510:	4a18      	ldr	r2, [pc, #96]	; (8000574 <trafficLightFSM+0x110>)
 8000512:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ledState[index] = RED;
 8000516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800051a:	4a17      	ldr	r2, [pc, #92]	; (8000578 <trafficLightFSM+0x114>)
 800051c:	2103      	movs	r1, #3
 800051e:	54d1      	strb	r1, [r2, r3]
		break;
 8000520:	e020      	b.n	8000564 <trafficLightFSM+0x100>
		if (light_counter[index] <= 0) {
 8000522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000526:	4a13      	ldr	r2, [pc, #76]	; (8000574 <trafficLightFSM+0x110>)
 8000528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d11b      	bne.n	8000568 <trafficLightFSM+0x104>
			light_counter[index] = durationAmber * ONE_SECOND;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <trafficLightFSM+0x120>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	b29a      	uxth	r2, r3
 8000536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800053a:	4611      	mov	r1, r2
 800053c:	0089      	lsls	r1, r1, #2
 800053e:	440a      	add	r2, r1
 8000540:	4611      	mov	r1, r2
 8000542:	0088      	lsls	r0, r1, #2
 8000544:	4611      	mov	r1, r2
 8000546:	4602      	mov	r2, r0
 8000548:	440a      	add	r2, r1
 800054a:	0092      	lsls	r2, r2, #2
 800054c:	b291      	uxth	r1, r2
 800054e:	4a09      	ldr	r2, [pc, #36]	; (8000574 <trafficLightFSM+0x110>)
 8000550:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ledState[index] = AMBER;
 8000554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <trafficLightFSM+0x114>)
 800055a:	2105      	movs	r1, #5
 800055c:	54d1      	strb	r1, [r2, r3]
		break;
 800055e:	e003      	b.n	8000568 <trafficLightFSM+0x104>
		break;
 8000560:	bf00      	nop
 8000562:	e002      	b.n	800056a <trafficLightFSM+0x106>
		break;
 8000564:	bf00      	nop
 8000566:	e000      	b.n	800056a <trafficLightFSM+0x106>
		break;
 8000568:	bf00      	nop
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200000a8 	.word	0x200000a8
 8000578:	200000a4 	.word	0x200000a4
 800057c:	200000ae 	.word	0x200000ae
 8000580:	200000ac 	.word	0x200000ac
 8000584:	200000ad 	.word	0x200000ad

08000588 <runStateFSM>:

void runStateFSM(void){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	switch (runState){
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <runStateFSM+0x90>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	3b01      	subs	r3, #1
 8000592:	2b03      	cmp	r3, #3
 8000594:	d83d      	bhi.n	8000612 <runStateFSM+0x8a>
 8000596:	a201      	add	r2, pc, #4	; (adr r2, 800059c <runStateFSM+0x14>)
 8000598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059c:	080005ad 	.word	0x080005ad
 80005a0:	080005bb 	.word	0x080005bb
 80005a4:	080005d5 	.word	0x080005d5
 80005a8:	080005ef 	.word	0x080005ef
	case NORMAL_MODE:
		//Run 2 traffic light FSMs.
		trafficLightFSM(VERTICAL);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff ff59 	bl	8000464 <trafficLightFSM>
		trafficLightFSM(HORIZONTAL);
 80005b2:	2001      	movs	r0, #1
 80005b4:	f7ff ff56 	bl	8000464 <trafficLightFSM>
		break;
 80005b8:	e02b      	b.n	8000612 <runStateFSM+0x8a>
	case MODIFY_DURATION_RED_MODE:
		//Blinking Red LED in 0.5s
		blinking_counter--;
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <runStateFSM+0x94>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a16      	ldr	r2, [pc, #88]	; (800061c <runStateFSM+0x94>)
 80005c2:	6013      	str	r3, [r2, #0]
		if (blinking_counter <= 0) {
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <runStateFSM+0x94>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	dc1d      	bgt.n	8000608 <runStateFSM+0x80>
			blinking_counter = HALF_SECOND;
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <runStateFSM+0x94>)
 80005ce:	2232      	movs	r2, #50	; 0x32
 80005d0:	601a      	str	r2, [r3, #0]
			//TogglePinLED(RED);
		}
		break;
 80005d2:	e019      	b.n	8000608 <runStateFSM+0x80>
	case MODIFY_DURATION_AMBER_MODE:
		//Blinking Amber LED in 0.5s
		blinking_counter--;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <runStateFSM+0x94>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3b01      	subs	r3, #1
 80005da:	4a10      	ldr	r2, [pc, #64]	; (800061c <runStateFSM+0x94>)
 80005dc:	6013      	str	r3, [r2, #0]
		if (blinking_counter <= 0) {
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <runStateFSM+0x94>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	dc12      	bgt.n	800060c <runStateFSM+0x84>
			blinking_counter = HALF_SECOND;
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <runStateFSM+0x94>)
 80005e8:	2232      	movs	r2, #50	; 0x32
 80005ea:	601a      	str	r2, [r3, #0]
			//TogglePinLED(AMBER);
		}
		break;
 80005ec:	e00e      	b.n	800060c <runStateFSM+0x84>
	case MODIFY_DURATION_GREEN_MODE:
		//Blinking Green LED in 0.5s
		blinking_counter--;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <runStateFSM+0x94>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	4a09      	ldr	r2, [pc, #36]	; (800061c <runStateFSM+0x94>)
 80005f6:	6013      	str	r3, [r2, #0]
		if (blinking_counter <= 0) {
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <runStateFSM+0x94>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dc07      	bgt.n	8000610 <runStateFSM+0x88>
			blinking_counter = HALF_SECOND;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <runStateFSM+0x94>)
 8000602:	2232      	movs	r2, #50	; 0x32
 8000604:	601a      	str	r2, [r3, #0]
			//TogglePinLED(GREEN);
		}
		break;
 8000606:	e003      	b.n	8000610 <runStateFSM+0x88>
		break;
 8000608:	bf00      	nop
 800060a:	e002      	b.n	8000612 <runStateFSM+0x8a>
		break;
 800060c:	bf00      	nop
 800060e:	e000      	b.n	8000612 <runStateFSM+0x8a>
		break;
 8000610:	bf00      	nop
	}
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000a0 	.word	0x200000a0
 800061c:	200000f4 	.word	0x200000f4

08000620 <buttonReading>:
		flagOneSec[i] = 0;
		counterOneSec[i] = ONE_SECOND;
	}
}

void buttonReading(const short index){
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
	//Save 2 recently states
	buffer1[index] = buffer0[index];
 800062a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800062e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000632:	492c      	ldr	r1, [pc, #176]	; (80006e4 <buttonReading+0xc4>)
 8000634:	5c89      	ldrb	r1, [r1, r2]
 8000636:	4a2c      	ldr	r2, [pc, #176]	; (80006e8 <buttonReading+0xc8>)
 8000638:	54d1      	strb	r1, [r2, r3]
	buffer0[index] = HAL_GPIO_ReadPin(BTN_GPIO[index], BTN_Pin[index]);
 800063a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800063e:	4a2b      	ldr	r2, [pc, #172]	; (80006ec <buttonReading+0xcc>)
 8000640:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000648:	4929      	ldr	r1, [pc, #164]	; (80006f0 <buttonReading+0xd0>)
 800064a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800064e:	b29b      	uxth	r3, r3
 8000650:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8000654:	4619      	mov	r1, r3
 8000656:	4610      	mov	r0, r2
 8000658:	f000 fffa 	bl	8001650 <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <buttonReading+0xc4>)
 8000662:	551a      	strb	r2, [r3, r4]

	//If all saved states equal -> that's a good reading (filtered)
	if(buffer1[index] == buffer0[index]){
 8000664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000668:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <buttonReading+0xc8>)
 800066a:	5cd2      	ldrb	r2, [r2, r3]
 800066c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000670:	491c      	ldr	r1, [pc, #112]	; (80006e4 <buttonReading+0xc4>)
 8000672:	5ccb      	ldrb	r3, [r1, r3]
 8000674:	429a      	cmp	r2, r3
 8000676:	d131      	bne.n	80006dc <buttonReading+0xbc>
		filtered[index] = buffer0[index];
 8000678:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800067c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000680:	4918      	ldr	r1, [pc, #96]	; (80006e4 <buttonReading+0xc4>)
 8000682:	5c89      	ldrb	r1, [r1, r2]
 8000684:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <buttonReading+0xd4>)
 8000686:	54d1      	strb	r1, [r2, r3]
		//If button_pressed -> counter will work, if not -> just reset counter.
		if (filtered[index] == BUTTON_PRESSED){
 8000688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800068c:	4a19      	ldr	r2, [pc, #100]	; (80006f4 <buttonReading+0xd4>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d118      	bne.n	80006c6 <buttonReading+0xa6>
			counterOneSec[index]--;
 8000694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000698:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <buttonReading+0xd8>)
 800069a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800069e:	b292      	uxth	r2, r2
 80006a0:	3a01      	subs	r2, #1
 80006a2:	b292      	uxth	r2, r2
 80006a4:	b211      	sxth	r1, r2
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <buttonReading+0xd8>)
 80006a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (counterOneSec[index] <= 0){
 80006ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b0:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <buttonReading+0xd8>)
 80006b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	dc10      	bgt.n	80006dc <buttonReading+0xbc>
				flagOneSec[index] = 1;
 80006ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <buttonReading+0xdc>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	54d1      	strb	r1, [r2, r3]
		} else {
			counterOneSec[index] = ONE_SECOND;
			flagOneSec[index] = 0;
		}
	}
}
 80006c4:	e00a      	b.n	80006dc <buttonReading+0xbc>
			counterOneSec[index] = ONE_SECOND;
 80006c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ca:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <buttonReading+0xd8>)
 80006cc:	2164      	movs	r1, #100	; 0x64
 80006ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagOneSec[index] = 0;
 80006d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006d6:	4a09      	ldr	r2, [pc, #36]	; (80006fc <buttonReading+0xdc>)
 80006d8:	2100      	movs	r1, #0
 80006da:	54d1      	strb	r1, [r2, r3]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd90      	pop	{r4, r7, pc}
 80006e4:	20000100 	.word	0x20000100
 80006e8:	20000104 	.word	0x20000104
 80006ec:	20000000 	.word	0x20000000
 80006f0:	08003cfc 	.word	0x08003cfc
 80006f4:	200000fc 	.word	0x200000fc
 80006f8:	2000010c 	.word	0x2000010c
 80006fc:	20000108 	.word	0x20000108

08000700 <isButtonPressed>:

uint8_t isButtonPressed(const short index){
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	80fb      	strh	r3, [r7, #6]
	return (filtered[index] == BUTTON_PRESSED);
 800070a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070e:	4a06      	ldr	r2, [pc, #24]	; (8000728 <isButtonPressed+0x28>)
 8000710:	5cd3      	ldrb	r3, [r2, r3]
 8000712:	2b00      	cmp	r3, #0
 8000714:	bf0c      	ite	eq
 8000716:	2301      	moveq	r3, #1
 8000718:	2300      	movne	r3, #0
 800071a:	b2db      	uxtb	r3, r3
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	200000fc 	.word	0x200000fc

0800072c <isButtonPressedOneSec>:

uint8_t isButtonPressedOneSec(const short index){
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	80fb      	strh	r3, [r7, #6]
	return flagOneSec[index];
 8000736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800073a:	4a03      	ldr	r2, [pc, #12]	; (8000748 <isButtonPressedOneSec+0x1c>)
 800073c:	5cd3      	ldrb	r3, [r2, r3]
}
 800073e:	4618      	mov	r0, r3
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000108 	.word	0x20000108

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 fbe0 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f822 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f000 f8d2 	bl	8000900 <MX_GPIO_Init>
  MX_TIM2_Init();
 800075c:	f000 f85a 	bl	8000814 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000760:	f000 f8a4 	bl	80008ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <main+0x40>)
 8000766:	f001 fc1b 	bl	8001fa0 <HAL_TIM_Base_Start_IT>

  inputProcessingInit(&huart1);
 800076a:	4809      	ldr	r0, [pc, #36]	; (8000790 <main+0x44>)
 800076c:	f7ff fd16 	bl	800019c <inputProcessingInit>

  SCH_Add_Task(runStateFSM, 0, 10);
 8000770:	220a      	movs	r2, #10
 8000772:	2100      	movs	r1, #0
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <main+0x48>)
 8000776:	f000 fa43 	bl	8000c00 <SCH_Add_Task>
  SCH_Add_Task(readInputAndProcessing, 10, 10);
 800077a:	220a      	movs	r2, #10
 800077c:	210a      	movs	r1, #10
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <main+0x4c>)
 8000780:	f000 fa3e 	bl	8000c00 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000784:	f000 fa56 	bl	8000c34 <SCH_Dispatch_Tasks>
 8000788:	e7fc      	b.n	8000784 <main+0x38>
 800078a:	bf00      	nop
 800078c:	20000114 	.word	0x20000114
 8000790:	2000015c 	.word	0x2000015c
 8000794:	08000589 	.word	0x08000589
 8000798:	080009ed 	.word	0x080009ed

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b090      	sub	sp, #64	; 0x40
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	2228      	movs	r2, #40	; 0x28
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fdee 	bl	800338c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007be:	2302      	movs	r3, #2
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c2:	2301      	movs	r3, #1
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c6:	2310      	movs	r3, #16
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0318 	add.w	r3, r7, #24
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 ff84 	bl	80016e0 <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007de:	f000 f911 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	230f      	movs	r3, #15
 80007e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f9f2 	bl	8001be4 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000806:	f000 f8fd 	bl	8000a04 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3740      	adds	r7, #64	; 0x40
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_TIM2_Init+0x94>)
 800083a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800083e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000848:	2209      	movs	r2, #9
 800084a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_TIM2_Init+0x94>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000858:	4813      	ldr	r0, [pc, #76]	; (80008a8 <MX_TIM2_Init+0x94>)
 800085a:	f001 fb51 	bl	8001f00 <HAL_TIM_Base_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000864:	f000 f8ce 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4619      	mov	r1, r3
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000876:	f001 fce7 	bl	8002248 <HAL_TIM_ConfigClockSource>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000880:	f000 f8c0 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000892:	f001 feb3 	bl	80025fc <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800089c:	f000 f8b2 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000114 	.word	0x20000114

080008ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_USART1_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80008bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008e4:	f001 fef4 	bl	80026d0 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 f889 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000015c 	.word	0x2000015c
 80008fc:	40013800 	.word	0x40013800

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <MX_GPIO_Init+0xcc>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a2c      	ldr	r2, [pc, #176]	; (80009cc <MX_GPIO_Init+0xcc>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <MX_GPIO_Init+0xcc>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <MX_GPIO_Init+0xcc>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a26      	ldr	r2, [pc, #152]	; (80009cc <MX_GPIO_Init+0xcc>)
 8000932:	f043 0308 	orr.w	r3, r3, #8
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <MX_GPIO_Init+0xcc>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinking_LED_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2160      	movs	r1, #96	; 0x60
 8000948:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_GPIO_Init+0xd0>)
 800094a:	f000 fe98 	bl	800167e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000954:	481f      	ldr	r0, [pc, #124]	; (80009d4 <MX_GPIO_Init+0xd4>)
 8000956:	f000 fe92 	bl	800167e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P_BTN_Pin SEL_BTN_Pin MOD_BTN_Pin */
  GPIO_InitStruct.Pin = P_BTN_Pin|SEL_BTN_Pin|MOD_BTN_Pin;
 800095a:	2313      	movs	r3, #19
 800095c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000962:	2301      	movs	r3, #1
 8000964:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4619      	mov	r1, r3
 800096c:	4818      	ldr	r0, [pc, #96]	; (80009d0 <MX_GPIO_Init+0xd0>)
 800096e:	f000 fcf3 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pins : Blinking_LED_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = Blinking_LED_Pin|Buzzer_Pin;
 8000972:	2360      	movs	r3, #96	; 0x60
 8000974:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2302      	movs	r3, #2
 8000980:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	4619      	mov	r1, r3
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <MX_GPIO_Init+0xd0>)
 800098a:	f000 fce5 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_BTN_Pin */
  GPIO_InitStruct.Pin = SET_BTN_Pin;
 800098e:	2301      	movs	r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000996:	2301      	movs	r3, #1
 8000998:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SET_BTN_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_GPIO_Init+0xd4>)
 80009a2:	f000 fcd9 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2302      	movs	r3, #2
 80009b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_GPIO_Init+0xd4>)
 80009c0:	f000 fcca 	bl	8001358 <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010800 	.word	0x40010800
 80009d4:	40010c00 	.word	0x40010c00

080009d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80009e0:	f000 f816 	bl	8000a10 <SCH_Update>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <readInputAndProcessing>:
void readInputAndProcessing(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	handleSetValueButton();
 80009f0:	f7ff fc98 	bl	8000324 <handleSetValueButton>
	handleModifyButton();
 80009f4:	f7ff fca4 	bl	8000340 <handleModifyButton>
	handleSelectModeButton();
 80009f8:	f7ff fcb0 	bl	800035c <handleSelectModeButton>
	handlePedestrianButton();
 80009fc:	f7ff fcbc 	bl	8000378 <handlePedestrianButton>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <SCH_Update>:
	count_task 	= 0;
	next_id 	= 1;
	errorCode	= 0;
}

void SCH_Update(void){
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
	if (head_task == NULL) {
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <SCH_Update+0x80>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d10c      	bne.n	8000a38 <SCH_Update+0x28>
		 * This is for situation, you just have one task run.
		 * When task ran completely, it will dequeue, but at this time
		 * SCH_Update can be run, and if we not add 1 for time_skip
		 * instead of do nothing, your task will run wrong time.
		 */
		time_skip = (count_task > 0) ? time_skip + 1 : 0;
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <SCH_Update+0x84>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d004      	beq.n	8000a30 <SCH_Update+0x20>
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <SCH_Update+0x88>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	e000      	b.n	8000a32 <SCH_Update+0x22>
 8000a30:	2300      	movs	r3, #0
 8000a32:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <SCH_Update+0x88>)
 8000a34:	8013      	strh	r3, [r2, #0]
		return;
 8000a36:	e026      	b.n	8000a86 <SCH_Update+0x76>
	}
	time_skip++;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <SCH_Update+0x88>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <SCH_Update+0x88>)
 8000a42:	801a      	strh	r2, [r3, #0]
	if (head_task->Delay > 0){
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <SCH_Update+0x80>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d01b      	beq.n	8000a86 <SCH_Update+0x76>
		int temp = head_task->Delay - time_skip;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <SCH_Update+0x80>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <SCH_Update+0x88>)
 8000a56:	8812      	ldrh	r2, [r2, #0]
 8000a58:	1a9b      	subs	r3, r3, r2
 8000a5a:	607b      	str	r3, [r7, #4]
		if (temp >= 0) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	db07      	blt.n	8000a72 <SCH_Update+0x62>
			head_task->Delay = temp;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <SCH_Update+0x80>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	605a      	str	r2, [r3, #4]
			time_skip = 0;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <SCH_Update+0x88>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	801a      	strh	r2, [r3, #0]
 8000a70:	e009      	b.n	8000a86 <SCH_Update+0x76>
		} else {
			head_task->Delay = 0;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <SCH_Update+0x80>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2200      	movs	r2, #0
 8000a78:	605a      	str	r2, [r3, #4]
			time_skip = 0 - temp;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	425b      	negs	r3, r3
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <SCH_Update+0x88>)
 8000a84:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	200001a4 	.word	0x200001a4
 8000a94:	200001aa 	.word	0x200001aa
 8000a98:	200001a8 	.word	0x200001a8

08000a9c <Create_Task>:

sTask* Create_Task(void (*pFunc)(void), uint32_t Delay, uint32_t Period){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
	if (count_task > SCH_MAX_TASKS){
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <Create_Task+0x80>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	2b0a      	cmp	r3, #10
 8000aae:	d904      	bls.n	8000aba <Create_Task+0x1e>
		errorCode = ERROR_SCH_TOO_MANY_TASKS;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <Create_Task+0x84>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
		return NULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e02b      	b.n	8000b12 <Create_Task+0x76>
	}
	uint16_t newId = next_id++;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <Create_Task+0x88>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	b291      	uxth	r1, r2
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <Create_Task+0x88>)
 8000ac4:	8011      	strh	r1, [r2, #0]
 8000ac6:	82fb      	strh	r3, [r7, #22]

	Delay  /= TIMER_CYCLE;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <Create_Task+0x8c>)
 8000acc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad0:	08db      	lsrs	r3, r3, #3
 8000ad2:	60bb      	str	r3, [r7, #8]
	Period /= TIMER_CYCLE;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <Create_Task+0x8c>)
 8000ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8000adc:	08db      	lsrs	r3, r3, #3
 8000ade:	607b      	str	r3, [r7, #4]

	sTask* newTask = malloc(sizeof(sTask));
 8000ae0:	2014      	movs	r0, #20
 8000ae2:	f002 fc43 	bl	800336c <malloc>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	613b      	str	r3, [r7, #16]

	newTask->pFunc 		= pFunc;
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	601a      	str	r2, [r3, #0]
	newTask->Delay 		= Delay + time_skip;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <Create_Task+0x90>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	441a      	add	r2, r3
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	605a      	str	r2, [r3, #4]
	newTask->Period	    = Period;
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	609a      	str	r2, [r3, #8]
	newTask->TaskID		= newId;
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	8afa      	ldrh	r2, [r7, #22]
 8000b08:	819a      	strh	r2, [r3, #12]
	newTask->Next 		= NULL;
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]

	return newTask;
 8000b10:	693b      	ldr	r3, [r7, #16]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200001aa 	.word	0x200001aa
 8000b20:	200001b0 	.word	0x200001b0
 8000b24:	200001ac 	.word	0x200001ac
 8000b28:	cccccccd 	.word	0xcccccccd
 8000b2c:	200001a8 	.word	0x200001a8

08000b30 <Enqueue_Task>:
 * Enqueue and modify Delay
 * Example: A->Delay = 1000, B->Delay = 2000, C->Delay = 3000
 * When we completely add all of them in queue, the queue will be
 * Element 1: A->Delay = 1000, Element 2: B->Delay = 1000, C->Delay = 1000
 */
sTask* Enqueue_Task(sTask* newTask){
 8000b30:	b480      	push	{r7}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	//First task in queue.
	if (head_task == NULL){
 8000b38:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <Enqueue_Task+0xcc>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d104      	bne.n	8000b4a <Enqueue_Task+0x1a>
		head_task = newTask;
 8000b40:	4a2e      	ldr	r2, [pc, #184]	; (8000bfc <Enqueue_Task+0xcc>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
		return newTask;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	e052      	b.n	8000bf0 <Enqueue_Task+0xc0>
	}

	//Task will add at middle of queue.
	sTask *ini = head_task;
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <Enqueue_Task+0xcc>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	617b      	str	r3, [r7, #20]
	sTask *pre = NULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
	uint32_t sum = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
	while (ini != NULL){
 8000b58:	e03a      	b.n	8000bd0 <Enqueue_Task+0xa0>
		if (sum + ini->Delay > newTask->Delay){
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	441a      	add	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d928      	bls.n	8000bbc <Enqueue_Task+0x8c>
			if (ini == head_task){
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <Enqueue_Task+0xcc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d10e      	bne.n	8000b92 <Enqueue_Task+0x62>
				newTask->Next = head_task;
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <Enqueue_Task+0xcc>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	611a      	str	r2, [r3, #16]
				head_task 	= newTask;
 8000b7c:	4a1f      	ldr	r2, [pc, #124]	; (8000bfc <Enqueue_Task+0xcc>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
				ini->Delay -= newTask->Delay;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	1ad2      	subs	r2, r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	e012      	b.n	8000bb8 <Enqueue_Task+0x88>
			} else {
				newTask->Next 	= ini;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	611a      	str	r2, [r3, #16]
				pre->Next 		= newTask;
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	611a      	str	r2, [r3, #16]
				newTask->Delay -= sum;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	1ad2      	subs	r2, r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	605a      	str	r2, [r3, #4]
				ini->Delay     -= newTask->Delay;
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	1ad2      	subs	r2, r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	605a      	str	r2, [r3, #4]
			}
			return newTask;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	e019      	b.n	8000bf0 <Enqueue_Task+0xc0>
		}
		sum 	+= ini->Delay;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
		pre		 = ini;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	613b      	str	r3, [r7, #16]
		ini		 = ini->Next;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	617b      	str	r3, [r7, #20]
	while (ini != NULL){
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1c1      	bne.n	8000b5a <Enqueue_Task+0x2a>
	}

	//Task will add of tail
	if (ini == NULL){
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d108      	bne.n	8000bee <Enqueue_Task+0xbe>
		pre->Next 		= newTask;
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	611a      	str	r2, [r3, #16]
		newTask->Delay -= sum;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	1ad2      	subs	r2, r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	605a      	str	r2, [r3, #4]
	}

	return newTask;
 8000bee:	687b      	ldr	r3, [r7, #4]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	371c      	adds	r7, #28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200001a4 	.word	0x200001a4

08000c00 <SCH_Add_Task>:

sTask* SCH_Add_Task(void (*pFunc)(void), uint32_t Delay, uint32_t Period){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
	sTask* newTask = Create_Task(pFunc, Delay, Period);
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	68b9      	ldr	r1, [r7, #8]
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff ff43 	bl	8000a9c <Create_Task>
 8000c16:	6178      	str	r0, [r7, #20]
	if (newTask == NULL){
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <SCH_Add_Task+0x22>
		return NULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e003      	b.n	8000c2a <SCH_Add_Task+0x2a>
	}
	return Enqueue_Task(newTask);
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff84 	bl	8000b30 <Enqueue_Task>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <SCH_Dispatch_Tasks>:

/*
 * If no task run => return 0
 * task run => return 1
 */
uint8_t SCH_Dispatch_Tasks(void){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
	if (head_task == NULL || head_task->Delay > 0) return 0;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <SCH_Dispatch_Tasks+0x68>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d004      	beq.n	8000c4c <SCH_Dispatch_Tasks+0x18>
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <SCH_Dispatch_Tasks+0x68>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SCH_Dispatch_Tasks+0x1c>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e021      	b.n	8000c94 <SCH_Dispatch_Tasks+0x60>

	// Remove head task out of queue (dequeue, not delete)
	// and config delay then enqueue it again.
	sTask* runningTask = head_task;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <SCH_Dispatch_Tasks+0x68>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	607b      	str	r3, [r7, #4]
	head_task = head_task->Next;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <SCH_Dispatch_Tasks+0x68>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <SCH_Dispatch_Tasks+0x68>)
 8000c5e:	6013      	str	r3, [r2, #0]

	runningTask->Next 	= NULL;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
	runningTask->Delay 	= runningTask->Period;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	605a      	str	r2, [r3, #4]

	// Run task
	runningTask->pFunc();
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4798      	blx	r3
	// Save the task just ran
	TaskIdJustRun = runningTask->TaskID;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	899a      	ldrh	r2, [r3, #12]
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <SCH_Dispatch_Tasks+0x6c>)
 8000c7a:	801a      	strh	r2, [r3, #0]

	// Add again if a task has period value isn't equal to 0.
	if (runningTask->Period != 0) Enqueue_Task(runningTask);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <SCH_Dispatch_Tasks+0x58>
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff53 	bl	8000b30 <Enqueue_Task>
 8000c8a:	e002      	b.n	8000c92 <SCH_Dispatch_Tasks+0x5e>
	else free(runningTask);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f002 fb75 	bl	800337c <free>

	return 1;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200001a4 	.word	0x200001a4
 8000ca0:	200001ae 	.word	0x200001ae

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_MspInit+0x40>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <HAL_MspInit+0x40>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_MspInit+0x40>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_MspInit+0x40>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_MspInit+0x40>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_MspInit+0x40>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf8:	d113      	bne.n	8000d22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_TIM_Base_MspInit+0x44>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <HAL_TIM_Base_MspInit+0x44>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_TIM_Base_MspInit+0x44>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	201c      	movs	r0, #28
 8000d18:	f000 fa35 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d1c:	201c      	movs	r0, #28
 8000d1e:	f000 fa4e 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <HAL_UART_MspInit+0x9c>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d139      	bne.n	8000dc4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_UART_MspInit+0xa0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_UART_MspInit+0xa0>)
 8000d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_UART_MspInit+0xa0>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_UART_MspInit+0xa0>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0xa0>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_UART_MspInit+0xa0>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	4619      	mov	r1, r3
 8000d94:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <HAL_UART_MspInit+0xa4>)
 8000d96:	f000 fadf 	bl	8001358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4619      	mov	r1, r3
 8000dae:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <HAL_UART_MspInit+0xa4>)
 8000db0:	f000 fad2 	bl	8001358 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2025      	movs	r0, #37	; 0x25
 8000dba:	f000 f9e4 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dbe:	2025      	movs	r0, #37	; 0x25
 8000dc0:	f000 f9fd 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40013800 	.word	0x40013800
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010800 	.word	0x40010800

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1e:	f000 f8bf 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM2_IRQHandler+0x10>)
 8000e2e:	f001 f903 	bl	8002038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000114 	.word	0x20000114

08000e3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <USART1_IRQHandler+0x10>)
 8000e42:	f001 fd19 	bl	8002878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000015c 	.word	0x2000015c

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <_sbrk+0x5c>)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <_sbrk+0x60>)
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <_sbrk+0x64>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <_sbrk+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e80:	f002 fa4a 	bl	8003318 <__errno>
 8000e84:	4603      	mov	r3, r0
 8000e86:	220c      	movs	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e009      	b.n	8000ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <_sbrk+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20002800 	.word	0x20002800
 8000eb0:	00000400 	.word	0x00000400
 8000eb4:	200001b4 	.word	0x200001b4
 8000eb8:	200001d0 	.word	0x200001d0

08000ebc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec8:	f7ff fff8 	bl	8000ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ece:	490c      	ldr	r1, [pc, #48]	; (8000f00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ed0:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ee4:	4c09      	ldr	r4, [pc, #36]	; (8000f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f002 fa17 	bl	8003324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef6:	f7ff fc29 	bl	800074c <main>
  bx lr
 8000efa:	4770      	bx	lr
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f04:	08003d6c 	.word	0x08003d6c
  ldr r2, =_sbss
 8000f08:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000f0c:	200001cc 	.word	0x200001cc

08000f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_2_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x28>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x28>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f923 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff feb8 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40022000 	.word	0x40022000

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f93b 	bl	80011da <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f903 	bl	8001186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000010 	.word	0x20000010
 8000f98:	20000018 	.word	0x20000018
 8000f9c:	20000014 	.word	0x20000014

08000fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_IncTick+0x1c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	20000018 	.word	0x20000018
 8000fc0:	200001b8 	.word	0x200001b8

08000fc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b02      	ldr	r3, [pc, #8]	; (8000fd4 <HAL_GetTick+0x10>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	200001b8 	.word	0x200001b8

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4906      	ldr	r1, [pc, #24]	; (8001070 <__NVIC_EnableIRQ+0x34>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f7ff ff90 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff2d 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff42 	bl	8001020 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff90 	bl	80010c8 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5f 	bl	8001074 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff35 	bl	800103c <__NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffa2 	bl	800112c <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b085      	sub	sp, #20
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d008      	beq.n	800121c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2204      	movs	r2, #4
 800120e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e020      	b.n	800125e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 020e 	bic.w	r2, r2, #14
 800122a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0201 	bic.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800125c:	7bfb      	ldrb	r3, [r7, #15]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d005      	beq.n	800128c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2204      	movs	r2, #4
 8001284:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	e051      	b.n	8001330 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 020e 	bic.w	r2, r2, #14
 800129a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0201 	bic.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a22      	ldr	r2, [pc, #136]	; (800133c <HAL_DMA_Abort_IT+0xd4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d029      	beq.n	800130a <HAL_DMA_Abort_IT+0xa2>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a21      	ldr	r2, [pc, #132]	; (8001340 <HAL_DMA_Abort_IT+0xd8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d022      	beq.n	8001306 <HAL_DMA_Abort_IT+0x9e>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_DMA_Abort_IT+0xdc>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d01a      	beq.n	8001300 <HAL_DMA_Abort_IT+0x98>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <HAL_DMA_Abort_IT+0xe0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d012      	beq.n	80012fa <HAL_DMA_Abort_IT+0x92>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1c      	ldr	r2, [pc, #112]	; (800134c <HAL_DMA_Abort_IT+0xe4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00a      	beq.n	80012f4 <HAL_DMA_Abort_IT+0x8c>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <HAL_DMA_Abort_IT+0xe8>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d102      	bne.n	80012ee <HAL_DMA_Abort_IT+0x86>
 80012e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012ec:	e00e      	b.n	800130c <HAL_DMA_Abort_IT+0xa4>
 80012ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012f2:	e00b      	b.n	800130c <HAL_DMA_Abort_IT+0xa4>
 80012f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f8:	e008      	b.n	800130c <HAL_DMA_Abort_IT+0xa4>
 80012fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fe:	e005      	b.n	800130c <HAL_DMA_Abort_IT+0xa4>
 8001300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001304:	e002      	b.n	800130c <HAL_DMA_Abort_IT+0xa4>
 8001306:	2310      	movs	r3, #16
 8001308:	e000      	b.n	800130c <HAL_DMA_Abort_IT+0xa4>
 800130a:	2301      	movs	r3, #1
 800130c:	4a11      	ldr	r2, [pc, #68]	; (8001354 <HAL_DMA_Abort_IT+0xec>)
 800130e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
    } 
  }
  return status;
 8001330:	7bfb      	ldrb	r3, [r7, #15]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40020008 	.word	0x40020008
 8001340:	4002001c 	.word	0x4002001c
 8001344:	40020030 	.word	0x40020030
 8001348:	40020044 	.word	0x40020044
 800134c:	40020058 	.word	0x40020058
 8001350:	4002006c 	.word	0x4002006c
 8001354:	40020000 	.word	0x40020000

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b08b      	sub	sp, #44	; 0x2c
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136a:	e161      	b.n	8001630 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800136c:	2201      	movs	r2, #1
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	429a      	cmp	r2, r3
 8001386:	f040 8150 	bne.w	800162a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4a97      	ldr	r2, [pc, #604]	; (80015ec <HAL_GPIO_Init+0x294>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d05e      	beq.n	8001452 <HAL_GPIO_Init+0xfa>
 8001394:	4a95      	ldr	r2, [pc, #596]	; (80015ec <HAL_GPIO_Init+0x294>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d875      	bhi.n	8001486 <HAL_GPIO_Init+0x12e>
 800139a:	4a95      	ldr	r2, [pc, #596]	; (80015f0 <HAL_GPIO_Init+0x298>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d058      	beq.n	8001452 <HAL_GPIO_Init+0xfa>
 80013a0:	4a93      	ldr	r2, [pc, #588]	; (80015f0 <HAL_GPIO_Init+0x298>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d86f      	bhi.n	8001486 <HAL_GPIO_Init+0x12e>
 80013a6:	4a93      	ldr	r2, [pc, #588]	; (80015f4 <HAL_GPIO_Init+0x29c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d052      	beq.n	8001452 <HAL_GPIO_Init+0xfa>
 80013ac:	4a91      	ldr	r2, [pc, #580]	; (80015f4 <HAL_GPIO_Init+0x29c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d869      	bhi.n	8001486 <HAL_GPIO_Init+0x12e>
 80013b2:	4a91      	ldr	r2, [pc, #580]	; (80015f8 <HAL_GPIO_Init+0x2a0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d04c      	beq.n	8001452 <HAL_GPIO_Init+0xfa>
 80013b8:	4a8f      	ldr	r2, [pc, #572]	; (80015f8 <HAL_GPIO_Init+0x2a0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d863      	bhi.n	8001486 <HAL_GPIO_Init+0x12e>
 80013be:	4a8f      	ldr	r2, [pc, #572]	; (80015fc <HAL_GPIO_Init+0x2a4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d046      	beq.n	8001452 <HAL_GPIO_Init+0xfa>
 80013c4:	4a8d      	ldr	r2, [pc, #564]	; (80015fc <HAL_GPIO_Init+0x2a4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d85d      	bhi.n	8001486 <HAL_GPIO_Init+0x12e>
 80013ca:	2b12      	cmp	r3, #18
 80013cc:	d82a      	bhi.n	8001424 <HAL_GPIO_Init+0xcc>
 80013ce:	2b12      	cmp	r3, #18
 80013d0:	d859      	bhi.n	8001486 <HAL_GPIO_Init+0x12e>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <HAL_GPIO_Init+0x80>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	08001453 	.word	0x08001453
 80013dc:	0800142d 	.word	0x0800142d
 80013e0:	0800143f 	.word	0x0800143f
 80013e4:	08001481 	.word	0x08001481
 80013e8:	08001487 	.word	0x08001487
 80013ec:	08001487 	.word	0x08001487
 80013f0:	08001487 	.word	0x08001487
 80013f4:	08001487 	.word	0x08001487
 80013f8:	08001487 	.word	0x08001487
 80013fc:	08001487 	.word	0x08001487
 8001400:	08001487 	.word	0x08001487
 8001404:	08001487 	.word	0x08001487
 8001408:	08001487 	.word	0x08001487
 800140c:	08001487 	.word	0x08001487
 8001410:	08001487 	.word	0x08001487
 8001414:	08001487 	.word	0x08001487
 8001418:	08001487 	.word	0x08001487
 800141c:	08001435 	.word	0x08001435
 8001420:	08001449 	.word	0x08001449
 8001424:	4a76      	ldr	r2, [pc, #472]	; (8001600 <HAL_GPIO_Init+0x2a8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800142a:	e02c      	b.n	8001486 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	623b      	str	r3, [r7, #32]
          break;
 8001432:	e029      	b.n	8001488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	3304      	adds	r3, #4
 800143a:	623b      	str	r3, [r7, #32]
          break;
 800143c:	e024      	b.n	8001488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	3308      	adds	r3, #8
 8001444:	623b      	str	r3, [r7, #32]
          break;
 8001446:	e01f      	b.n	8001488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	330c      	adds	r3, #12
 800144e:	623b      	str	r3, [r7, #32]
          break;
 8001450:	e01a      	b.n	8001488 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800145a:	2304      	movs	r3, #4
 800145c:	623b      	str	r3, [r7, #32]
          break;
 800145e:	e013      	b.n	8001488 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d105      	bne.n	8001474 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001468:	2308      	movs	r3, #8
 800146a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	611a      	str	r2, [r3, #16]
          break;
 8001472:	e009      	b.n	8001488 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001474:	2308      	movs	r3, #8
 8001476:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	615a      	str	r2, [r3, #20]
          break;
 800147e:	e003      	b.n	8001488 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
          break;
 8001484:	e000      	b.n	8001488 <HAL_GPIO_Init+0x130>
          break;
 8001486:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2bff      	cmp	r3, #255	; 0xff
 800148c:	d801      	bhi.n	8001492 <HAL_GPIO_Init+0x13a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	e001      	b.n	8001496 <HAL_GPIO_Init+0x13e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3304      	adds	r3, #4
 8001496:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2bff      	cmp	r3, #255	; 0xff
 800149c:	d802      	bhi.n	80014a4 <HAL_GPIO_Init+0x14c>
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	e002      	b.n	80014aa <HAL_GPIO_Init+0x152>
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	3b08      	subs	r3, #8
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	210f      	movs	r1, #15
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	401a      	ands	r2, r3
 80014bc:	6a39      	ldr	r1, [r7, #32]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	431a      	orrs	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80a9 	beq.w	800162a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014d8:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <HAL_GPIO_Init+0x2ac>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a49      	ldr	r2, [pc, #292]	; (8001604 <HAL_GPIO_Init+0x2ac>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b47      	ldr	r3, [pc, #284]	; (8001604 <HAL_GPIO_Init+0x2ac>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014f0:	4a45      	ldr	r2, [pc, #276]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a3d      	ldr	r2, [pc, #244]	; (800160c <HAL_GPIO_Init+0x2b4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00d      	beq.n	8001538 <HAL_GPIO_Init+0x1e0>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a3c      	ldr	r2, [pc, #240]	; (8001610 <HAL_GPIO_Init+0x2b8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d007      	beq.n	8001534 <HAL_GPIO_Init+0x1dc>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a3b      	ldr	r2, [pc, #236]	; (8001614 <HAL_GPIO_Init+0x2bc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d101      	bne.n	8001530 <HAL_GPIO_Init+0x1d8>
 800152c:	2302      	movs	r3, #2
 800152e:	e004      	b.n	800153a <HAL_GPIO_Init+0x1e2>
 8001530:	2303      	movs	r3, #3
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x1e2>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_GPIO_Init+0x1e2>
 8001538:	2300      	movs	r3, #0
 800153a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153c:	f002 0203 	and.w	r2, r2, #3
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	4093      	lsls	r3, r2
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800154a:	492f      	ldr	r1, [pc, #188]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001564:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	492b      	ldr	r1, [pc, #172]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	608b      	str	r3, [r1, #8]
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001572:	4b29      	ldr	r3, [pc, #164]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	43db      	mvns	r3, r3
 800157a:	4927      	ldr	r1, [pc, #156]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 800157c:	4013      	ands	r3, r2
 800157e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	4921      	ldr	r1, [pc, #132]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	60cb      	str	r3, [r1, #12]
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800159a:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	491d      	ldr	r1, [pc, #116]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4917      	ldr	r1, [pc, #92]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	4913      	ldr	r1, [pc, #76]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d01f      	beq.n	800161c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	490d      	ldr	r1, [pc, #52]	; (8001618 <HAL_GPIO_Init+0x2c0>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
 80015e8:	e01f      	b.n	800162a <HAL_GPIO_Init+0x2d2>
 80015ea:	bf00      	nop
 80015ec:	10320000 	.word	0x10320000
 80015f0:	10310000 	.word	0x10310000
 80015f4:	10220000 	.word	0x10220000
 80015f8:	10210000 	.word	0x10210000
 80015fc:	10120000 	.word	0x10120000
 8001600:	10110000 	.word	0x10110000
 8001604:	40021000 	.word	0x40021000
 8001608:	40010000 	.word	0x40010000
 800160c:	40010800 	.word	0x40010800
 8001610:	40010c00 	.word	0x40010c00
 8001614:	40011000 	.word	0x40011000
 8001618:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_GPIO_Init+0x2f4>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	43db      	mvns	r3, r3
 8001624:	4909      	ldr	r1, [pc, #36]	; (800164c <HAL_GPIO_Init+0x2f4>)
 8001626:	4013      	ands	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	3301      	adds	r3, #1
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	fa22 f303 	lsr.w	r3, r2, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	f47f ae96 	bne.w	800136c <HAL_GPIO_Init+0x14>
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	372c      	adds	r7, #44	; 0x2c
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	887b      	ldrh	r3, [r7, #2]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	e001      	b.n	8001672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	807b      	strh	r3, [r7, #2]
 800168a:	4613      	mov	r3, r2
 800168c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800168e:	787b      	ldrb	r3, [r7, #1]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001694:	887a      	ldrh	r2, [r7, #2]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800169a:	e003      	b.n	80016a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	041a      	lsls	r2, r3, #16
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	611a      	str	r2, [r3, #16]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c0:	887a      	ldrh	r2, [r7, #2]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	041a      	lsls	r2, r3, #16
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	400b      	ands	r3, r1
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	611a      	str	r2, [r3, #16]
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e272      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8087 	beq.w	800180e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001700:	4b92      	ldr	r3, [pc, #584]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b04      	cmp	r3, #4
 800170a:	d00c      	beq.n	8001726 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800170c:	4b8f      	ldr	r3, [pc, #572]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d112      	bne.n	800173e <HAL_RCC_OscConfig+0x5e>
 8001718:	4b8c      	ldr	r3, [pc, #560]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001724:	d10b      	bne.n	800173e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001726:	4b89      	ldr	r3, [pc, #548]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d06c      	beq.n	800180c <HAL_RCC_OscConfig+0x12c>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d168      	bne.n	800180c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e24c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x76>
 8001748:	4b80      	ldr	r3, [pc, #512]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a7f      	ldr	r2, [pc, #508]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 800174e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e02e      	b.n	80017b4 <HAL_RCC_OscConfig+0xd4>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x98>
 800175e:	4b7b      	ldr	r3, [pc, #492]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a7a      	ldr	r2, [pc, #488]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b78      	ldr	r3, [pc, #480]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a77      	ldr	r2, [pc, #476]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xd4>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0xbc>
 8001782:	4b72      	ldr	r3, [pc, #456]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a71      	ldr	r2, [pc, #452]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b6f      	ldr	r3, [pc, #444]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6e      	ldr	r2, [pc, #440]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xd4>
 800179c:	4b6b      	ldr	r3, [pc, #428]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a6a      	ldr	r2, [pc, #424]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b68      	ldr	r3, [pc, #416]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a67      	ldr	r2, [pc, #412]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fc02 	bl	8000fc4 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fbfe 	bl	8000fc4 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e200      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b5d      	ldr	r3, [pc, #372]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xe4>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fbee 	bl	8000fc4 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fbea 	bl	8000fc4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1ec      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	4b53      	ldr	r3, [pc, #332]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x10c>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d063      	beq.n	80018e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800181a:	4b4c      	ldr	r3, [pc, #304]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001826:	4b49      	ldr	r3, [pc, #292]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x18c>
 8001832:	4b46      	ldr	r3, [pc, #280]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b43      	ldr	r3, [pc, #268]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x176>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1c0      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b3d      	ldr	r3, [pc, #244]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4939      	ldr	r1, [pc, #228]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e03a      	b.n	80018e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b36      	ldr	r3, [pc, #216]	; (8001950 <HAL_RCC_OscConfig+0x270>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff fba3 	bl	8000fc4 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fb9f 	bl	8000fc4 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e1a1      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4927      	ldr	r1, [pc, #156]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b26      	ldr	r3, [pc, #152]	; (8001950 <HAL_RCC_OscConfig+0x270>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff fb82 	bl	8000fc4 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff fb7e 	bl	8000fc4 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e180      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d03a      	beq.n	8001964 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d019      	beq.n	800192a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_RCC_OscConfig+0x274>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fc:	f7ff fb62 	bl	8000fc4 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff fb5e 	bl	8000fc4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e160      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_RCC_OscConfig+0x26c>)
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001922:	2001      	movs	r0, #1
 8001924:	f000 face 	bl	8001ec4 <RCC_Delay>
 8001928:	e01c      	b.n	8001964 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_RCC_OscConfig+0x274>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7ff fb48 	bl	8000fc4 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001936:	e00f      	b.n	8001958 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001938:	f7ff fb44 	bl	8000fc4 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d908      	bls.n	8001958 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e146      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	42420000 	.word	0x42420000
 8001954:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	4b92      	ldr	r3, [pc, #584]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e9      	bne.n	8001938 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a6 	beq.w	8001abe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001976:	4b8b      	ldr	r3, [pc, #556]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10d      	bne.n	800199e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b88      	ldr	r3, [pc, #544]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a87      	ldr	r2, [pc, #540]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b85      	ldr	r3, [pc, #532]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199a:	2301      	movs	r3, #1
 800199c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199e:	4b82      	ldr	r3, [pc, #520]	; (8001ba8 <HAL_RCC_OscConfig+0x4c8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d118      	bne.n	80019dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019aa:	4b7f      	ldr	r3, [pc, #508]	; (8001ba8 <HAL_RCC_OscConfig+0x4c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a7e      	ldr	r2, [pc, #504]	; (8001ba8 <HAL_RCC_OscConfig+0x4c8>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b6:	f7ff fb05 	bl	8000fc4 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019be:	f7ff fb01 	bl	8000fc4 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b64      	cmp	r3, #100	; 0x64
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e103      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	4b75      	ldr	r3, [pc, #468]	; (8001ba8 <HAL_RCC_OscConfig+0x4c8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x312>
 80019e4:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4a6e      	ldr	r2, [pc, #440]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6213      	str	r3, [r2, #32]
 80019f0:	e02d      	b.n	8001a4e <HAL_RCC_OscConfig+0x36e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x334>
 80019fa:	4b6a      	ldr	r3, [pc, #424]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4a69      	ldr	r2, [pc, #420]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	f023 0301 	bic.w	r3, r3, #1
 8001a04:	6213      	str	r3, [r2, #32]
 8001a06:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a66      	ldr	r2, [pc, #408]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f023 0304 	bic.w	r3, r3, #4
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	e01c      	b.n	8001a4e <HAL_RCC_OscConfig+0x36e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	d10c      	bne.n	8001a36 <HAL_RCC_OscConfig+0x356>
 8001a1c:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4a60      	ldr	r2, [pc, #384]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	6213      	str	r3, [r2, #32]
 8001a28:	4b5e      	ldr	r3, [pc, #376]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a5d      	ldr	r2, [pc, #372]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	e00b      	b.n	8001a4e <HAL_RCC_OscConfig+0x36e>
 8001a36:	4b5b      	ldr	r3, [pc, #364]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4a5a      	ldr	r2, [pc, #360]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	6213      	str	r3, [r2, #32]
 8001a42:	4b58      	ldr	r3, [pc, #352]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a57      	ldr	r2, [pc, #348]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d015      	beq.n	8001a82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fab5 	bl	8000fc4 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f7ff fab1 	bl	8000fc4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0b1      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	4b4b      	ldr	r3, [pc, #300]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0ee      	beq.n	8001a5e <HAL_RCC_OscConfig+0x37e>
 8001a80:	e014      	b.n	8001aac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a82:	f7ff fa9f 	bl	8000fc4 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fa9b 	bl	8000fc4 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e09b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa0:	4b40      	ldr	r3, [pc, #256]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1ee      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d105      	bne.n	8001abe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a3b      	ldr	r2, [pc, #236]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001abc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8087 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac8:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d061      	beq.n	8001b98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d146      	bne.n	8001b6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001adc:	4b33      	ldr	r3, [pc, #204]	; (8001bac <HAL_RCC_OscConfig+0x4cc>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fa6f 	bl	8000fc4 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aea:	f7ff fa6b 	bl	8000fc4 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e06d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afc:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b10:	d108      	bne.n	8001b24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	4921      	ldr	r1, [pc, #132]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a19      	ldr	r1, [r3, #32]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	430b      	orrs	r3, r1
 8001b36:	491b      	ldr	r1, [pc, #108]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_RCC_OscConfig+0x4cc>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff fa3f 	bl	8000fc4 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4a:	f7ff fa3b 	bl	8000fc4 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e03d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x46a>
 8001b68:	e035      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_RCC_OscConfig+0x4cc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fa28 	bl	8000fc4 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b78:	f7ff fa24 	bl	8000fc4 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e026      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x498>
 8001b96:	e01e      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e019      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_RCC_OscConfig+0x500>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0d0      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b6a      	ldr	r3, [pc, #424]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d910      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0207 	bic.w	r2, r3, #7
 8001c0e:	4965      	ldr	r1, [pc, #404]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0b8      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c40:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c64:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	494d      	ldr	r1, [pc, #308]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d040      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d115      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e07f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e073      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e06b      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc2:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4936      	ldr	r1, [pc, #216]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd4:	f7ff f976 	bl	8000fc4 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7ff f972 	bl	8000fc4 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e053      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 020c 	and.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1eb      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d04:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d210      	bcs.n	8001d34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 0207 	bic.w	r2, r3, #7
 8001d1a:	4922      	ldr	r1, [pc, #136]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e032      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4916      	ldr	r1, [pc, #88]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	490e      	ldr	r1, [pc, #56]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d72:	f000 f821 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	490a      	ldr	r1, [pc, #40]	; (8001dac <HAL_RCC_ClockConfig+0x1c8>)
 8001d84:	5ccb      	ldrb	r3, [r1, r3]
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_RCC_ClockConfig+0x1cc>)
 8001d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCC_ClockConfig+0x1d0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f8d4 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08003d04 	.word	0x08003d04
 8001db0:	20000010 	.word	0x20000010
 8001db4:	20000014 	.word	0x20000014

08001db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d002      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x30>
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d003      	beq.n	8001dee <HAL_RCC_GetSysClockFreq+0x36>
 8001de6:	e027      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dea:	613b      	str	r3, [r7, #16]
      break;
 8001dec:	e027      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	0c9b      	lsrs	r3, r3, #18
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001df8:	5cd3      	ldrb	r3, [r2, r3]
 8001dfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d010      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	0c5b      	lsrs	r3, r3, #17
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e1a:	fb03 f202 	mul.w	r2, r3, r2
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	e004      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	613b      	str	r3, [r7, #16]
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e3a:	613b      	str	r3, [r7, #16]
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	693b      	ldr	r3, [r7, #16]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	007a1200 	.word	0x007a1200
 8001e54:	08003d1c 	.word	0x08003d1c
 8001e58:	08003d2c 	.word	0x08003d2c
 8001e5c:	003d0900 	.word	0x003d0900

08001e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b02      	ldr	r3, [pc, #8]	; (8001e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	20000010 	.word	0x20000010

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e78:	f7ff fff2 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4903      	ldr	r1, [pc, #12]	; (8001e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	08003d14 	.word	0x08003d14

08001e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea0:	f7ff ffde 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	0adb      	lsrs	r3, r3, #11
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4903      	ldr	r1, [pc, #12]	; (8001ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08003d14 	.word	0x08003d14

08001ec4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <RCC_Delay+0x34>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <RCC_Delay+0x38>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0a5b      	lsrs	r3, r3, #9
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ee0:	bf00      	nop
  }
  while (Delay --);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1e5a      	subs	r2, r3, #1
 8001ee6:	60fa      	str	r2, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f9      	bne.n	8001ee0 <RCC_Delay+0x1c>
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	20000010 	.word	0x20000010
 8001efc:	10624dd3 	.word	0x10624dd3

08001f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e041      	b.n	8001f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe fede 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f000 fa6e 	bl	8002420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d001      	beq.n	8001fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e035      	b.n	8002024 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a16      	ldr	r2, [pc, #88]	; (8002030 <HAL_TIM_Base_Start_IT+0x90>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_TIM_Base_Start_IT+0x4e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe2:	d004      	beq.n	8001fee <HAL_TIM_Base_Start_IT+0x4e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a12      	ldr	r2, [pc, #72]	; (8002034 <HAL_TIM_Base_Start_IT+0x94>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d111      	bne.n	8002012 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b06      	cmp	r3, #6
 8001ffe:	d010      	beq.n	8002022 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002010:	e007      	b.n	8002022 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0201 	orr.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40012c00 	.word	0x40012c00
 8002034:	40000400 	.word	0x40000400

08002038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b02      	cmp	r3, #2
 800204c:	d122      	bne.n	8002094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b02      	cmp	r3, #2
 800205a:	d11b      	bne.n	8002094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0202 	mvn.w	r2, #2
 8002064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f9b4 	bl	80023e8 <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f9a7 	bl	80023d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f9b6 	bl	80023fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d122      	bne.n	80020e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d11b      	bne.n	80020e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0204 	mvn.w	r2, #4
 80020b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2202      	movs	r2, #2
 80020be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f98a 	bl	80023e8 <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f97d 	bl	80023d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f98c 	bl	80023fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d122      	bne.n	800213c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b08      	cmp	r3, #8
 8002102:	d11b      	bne.n	800213c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0208 	mvn.w	r2, #8
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2204      	movs	r2, #4
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f960 	bl	80023e8 <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f953 	bl	80023d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f962 	bl	80023fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b10      	cmp	r3, #16
 8002148:	d122      	bne.n	8002190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b10      	cmp	r3, #16
 8002156:	d11b      	bne.n	8002190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0210 	mvn.w	r2, #16
 8002160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2208      	movs	r2, #8
 8002166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f936 	bl	80023e8 <HAL_TIM_IC_CaptureCallback>
 800217c:	e005      	b.n	800218a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f929 	bl	80023d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f938 	bl	80023fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d10e      	bne.n	80021bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d107      	bne.n	80021bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0201 	mvn.w	r2, #1
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe fc0e 	bl	80009d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c6:	2b80      	cmp	r3, #128	; 0x80
 80021c8:	d10e      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d4:	2b80      	cmp	r3, #128	; 0x80
 80021d6:	d107      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fa6b 	bl	80026be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f2:	2b40      	cmp	r3, #64	; 0x40
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002200:	2b40      	cmp	r3, #64	; 0x40
 8002202:	d107      	bne.n	8002214 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8fc 	bl	800240c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b20      	cmp	r3, #32
 8002220:	d10e      	bne.n	8002240 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b20      	cmp	r3, #32
 800222e:	d107      	bne.n	8002240 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0220 	mvn.w	r2, #32
 8002238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fa36 	bl	80026ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_TIM_ConfigClockSource+0x1c>
 8002260:	2302      	movs	r3, #2
 8002262:	e0b4      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x186>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800228a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229c:	d03e      	beq.n	800231c <HAL_TIM_ConfigClockSource+0xd4>
 800229e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a2:	f200 8087 	bhi.w	80023b4 <HAL_TIM_ConfigClockSource+0x16c>
 80022a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022aa:	f000 8086 	beq.w	80023ba <HAL_TIM_ConfigClockSource+0x172>
 80022ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b2:	d87f      	bhi.n	80023b4 <HAL_TIM_ConfigClockSource+0x16c>
 80022b4:	2b70      	cmp	r3, #112	; 0x70
 80022b6:	d01a      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0xa6>
 80022b8:	2b70      	cmp	r3, #112	; 0x70
 80022ba:	d87b      	bhi.n	80023b4 <HAL_TIM_ConfigClockSource+0x16c>
 80022bc:	2b60      	cmp	r3, #96	; 0x60
 80022be:	d050      	beq.n	8002362 <HAL_TIM_ConfigClockSource+0x11a>
 80022c0:	2b60      	cmp	r3, #96	; 0x60
 80022c2:	d877      	bhi.n	80023b4 <HAL_TIM_ConfigClockSource+0x16c>
 80022c4:	2b50      	cmp	r3, #80	; 0x50
 80022c6:	d03c      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0xfa>
 80022c8:	2b50      	cmp	r3, #80	; 0x50
 80022ca:	d873      	bhi.n	80023b4 <HAL_TIM_ConfigClockSource+0x16c>
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d058      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0x13a>
 80022d0:	2b40      	cmp	r3, #64	; 0x40
 80022d2:	d86f      	bhi.n	80023b4 <HAL_TIM_ConfigClockSource+0x16c>
 80022d4:	2b30      	cmp	r3, #48	; 0x30
 80022d6:	d064      	beq.n	80023a2 <HAL_TIM_ConfigClockSource+0x15a>
 80022d8:	2b30      	cmp	r3, #48	; 0x30
 80022da:	d86b      	bhi.n	80023b4 <HAL_TIM_ConfigClockSource+0x16c>
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d060      	beq.n	80023a2 <HAL_TIM_ConfigClockSource+0x15a>
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d867      	bhi.n	80023b4 <HAL_TIM_ConfigClockSource+0x16c>
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d05c      	beq.n	80023a2 <HAL_TIM_ConfigClockSource+0x15a>
 80022e8:	2b10      	cmp	r3, #16
 80022ea:	d05a      	beq.n	80023a2 <HAL_TIM_ConfigClockSource+0x15a>
 80022ec:	e062      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6899      	ldr	r1, [r3, #8]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f000 f95e 	bl	80025be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002310:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	609a      	str	r2, [r3, #8]
      break;
 800231a:	e04f      	b.n	80023bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6899      	ldr	r1, [r3, #8]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f000 f947 	bl	80025be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800233e:	609a      	str	r2, [r3, #8]
      break;
 8002340:	e03c      	b.n	80023bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	461a      	mov	r2, r3
 8002350:	f000 f8be 	bl	80024d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2150      	movs	r1, #80	; 0x50
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f915 	bl	800258a <TIM_ITRx_SetConfig>
      break;
 8002360:	e02c      	b.n	80023bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6859      	ldr	r1, [r3, #4]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	461a      	mov	r2, r3
 8002370:	f000 f8dc 	bl	800252c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2160      	movs	r1, #96	; 0x60
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f905 	bl	800258a <TIM_ITRx_SetConfig>
      break;
 8002380:	e01c      	b.n	80023bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	461a      	mov	r2, r3
 8002390:	f000 f89e 	bl	80024d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2140      	movs	r1, #64	; 0x40
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f8f5 	bl	800258a <TIM_ITRx_SetConfig>
      break;
 80023a0:	e00c      	b.n	80023bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4619      	mov	r1, r3
 80023ac:	4610      	mov	r0, r2
 80023ae:	f000 f8ec 	bl	800258a <TIM_ITRx_SetConfig>
      break;
 80023b2:	e003      	b.n	80023bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
      break;
 80023b8:	e000      	b.n	80023bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
	...

08002420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a25      	ldr	r2, [pc, #148]	; (80024c8 <TIM_Base_SetConfig+0xa8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d007      	beq.n	8002448 <TIM_Base_SetConfig+0x28>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243e:	d003      	beq.n	8002448 <TIM_Base_SetConfig+0x28>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a22      	ldr	r2, [pc, #136]	; (80024cc <TIM_Base_SetConfig+0xac>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d108      	bne.n	800245a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <TIM_Base_SetConfig+0xa8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <TIM_Base_SetConfig+0x52>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002468:	d003      	beq.n	8002472 <TIM_Base_SetConfig+0x52>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a17      	ldr	r2, [pc, #92]	; (80024cc <TIM_Base_SetConfig+0xac>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d108      	bne.n	8002484 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <TIM_Base_SetConfig+0xa8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d103      	bne.n	80024b8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	615a      	str	r2, [r3, #20]
}
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	40012c00 	.word	0x40012c00
 80024cc:	40000400 	.word	0x40000400

080024d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	f023 0201 	bic.w	r2, r3, #1
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f023 030a 	bic.w	r3, r3, #10
 800250c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	621a      	str	r2, [r3, #32]
}
 8002522:	bf00      	nop
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	f023 0210 	bic.w	r2, r3, #16
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	031b      	lsls	r3, r3, #12
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002568:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	621a      	str	r2, [r3, #32]
}
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800258a:	b480      	push	{r7}
 800258c:	b085      	sub	sp, #20
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f043 0307 	orr.w	r3, r3, #7
 80025ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	609a      	str	r2, [r3, #8]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025be:	b480      	push	{r7}
 80025c0:	b087      	sub	sp, #28
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	021a      	lsls	r2, r3, #8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	431a      	orrs	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	609a      	str	r2, [r3, #8]
}
 80025f2:	bf00      	nop
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002610:	2302      	movs	r3, #2
 8002612:	e041      	b.n	8002698 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d009      	beq.n	800266c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002660:	d004      	beq.n	800266c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a10      	ldr	r2, [pc, #64]	; (80026a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d10c      	bne.n	8002686 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002672:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	4313      	orrs	r3, r2
 800267c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40012c00 	.word	0x40012c00
 80026a8:	40000400 	.word	0x40000400

080026ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e042      	b.n	8002768 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe fb1a 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2224      	movs	r2, #36	; 0x24
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fd71 	bl	80031fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b20      	cmp	r3, #32
 800278e:	d16d      	bne.n	800286c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_UART_Transmit+0x2c>
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e066      	b.n	800286e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2221      	movs	r2, #33	; 0x21
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ae:	f7fe fc09 	bl	8000fc4 <HAL_GetTick>
 80027b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	88fa      	ldrh	r2, [r7, #6]
 80027b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	88fa      	ldrh	r2, [r7, #6]
 80027be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c8:	d108      	bne.n	80027dc <HAL_UART_Transmit+0x6c>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d104      	bne.n	80027dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	e003      	b.n	80027e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027e4:	e02a      	b.n	800283c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2180      	movs	r1, #128	; 0x80
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 faf9 	bl	8002de8 <UART_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e036      	b.n	800286e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002814:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	3302      	adds	r3, #2
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	e007      	b.n	800282e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	781a      	ldrb	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3301      	adds	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1cf      	bne.n	80027e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2200      	movs	r2, #0
 800284e:	2140      	movs	r1, #64	; 0x40
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fac9 	bl	8002de8 <UART_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e006      	b.n	800286e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800286c:	2302      	movs	r3, #2
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b0ba      	sub	sp, #232	; 0xe8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80028b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_UART_IRQHandler+0x66>
 80028ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fbd1 	bl	800307e <UART_Receive_IT>
      return;
 80028dc:	e25b      	b.n	8002d96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 80de 	beq.w	8002aa4 <HAL_UART_IRQHandler+0x22c>
 80028e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d106      	bne.n	8002902 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80d1 	beq.w	8002aa4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_UART_IRQHandler+0xae>
 800290e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_UART_IRQHandler+0xd2>
 8002932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f043 0202 	orr.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800294a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <HAL_UART_IRQHandler+0xf6>
 8002956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f043 0204 	orr.w	r2, r3, #4
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800296e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d011      	beq.n	800299e <HAL_UART_IRQHandler+0x126>
 800297a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b00      	cmp	r3, #0
 8002984:	d105      	bne.n	8002992 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	f043 0208 	orr.w	r2, r3, #8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 81f2 	beq.w	8002d8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_UART_IRQHandler+0x14e>
 80029b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fb5c 	bl	800307e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	bf14      	ite	ne
 80029d4:	2301      	movne	r3, #1
 80029d6:	2300      	moveq	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <HAL_UART_IRQHandler+0x17a>
 80029ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d04f      	beq.n	8002a92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fa66 	bl	8002ec4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d041      	beq.n	8002a8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a14:	e853 3f00 	ldrex	r3, [r3]
 8002a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3314      	adds	r3, #20
 8002a2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a42:	e841 2300 	strex	r3, r2, [r1]
 8002a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1d9      	bne.n	8002a06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d013      	beq.n	8002a82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	4a7e      	ldr	r2, [pc, #504]	; (8002c58 <HAL_UART_IRQHandler+0x3e0>)
 8002a60:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fbfe 	bl	8001268 <HAL_DMA_Abort_IT>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a80:	e00e      	b.n	8002aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f99c 	bl	8002dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a88:	e00a      	b.n	8002aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f998 	bl	8002dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	e006      	b.n	8002aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f994 	bl	8002dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002a9e:	e175      	b.n	8002d8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa0:	bf00      	nop
    return;
 8002aa2:	e173      	b.n	8002d8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	f040 814f 	bne.w	8002d4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8148 	beq.w	8002d4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 8141 	beq.w	8002d4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80b6 	beq.w	8002c5c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002afc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8145 	beq.w	8002d90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	f080 813e 	bcs.w	8002d90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	f000 8088 	beq.w	8002c38 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b36:	e853 3f00 	ldrex	r3, [r3]
 8002b3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	330c      	adds	r3, #12
 8002b50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b54:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b60:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b64:	e841 2300 	strex	r3, r2, [r1]
 8002b68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1d9      	bne.n	8002b28 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3314      	adds	r3, #20
 8002b7a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7e:	e853 3f00 	ldrex	r3, [r3]
 8002b82:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3314      	adds	r3, #20
 8002b94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b98:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b9c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ba0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ba4:	e841 2300 	strex	r3, r2, [r1]
 8002ba8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002baa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e1      	bne.n	8002b74 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3314      	adds	r3, #20
 8002bb6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bba:	e853 3f00 	ldrex	r3, [r3]
 8002bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3314      	adds	r3, #20
 8002bd0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bd4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bdc:	e841 2300 	strex	r3, r2, [r1]
 8002be0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e3      	bne.n	8002bb0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c00:	e853 3f00 	ldrex	r3, [r3]
 8002c04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c08:	f023 0310 	bic.w	r3, r3, #16
 8002c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c1c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c22:	e841 2300 	strex	r3, r2, [r1]
 8002c26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e3      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fadd 	bl	80011f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f8bf 	bl	8002dd2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c54:	e09c      	b.n	8002d90 <HAL_UART_IRQHandler+0x518>
 8002c56:	bf00      	nop
 8002c58:	08002f89 	.word	0x08002f89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 808e 	beq.w	8002d94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8089 	beq.w	8002d94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ca6:	647a      	str	r2, [r7, #68]	; 0x44
 8002ca8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002caa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cae:	e841 2300 	strex	r3, r2, [r1]
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1e3      	bne.n	8002c82 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3314      	adds	r3, #20
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3314      	adds	r3, #20
 8002cda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cde:	633a      	str	r2, [r7, #48]	; 0x30
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce6:	e841 2300 	strex	r3, r2, [r1]
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e3      	bne.n	8002cba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	330c      	adds	r3, #12
 8002d06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	e853 3f00 	ldrex	r3, [r3]
 8002d0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0310 	bic.w	r3, r3, #16
 8002d16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	330c      	adds	r3, #12
 8002d20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d24:	61fa      	str	r2, [r7, #28]
 8002d26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	69b9      	ldr	r1, [r7, #24]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	617b      	str	r3, [r7, #20]
   return(result);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e3      	bne.n	8002d00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f844 	bl	8002dd2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d4a:	e023      	b.n	8002d94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d009      	beq.n	8002d6c <HAL_UART_IRQHandler+0x4f4>
 8002d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f923 	bl	8002fb0 <UART_Transmit_IT>
    return;
 8002d6a:	e014      	b.n	8002d96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00e      	beq.n	8002d96 <HAL_UART_IRQHandler+0x51e>
 8002d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f962 	bl	800304e <UART_EndTransmit_IT>
    return;
 8002d8a:	e004      	b.n	8002d96 <HAL_UART_IRQHandler+0x51e>
    return;
 8002d8c:	bf00      	nop
 8002d8e:	e002      	b.n	8002d96 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d90:	bf00      	nop
 8002d92:	e000      	b.n	8002d96 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d94:	bf00      	nop
  }
}
 8002d96:	37e8      	adds	r7, #232	; 0xe8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b090      	sub	sp, #64	; 0x40
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df8:	e050      	b.n	8002e9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d04c      	beq.n	8002e9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e08:	f7fe f8dc 	bl	8000fc4 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d241      	bcs.n	8002e9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	330c      	adds	r3, #12
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	e853 3f00 	ldrex	r3, [r3]
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	330c      	adds	r3, #12
 8002e36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e38:	637a      	str	r2, [r7, #52]	; 0x34
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e40:	e841 2300 	strex	r3, r2, [r1]
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e5      	bne.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3314      	adds	r3, #20
 8002e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3314      	adds	r3, #20
 8002e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e6c:	623a      	str	r2, [r7, #32]
 8002e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	69f9      	ldr	r1, [r7, #28]
 8002e72:	6a3a      	ldr	r2, [r7, #32]
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e5      	bne.n	8002e4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e00f      	b.n	8002ebc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d09f      	beq.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3740      	adds	r7, #64	; 0x40
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b095      	sub	sp, #84	; 0x54
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	e853 3f00 	ldrex	r3, [r3]
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eec:	643a      	str	r2, [r7, #64]	; 0x40
 8002eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ef4:	e841 2300 	strex	r3, r2, [r1]
 8002ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e5      	bne.n	8002ecc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3314      	adds	r3, #20
 8002f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	e853 3f00 	ldrex	r3, [r3]
 8002f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3314      	adds	r3, #20
 8002f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e5      	bne.n	8002f00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d119      	bne.n	8002f70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	e853 3f00 	ldrex	r3, [r3]
 8002f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f023 0310 	bic.w	r3, r3, #16
 8002f52:	647b      	str	r3, [r7, #68]	; 0x44
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f5c:	61ba      	str	r2, [r7, #24]
 8002f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	6979      	ldr	r1, [r7, #20]
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	613b      	str	r3, [r7, #16]
   return(result);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e5      	bne.n	8002f3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f7e:	bf00      	nop
 8002f80:	3754      	adds	r7, #84	; 0x54
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f7ff ff0c 	bl	8002dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b21      	cmp	r3, #33	; 0x21
 8002fc2:	d13e      	bne.n	8003042 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fcc:	d114      	bne.n	8002ff8 <UART_Transmit_IT+0x48>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d110      	bne.n	8002ff8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	1c9a      	adds	r2, r3, #2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	621a      	str	r2, [r3, #32]
 8002ff6:	e008      	b.n	800300a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	1c59      	adds	r1, r3, #1
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6211      	str	r1, [r2, #32]
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29b      	uxth	r3, r3
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4619      	mov	r1, r3
 8003018:	84d1      	strh	r1, [r2, #38]	; 0x26
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10f      	bne.n	800303e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800302c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800303c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
  }
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003064:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff fe94 	bl	8002d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b08c      	sub	sp, #48	; 0x30
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b22      	cmp	r3, #34	; 0x22
 8003090:	f040 80ae 	bne.w	80031f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309c:	d117      	bne.n	80030ce <UART_Receive_IT+0x50>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d113      	bne.n	80030ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030bc:	b29a      	uxth	r2, r3
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	1c9a      	adds	r2, r3, #2
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
 80030cc:	e026      	b.n	800311c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e0:	d007      	beq.n	80030f2 <UART_Receive_IT+0x74>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <UART_Receive_IT+0x82>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e008      	b.n	8003112 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800310c:	b2da      	uxtb	r2, r3
 800310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003110:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29b      	uxth	r3, r3
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4619      	mov	r1, r3
 800312a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800312c:	2b00      	cmp	r3, #0
 800312e:	d15d      	bne.n	80031ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0220 	bic.w	r2, r2, #32
 800313e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800314e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	2b01      	cmp	r3, #1
 8003174:	d135      	bne.n	80031e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	330c      	adds	r3, #12
 8003182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	e853 3f00 	ldrex	r3, [r3]
 800318a:	613b      	str	r3, [r7, #16]
   return(result);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f023 0310 	bic.w	r3, r3, #16
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	330c      	adds	r3, #12
 800319a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319c:	623a      	str	r2, [r7, #32]
 800319e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a0:	69f9      	ldr	r1, [r7, #28]
 80031a2:	6a3a      	ldr	r2, [r7, #32]
 80031a4:	e841 2300 	strex	r3, r2, [r1]
 80031a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e5      	bne.n	800317c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d10a      	bne.n	80031d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fdf9 	bl	8002dd2 <HAL_UARTEx_RxEventCallback>
 80031e0:	e002      	b.n	80031e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff fde3 	bl	8002dae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e002      	b.n	80031f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e000      	b.n	80031f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
  }
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3730      	adds	r7, #48	; 0x30
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003236:	f023 030c 	bic.w	r3, r3, #12
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	430b      	orrs	r3, r1
 8003242:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a2c      	ldr	r2, [pc, #176]	; (8003310 <UART_SetConfig+0x114>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d103      	bne.n	800326c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003264:	f7fe fe1a 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	e002      	b.n	8003272 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800326c:	f7fe fe02 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8003270:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	009a      	lsls	r2, r3, #2
 800327c:	441a      	add	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	4a22      	ldr	r2, [pc, #136]	; (8003314 <UART_SetConfig+0x118>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	0119      	lsls	r1, r3, #4
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009a      	lsls	r2, r3, #2
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <UART_SetConfig+0x118>)
 80032aa:	fba3 0302 	umull	r0, r3, r3, r2
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	2064      	movs	r0, #100	; 0x64
 80032b2:	fb00 f303 	mul.w	r3, r0, r3
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	3332      	adds	r3, #50	; 0x32
 80032bc:	4a15      	ldr	r2, [pc, #84]	; (8003314 <UART_SetConfig+0x118>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c8:	4419      	add	r1, r3
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	009a      	lsls	r2, r3, #2
 80032d4:	441a      	add	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <UART_SetConfig+0x118>)
 80032e2:	fba3 0302 	umull	r0, r3, r3, r2
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2064      	movs	r0, #100	; 0x64
 80032ea:	fb00 f303 	mul.w	r3, r0, r3
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	3332      	adds	r3, #50	; 0x32
 80032f4:	4a07      	ldr	r2, [pc, #28]	; (8003314 <UART_SetConfig+0x118>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	f003 020f 	and.w	r2, r3, #15
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	440a      	add	r2, r1
 8003306:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40013800 	.word	0x40013800
 8003314:	51eb851f 	.word	0x51eb851f

08003318 <__errno>:
 8003318:	4b01      	ldr	r3, [pc, #4]	; (8003320 <__errno+0x8>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	2000001c 	.word	0x2000001c

08003324 <__libc_init_array>:
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	2600      	movs	r6, #0
 8003328:	4d0c      	ldr	r5, [pc, #48]	; (800335c <__libc_init_array+0x38>)
 800332a:	4c0d      	ldr	r4, [pc, #52]	; (8003360 <__libc_init_array+0x3c>)
 800332c:	1b64      	subs	r4, r4, r5
 800332e:	10a4      	asrs	r4, r4, #2
 8003330:	42a6      	cmp	r6, r4
 8003332:	d109      	bne.n	8003348 <__libc_init_array+0x24>
 8003334:	f000 fcac 	bl	8003c90 <_init>
 8003338:	2600      	movs	r6, #0
 800333a:	4d0a      	ldr	r5, [pc, #40]	; (8003364 <__libc_init_array+0x40>)
 800333c:	4c0a      	ldr	r4, [pc, #40]	; (8003368 <__libc_init_array+0x44>)
 800333e:	1b64      	subs	r4, r4, r5
 8003340:	10a4      	asrs	r4, r4, #2
 8003342:	42a6      	cmp	r6, r4
 8003344:	d105      	bne.n	8003352 <__libc_init_array+0x2e>
 8003346:	bd70      	pop	{r4, r5, r6, pc}
 8003348:	f855 3b04 	ldr.w	r3, [r5], #4
 800334c:	4798      	blx	r3
 800334e:	3601      	adds	r6, #1
 8003350:	e7ee      	b.n	8003330 <__libc_init_array+0xc>
 8003352:	f855 3b04 	ldr.w	r3, [r5], #4
 8003356:	4798      	blx	r3
 8003358:	3601      	adds	r6, #1
 800335a:	e7f2      	b.n	8003342 <__libc_init_array+0x1e>
 800335c:	08003d64 	.word	0x08003d64
 8003360:	08003d64 	.word	0x08003d64
 8003364:	08003d64 	.word	0x08003d64
 8003368:	08003d68 	.word	0x08003d68

0800336c <malloc>:
 800336c:	4b02      	ldr	r3, [pc, #8]	; (8003378 <malloc+0xc>)
 800336e:	4601      	mov	r1, r0
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	f000 b87b 	b.w	800346c <_malloc_r>
 8003376:	bf00      	nop
 8003378:	2000001c 	.word	0x2000001c

0800337c <free>:
 800337c:	4b02      	ldr	r3, [pc, #8]	; (8003388 <free+0xc>)
 800337e:	4601      	mov	r1, r0
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	f000 b80b 	b.w	800339c <_free_r>
 8003386:	bf00      	nop
 8003388:	2000001c 	.word	0x2000001c

0800338c <memset>:
 800338c:	4603      	mov	r3, r0
 800338e:	4402      	add	r2, r0
 8003390:	4293      	cmp	r3, r2
 8003392:	d100      	bne.n	8003396 <memset+0xa>
 8003394:	4770      	bx	lr
 8003396:	f803 1b01 	strb.w	r1, [r3], #1
 800339a:	e7f9      	b.n	8003390 <memset+0x4>

0800339c <_free_r>:
 800339c:	b538      	push	{r3, r4, r5, lr}
 800339e:	4605      	mov	r5, r0
 80033a0:	2900      	cmp	r1, #0
 80033a2:	d040      	beq.n	8003426 <_free_r+0x8a>
 80033a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033a8:	1f0c      	subs	r4, r1, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bfb8      	it	lt
 80033ae:	18e4      	addlt	r4, r4, r3
 80033b0:	f000 f900 	bl	80035b4 <__malloc_lock>
 80033b4:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <_free_r+0x8c>)
 80033b6:	6813      	ldr	r3, [r2, #0]
 80033b8:	b933      	cbnz	r3, 80033c8 <_free_r+0x2c>
 80033ba:	6063      	str	r3, [r4, #4]
 80033bc:	6014      	str	r4, [r2, #0]
 80033be:	4628      	mov	r0, r5
 80033c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033c4:	f000 b8fc 	b.w	80035c0 <__malloc_unlock>
 80033c8:	42a3      	cmp	r3, r4
 80033ca:	d908      	bls.n	80033de <_free_r+0x42>
 80033cc:	6820      	ldr	r0, [r4, #0]
 80033ce:	1821      	adds	r1, r4, r0
 80033d0:	428b      	cmp	r3, r1
 80033d2:	bf01      	itttt	eq
 80033d4:	6819      	ldreq	r1, [r3, #0]
 80033d6:	685b      	ldreq	r3, [r3, #4]
 80033d8:	1809      	addeq	r1, r1, r0
 80033da:	6021      	streq	r1, [r4, #0]
 80033dc:	e7ed      	b.n	80033ba <_free_r+0x1e>
 80033de:	461a      	mov	r2, r3
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	b10b      	cbz	r3, 80033e8 <_free_r+0x4c>
 80033e4:	42a3      	cmp	r3, r4
 80033e6:	d9fa      	bls.n	80033de <_free_r+0x42>
 80033e8:	6811      	ldr	r1, [r2, #0]
 80033ea:	1850      	adds	r0, r2, r1
 80033ec:	42a0      	cmp	r0, r4
 80033ee:	d10b      	bne.n	8003408 <_free_r+0x6c>
 80033f0:	6820      	ldr	r0, [r4, #0]
 80033f2:	4401      	add	r1, r0
 80033f4:	1850      	adds	r0, r2, r1
 80033f6:	4283      	cmp	r3, r0
 80033f8:	6011      	str	r1, [r2, #0]
 80033fa:	d1e0      	bne.n	80033be <_free_r+0x22>
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4401      	add	r1, r0
 8003402:	6011      	str	r1, [r2, #0]
 8003404:	6053      	str	r3, [r2, #4]
 8003406:	e7da      	b.n	80033be <_free_r+0x22>
 8003408:	d902      	bls.n	8003410 <_free_r+0x74>
 800340a:	230c      	movs	r3, #12
 800340c:	602b      	str	r3, [r5, #0]
 800340e:	e7d6      	b.n	80033be <_free_r+0x22>
 8003410:	6820      	ldr	r0, [r4, #0]
 8003412:	1821      	adds	r1, r4, r0
 8003414:	428b      	cmp	r3, r1
 8003416:	bf01      	itttt	eq
 8003418:	6819      	ldreq	r1, [r3, #0]
 800341a:	685b      	ldreq	r3, [r3, #4]
 800341c:	1809      	addeq	r1, r1, r0
 800341e:	6021      	streq	r1, [r4, #0]
 8003420:	6063      	str	r3, [r4, #4]
 8003422:	6054      	str	r4, [r2, #4]
 8003424:	e7cb      	b.n	80033be <_free_r+0x22>
 8003426:	bd38      	pop	{r3, r4, r5, pc}
 8003428:	200001bc 	.word	0x200001bc

0800342c <sbrk_aligned>:
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	4e0e      	ldr	r6, [pc, #56]	; (8003468 <sbrk_aligned+0x3c>)
 8003430:	460c      	mov	r4, r1
 8003432:	6831      	ldr	r1, [r6, #0]
 8003434:	4605      	mov	r5, r0
 8003436:	b911      	cbnz	r1, 800343e <sbrk_aligned+0x12>
 8003438:	f000 f88c 	bl	8003554 <_sbrk_r>
 800343c:	6030      	str	r0, [r6, #0]
 800343e:	4621      	mov	r1, r4
 8003440:	4628      	mov	r0, r5
 8003442:	f000 f887 	bl	8003554 <_sbrk_r>
 8003446:	1c43      	adds	r3, r0, #1
 8003448:	d00a      	beq.n	8003460 <sbrk_aligned+0x34>
 800344a:	1cc4      	adds	r4, r0, #3
 800344c:	f024 0403 	bic.w	r4, r4, #3
 8003450:	42a0      	cmp	r0, r4
 8003452:	d007      	beq.n	8003464 <sbrk_aligned+0x38>
 8003454:	1a21      	subs	r1, r4, r0
 8003456:	4628      	mov	r0, r5
 8003458:	f000 f87c 	bl	8003554 <_sbrk_r>
 800345c:	3001      	adds	r0, #1
 800345e:	d101      	bne.n	8003464 <sbrk_aligned+0x38>
 8003460:	f04f 34ff 	mov.w	r4, #4294967295
 8003464:	4620      	mov	r0, r4
 8003466:	bd70      	pop	{r4, r5, r6, pc}
 8003468:	200001c0 	.word	0x200001c0

0800346c <_malloc_r>:
 800346c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003470:	1ccd      	adds	r5, r1, #3
 8003472:	f025 0503 	bic.w	r5, r5, #3
 8003476:	3508      	adds	r5, #8
 8003478:	2d0c      	cmp	r5, #12
 800347a:	bf38      	it	cc
 800347c:	250c      	movcc	r5, #12
 800347e:	2d00      	cmp	r5, #0
 8003480:	4607      	mov	r7, r0
 8003482:	db01      	blt.n	8003488 <_malloc_r+0x1c>
 8003484:	42a9      	cmp	r1, r5
 8003486:	d905      	bls.n	8003494 <_malloc_r+0x28>
 8003488:	230c      	movs	r3, #12
 800348a:	2600      	movs	r6, #0
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	4630      	mov	r0, r6
 8003490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003494:	4e2e      	ldr	r6, [pc, #184]	; (8003550 <_malloc_r+0xe4>)
 8003496:	f000 f88d 	bl	80035b4 <__malloc_lock>
 800349a:	6833      	ldr	r3, [r6, #0]
 800349c:	461c      	mov	r4, r3
 800349e:	bb34      	cbnz	r4, 80034ee <_malloc_r+0x82>
 80034a0:	4629      	mov	r1, r5
 80034a2:	4638      	mov	r0, r7
 80034a4:	f7ff ffc2 	bl	800342c <sbrk_aligned>
 80034a8:	1c43      	adds	r3, r0, #1
 80034aa:	4604      	mov	r4, r0
 80034ac:	d14d      	bne.n	800354a <_malloc_r+0xde>
 80034ae:	6834      	ldr	r4, [r6, #0]
 80034b0:	4626      	mov	r6, r4
 80034b2:	2e00      	cmp	r6, #0
 80034b4:	d140      	bne.n	8003538 <_malloc_r+0xcc>
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	4631      	mov	r1, r6
 80034ba:	4638      	mov	r0, r7
 80034bc:	eb04 0803 	add.w	r8, r4, r3
 80034c0:	f000 f848 	bl	8003554 <_sbrk_r>
 80034c4:	4580      	cmp	r8, r0
 80034c6:	d13a      	bne.n	800353e <_malloc_r+0xd2>
 80034c8:	6821      	ldr	r1, [r4, #0]
 80034ca:	3503      	adds	r5, #3
 80034cc:	1a6d      	subs	r5, r5, r1
 80034ce:	f025 0503 	bic.w	r5, r5, #3
 80034d2:	3508      	adds	r5, #8
 80034d4:	2d0c      	cmp	r5, #12
 80034d6:	bf38      	it	cc
 80034d8:	250c      	movcc	r5, #12
 80034da:	4638      	mov	r0, r7
 80034dc:	4629      	mov	r1, r5
 80034de:	f7ff ffa5 	bl	800342c <sbrk_aligned>
 80034e2:	3001      	adds	r0, #1
 80034e4:	d02b      	beq.n	800353e <_malloc_r+0xd2>
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	442b      	add	r3, r5
 80034ea:	6023      	str	r3, [r4, #0]
 80034ec:	e00e      	b.n	800350c <_malloc_r+0xa0>
 80034ee:	6822      	ldr	r2, [r4, #0]
 80034f0:	1b52      	subs	r2, r2, r5
 80034f2:	d41e      	bmi.n	8003532 <_malloc_r+0xc6>
 80034f4:	2a0b      	cmp	r2, #11
 80034f6:	d916      	bls.n	8003526 <_malloc_r+0xba>
 80034f8:	1961      	adds	r1, r4, r5
 80034fa:	42a3      	cmp	r3, r4
 80034fc:	6025      	str	r5, [r4, #0]
 80034fe:	bf18      	it	ne
 8003500:	6059      	strne	r1, [r3, #4]
 8003502:	6863      	ldr	r3, [r4, #4]
 8003504:	bf08      	it	eq
 8003506:	6031      	streq	r1, [r6, #0]
 8003508:	5162      	str	r2, [r4, r5]
 800350a:	604b      	str	r3, [r1, #4]
 800350c:	4638      	mov	r0, r7
 800350e:	f104 060b 	add.w	r6, r4, #11
 8003512:	f000 f855 	bl	80035c0 <__malloc_unlock>
 8003516:	f026 0607 	bic.w	r6, r6, #7
 800351a:	1d23      	adds	r3, r4, #4
 800351c:	1af2      	subs	r2, r6, r3
 800351e:	d0b6      	beq.n	800348e <_malloc_r+0x22>
 8003520:	1b9b      	subs	r3, r3, r6
 8003522:	50a3      	str	r3, [r4, r2]
 8003524:	e7b3      	b.n	800348e <_malloc_r+0x22>
 8003526:	6862      	ldr	r2, [r4, #4]
 8003528:	42a3      	cmp	r3, r4
 800352a:	bf0c      	ite	eq
 800352c:	6032      	streq	r2, [r6, #0]
 800352e:	605a      	strne	r2, [r3, #4]
 8003530:	e7ec      	b.n	800350c <_malloc_r+0xa0>
 8003532:	4623      	mov	r3, r4
 8003534:	6864      	ldr	r4, [r4, #4]
 8003536:	e7b2      	b.n	800349e <_malloc_r+0x32>
 8003538:	4634      	mov	r4, r6
 800353a:	6876      	ldr	r6, [r6, #4]
 800353c:	e7b9      	b.n	80034b2 <_malloc_r+0x46>
 800353e:	230c      	movs	r3, #12
 8003540:	4638      	mov	r0, r7
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	f000 f83c 	bl	80035c0 <__malloc_unlock>
 8003548:	e7a1      	b.n	800348e <_malloc_r+0x22>
 800354a:	6025      	str	r5, [r4, #0]
 800354c:	e7de      	b.n	800350c <_malloc_r+0xa0>
 800354e:	bf00      	nop
 8003550:	200001bc 	.word	0x200001bc

08003554 <_sbrk_r>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	2300      	movs	r3, #0
 8003558:	4d05      	ldr	r5, [pc, #20]	; (8003570 <_sbrk_r+0x1c>)
 800355a:	4604      	mov	r4, r0
 800355c:	4608      	mov	r0, r1
 800355e:	602b      	str	r3, [r5, #0]
 8003560:	f7fd fc76 	bl	8000e50 <_sbrk>
 8003564:	1c43      	adds	r3, r0, #1
 8003566:	d102      	bne.n	800356e <_sbrk_r+0x1a>
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	b103      	cbz	r3, 800356e <_sbrk_r+0x1a>
 800356c:	6023      	str	r3, [r4, #0]
 800356e:	bd38      	pop	{r3, r4, r5, pc}
 8003570:	200001c4 	.word	0x200001c4

08003574 <siprintf>:
 8003574:	b40e      	push	{r1, r2, r3}
 8003576:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800357a:	b500      	push	{lr}
 800357c:	b09c      	sub	sp, #112	; 0x70
 800357e:	ab1d      	add	r3, sp, #116	; 0x74
 8003580:	9002      	str	r0, [sp, #8]
 8003582:	9006      	str	r0, [sp, #24]
 8003584:	9107      	str	r1, [sp, #28]
 8003586:	9104      	str	r1, [sp, #16]
 8003588:	4808      	ldr	r0, [pc, #32]	; (80035ac <siprintf+0x38>)
 800358a:	4909      	ldr	r1, [pc, #36]	; (80035b0 <siprintf+0x3c>)
 800358c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003590:	9105      	str	r1, [sp, #20]
 8003592:	6800      	ldr	r0, [r0, #0]
 8003594:	a902      	add	r1, sp, #8
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	f000 f874 	bl	8003684 <_svfiprintf_r>
 800359c:	2200      	movs	r2, #0
 800359e:	9b02      	ldr	r3, [sp, #8]
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	b01c      	add	sp, #112	; 0x70
 80035a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80035a8:	b003      	add	sp, #12
 80035aa:	4770      	bx	lr
 80035ac:	2000001c 	.word	0x2000001c
 80035b0:	ffff0208 	.word	0xffff0208

080035b4 <__malloc_lock>:
 80035b4:	4801      	ldr	r0, [pc, #4]	; (80035bc <__malloc_lock+0x8>)
 80035b6:	f000 bafb 	b.w	8003bb0 <__retarget_lock_acquire_recursive>
 80035ba:	bf00      	nop
 80035bc:	200001c8 	.word	0x200001c8

080035c0 <__malloc_unlock>:
 80035c0:	4801      	ldr	r0, [pc, #4]	; (80035c8 <__malloc_unlock+0x8>)
 80035c2:	f000 baf6 	b.w	8003bb2 <__retarget_lock_release_recursive>
 80035c6:	bf00      	nop
 80035c8:	200001c8 	.word	0x200001c8

080035cc <__ssputs_r>:
 80035cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d0:	688e      	ldr	r6, [r1, #8]
 80035d2:	4682      	mov	sl, r0
 80035d4:	429e      	cmp	r6, r3
 80035d6:	460c      	mov	r4, r1
 80035d8:	4690      	mov	r8, r2
 80035da:	461f      	mov	r7, r3
 80035dc:	d838      	bhi.n	8003650 <__ssputs_r+0x84>
 80035de:	898a      	ldrh	r2, [r1, #12]
 80035e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035e4:	d032      	beq.n	800364c <__ssputs_r+0x80>
 80035e6:	6825      	ldr	r5, [r4, #0]
 80035e8:	6909      	ldr	r1, [r1, #16]
 80035ea:	3301      	adds	r3, #1
 80035ec:	eba5 0901 	sub.w	r9, r5, r1
 80035f0:	6965      	ldr	r5, [r4, #20]
 80035f2:	444b      	add	r3, r9
 80035f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035fc:	106d      	asrs	r5, r5, #1
 80035fe:	429d      	cmp	r5, r3
 8003600:	bf38      	it	cc
 8003602:	461d      	movcc	r5, r3
 8003604:	0553      	lsls	r3, r2, #21
 8003606:	d531      	bpl.n	800366c <__ssputs_r+0xa0>
 8003608:	4629      	mov	r1, r5
 800360a:	f7ff ff2f 	bl	800346c <_malloc_r>
 800360e:	4606      	mov	r6, r0
 8003610:	b950      	cbnz	r0, 8003628 <__ssputs_r+0x5c>
 8003612:	230c      	movs	r3, #12
 8003614:	f04f 30ff 	mov.w	r0, #4294967295
 8003618:	f8ca 3000 	str.w	r3, [sl]
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003622:	81a3      	strh	r3, [r4, #12]
 8003624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003628:	464a      	mov	r2, r9
 800362a:	6921      	ldr	r1, [r4, #16]
 800362c:	f000 fad0 	bl	8003bd0 <memcpy>
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800363a:	81a3      	strh	r3, [r4, #12]
 800363c:	6126      	str	r6, [r4, #16]
 800363e:	444e      	add	r6, r9
 8003640:	6026      	str	r6, [r4, #0]
 8003642:	463e      	mov	r6, r7
 8003644:	6165      	str	r5, [r4, #20]
 8003646:	eba5 0509 	sub.w	r5, r5, r9
 800364a:	60a5      	str	r5, [r4, #8]
 800364c:	42be      	cmp	r6, r7
 800364e:	d900      	bls.n	8003652 <__ssputs_r+0x86>
 8003650:	463e      	mov	r6, r7
 8003652:	4632      	mov	r2, r6
 8003654:	4641      	mov	r1, r8
 8003656:	6820      	ldr	r0, [r4, #0]
 8003658:	f000 fac8 	bl	8003bec <memmove>
 800365c:	68a3      	ldr	r3, [r4, #8]
 800365e:	2000      	movs	r0, #0
 8003660:	1b9b      	subs	r3, r3, r6
 8003662:	60a3      	str	r3, [r4, #8]
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	4433      	add	r3, r6
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	e7db      	b.n	8003624 <__ssputs_r+0x58>
 800366c:	462a      	mov	r2, r5
 800366e:	f000 fad7 	bl	8003c20 <_realloc_r>
 8003672:	4606      	mov	r6, r0
 8003674:	2800      	cmp	r0, #0
 8003676:	d1e1      	bne.n	800363c <__ssputs_r+0x70>
 8003678:	4650      	mov	r0, sl
 800367a:	6921      	ldr	r1, [r4, #16]
 800367c:	f7ff fe8e 	bl	800339c <_free_r>
 8003680:	e7c7      	b.n	8003612 <__ssputs_r+0x46>
	...

08003684 <_svfiprintf_r>:
 8003684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003688:	4698      	mov	r8, r3
 800368a:	898b      	ldrh	r3, [r1, #12]
 800368c:	4607      	mov	r7, r0
 800368e:	061b      	lsls	r3, r3, #24
 8003690:	460d      	mov	r5, r1
 8003692:	4614      	mov	r4, r2
 8003694:	b09d      	sub	sp, #116	; 0x74
 8003696:	d50e      	bpl.n	80036b6 <_svfiprintf_r+0x32>
 8003698:	690b      	ldr	r3, [r1, #16]
 800369a:	b963      	cbnz	r3, 80036b6 <_svfiprintf_r+0x32>
 800369c:	2140      	movs	r1, #64	; 0x40
 800369e:	f7ff fee5 	bl	800346c <_malloc_r>
 80036a2:	6028      	str	r0, [r5, #0]
 80036a4:	6128      	str	r0, [r5, #16]
 80036a6:	b920      	cbnz	r0, 80036b2 <_svfiprintf_r+0x2e>
 80036a8:	230c      	movs	r3, #12
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295
 80036b0:	e0d1      	b.n	8003856 <_svfiprintf_r+0x1d2>
 80036b2:	2340      	movs	r3, #64	; 0x40
 80036b4:	616b      	str	r3, [r5, #20]
 80036b6:	2300      	movs	r3, #0
 80036b8:	9309      	str	r3, [sp, #36]	; 0x24
 80036ba:	2320      	movs	r3, #32
 80036bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036c0:	2330      	movs	r3, #48	; 0x30
 80036c2:	f04f 0901 	mov.w	r9, #1
 80036c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80036ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003870 <_svfiprintf_r+0x1ec>
 80036ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036d2:	4623      	mov	r3, r4
 80036d4:	469a      	mov	sl, r3
 80036d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036da:	b10a      	cbz	r2, 80036e0 <_svfiprintf_r+0x5c>
 80036dc:	2a25      	cmp	r2, #37	; 0x25
 80036de:	d1f9      	bne.n	80036d4 <_svfiprintf_r+0x50>
 80036e0:	ebba 0b04 	subs.w	fp, sl, r4
 80036e4:	d00b      	beq.n	80036fe <_svfiprintf_r+0x7a>
 80036e6:	465b      	mov	r3, fp
 80036e8:	4622      	mov	r2, r4
 80036ea:	4629      	mov	r1, r5
 80036ec:	4638      	mov	r0, r7
 80036ee:	f7ff ff6d 	bl	80035cc <__ssputs_r>
 80036f2:	3001      	adds	r0, #1
 80036f4:	f000 80aa 	beq.w	800384c <_svfiprintf_r+0x1c8>
 80036f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036fa:	445a      	add	r2, fp
 80036fc:	9209      	str	r2, [sp, #36]	; 0x24
 80036fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80a2 	beq.w	800384c <_svfiprintf_r+0x1c8>
 8003708:	2300      	movs	r3, #0
 800370a:	f04f 32ff 	mov.w	r2, #4294967295
 800370e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003712:	f10a 0a01 	add.w	sl, sl, #1
 8003716:	9304      	str	r3, [sp, #16]
 8003718:	9307      	str	r3, [sp, #28]
 800371a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800371e:	931a      	str	r3, [sp, #104]	; 0x68
 8003720:	4654      	mov	r4, sl
 8003722:	2205      	movs	r2, #5
 8003724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003728:	4851      	ldr	r0, [pc, #324]	; (8003870 <_svfiprintf_r+0x1ec>)
 800372a:	f000 fa43 	bl	8003bb4 <memchr>
 800372e:	9a04      	ldr	r2, [sp, #16]
 8003730:	b9d8      	cbnz	r0, 800376a <_svfiprintf_r+0xe6>
 8003732:	06d0      	lsls	r0, r2, #27
 8003734:	bf44      	itt	mi
 8003736:	2320      	movmi	r3, #32
 8003738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800373c:	0711      	lsls	r1, r2, #28
 800373e:	bf44      	itt	mi
 8003740:	232b      	movmi	r3, #43	; 0x2b
 8003742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003746:	f89a 3000 	ldrb.w	r3, [sl]
 800374a:	2b2a      	cmp	r3, #42	; 0x2a
 800374c:	d015      	beq.n	800377a <_svfiprintf_r+0xf6>
 800374e:	4654      	mov	r4, sl
 8003750:	2000      	movs	r0, #0
 8003752:	f04f 0c0a 	mov.w	ip, #10
 8003756:	9a07      	ldr	r2, [sp, #28]
 8003758:	4621      	mov	r1, r4
 800375a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800375e:	3b30      	subs	r3, #48	; 0x30
 8003760:	2b09      	cmp	r3, #9
 8003762:	d94e      	bls.n	8003802 <_svfiprintf_r+0x17e>
 8003764:	b1b0      	cbz	r0, 8003794 <_svfiprintf_r+0x110>
 8003766:	9207      	str	r2, [sp, #28]
 8003768:	e014      	b.n	8003794 <_svfiprintf_r+0x110>
 800376a:	eba0 0308 	sub.w	r3, r0, r8
 800376e:	fa09 f303 	lsl.w	r3, r9, r3
 8003772:	4313      	orrs	r3, r2
 8003774:	46a2      	mov	sl, r4
 8003776:	9304      	str	r3, [sp, #16]
 8003778:	e7d2      	b.n	8003720 <_svfiprintf_r+0x9c>
 800377a:	9b03      	ldr	r3, [sp, #12]
 800377c:	1d19      	adds	r1, r3, #4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	9103      	str	r1, [sp, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	bfbb      	ittet	lt
 8003786:	425b      	neglt	r3, r3
 8003788:	f042 0202 	orrlt.w	r2, r2, #2
 800378c:	9307      	strge	r3, [sp, #28]
 800378e:	9307      	strlt	r3, [sp, #28]
 8003790:	bfb8      	it	lt
 8003792:	9204      	strlt	r2, [sp, #16]
 8003794:	7823      	ldrb	r3, [r4, #0]
 8003796:	2b2e      	cmp	r3, #46	; 0x2e
 8003798:	d10c      	bne.n	80037b4 <_svfiprintf_r+0x130>
 800379a:	7863      	ldrb	r3, [r4, #1]
 800379c:	2b2a      	cmp	r3, #42	; 0x2a
 800379e:	d135      	bne.n	800380c <_svfiprintf_r+0x188>
 80037a0:	9b03      	ldr	r3, [sp, #12]
 80037a2:	3402      	adds	r4, #2
 80037a4:	1d1a      	adds	r2, r3, #4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	9203      	str	r2, [sp, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bfb8      	it	lt
 80037ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80037b2:	9305      	str	r3, [sp, #20]
 80037b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003874 <_svfiprintf_r+0x1f0>
 80037b8:	2203      	movs	r2, #3
 80037ba:	4650      	mov	r0, sl
 80037bc:	7821      	ldrb	r1, [r4, #0]
 80037be:	f000 f9f9 	bl	8003bb4 <memchr>
 80037c2:	b140      	cbz	r0, 80037d6 <_svfiprintf_r+0x152>
 80037c4:	2340      	movs	r3, #64	; 0x40
 80037c6:	eba0 000a 	sub.w	r0, r0, sl
 80037ca:	fa03 f000 	lsl.w	r0, r3, r0
 80037ce:	9b04      	ldr	r3, [sp, #16]
 80037d0:	3401      	adds	r4, #1
 80037d2:	4303      	orrs	r3, r0
 80037d4:	9304      	str	r3, [sp, #16]
 80037d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037da:	2206      	movs	r2, #6
 80037dc:	4826      	ldr	r0, [pc, #152]	; (8003878 <_svfiprintf_r+0x1f4>)
 80037de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037e2:	f000 f9e7 	bl	8003bb4 <memchr>
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d038      	beq.n	800385c <_svfiprintf_r+0x1d8>
 80037ea:	4b24      	ldr	r3, [pc, #144]	; (800387c <_svfiprintf_r+0x1f8>)
 80037ec:	bb1b      	cbnz	r3, 8003836 <_svfiprintf_r+0x1b2>
 80037ee:	9b03      	ldr	r3, [sp, #12]
 80037f0:	3307      	adds	r3, #7
 80037f2:	f023 0307 	bic.w	r3, r3, #7
 80037f6:	3308      	adds	r3, #8
 80037f8:	9303      	str	r3, [sp, #12]
 80037fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037fc:	4433      	add	r3, r6
 80037fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003800:	e767      	b.n	80036d2 <_svfiprintf_r+0x4e>
 8003802:	460c      	mov	r4, r1
 8003804:	2001      	movs	r0, #1
 8003806:	fb0c 3202 	mla	r2, ip, r2, r3
 800380a:	e7a5      	b.n	8003758 <_svfiprintf_r+0xd4>
 800380c:	2300      	movs	r3, #0
 800380e:	f04f 0c0a 	mov.w	ip, #10
 8003812:	4619      	mov	r1, r3
 8003814:	3401      	adds	r4, #1
 8003816:	9305      	str	r3, [sp, #20]
 8003818:	4620      	mov	r0, r4
 800381a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800381e:	3a30      	subs	r2, #48	; 0x30
 8003820:	2a09      	cmp	r2, #9
 8003822:	d903      	bls.n	800382c <_svfiprintf_r+0x1a8>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0c5      	beq.n	80037b4 <_svfiprintf_r+0x130>
 8003828:	9105      	str	r1, [sp, #20]
 800382a:	e7c3      	b.n	80037b4 <_svfiprintf_r+0x130>
 800382c:	4604      	mov	r4, r0
 800382e:	2301      	movs	r3, #1
 8003830:	fb0c 2101 	mla	r1, ip, r1, r2
 8003834:	e7f0      	b.n	8003818 <_svfiprintf_r+0x194>
 8003836:	ab03      	add	r3, sp, #12
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	462a      	mov	r2, r5
 800383c:	4638      	mov	r0, r7
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <_svfiprintf_r+0x1fc>)
 8003840:	a904      	add	r1, sp, #16
 8003842:	f3af 8000 	nop.w
 8003846:	1c42      	adds	r2, r0, #1
 8003848:	4606      	mov	r6, r0
 800384a:	d1d6      	bne.n	80037fa <_svfiprintf_r+0x176>
 800384c:	89ab      	ldrh	r3, [r5, #12]
 800384e:	065b      	lsls	r3, r3, #25
 8003850:	f53f af2c 	bmi.w	80036ac <_svfiprintf_r+0x28>
 8003854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003856:	b01d      	add	sp, #116	; 0x74
 8003858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800385c:	ab03      	add	r3, sp, #12
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	462a      	mov	r2, r5
 8003862:	4638      	mov	r0, r7
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <_svfiprintf_r+0x1fc>)
 8003866:	a904      	add	r1, sp, #16
 8003868:	f000 f87c 	bl	8003964 <_printf_i>
 800386c:	e7eb      	b.n	8003846 <_svfiprintf_r+0x1c2>
 800386e:	bf00      	nop
 8003870:	08003d2e 	.word	0x08003d2e
 8003874:	08003d34 	.word	0x08003d34
 8003878:	08003d38 	.word	0x08003d38
 800387c:	00000000 	.word	0x00000000
 8003880:	080035cd 	.word	0x080035cd

08003884 <_printf_common>:
 8003884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003888:	4616      	mov	r6, r2
 800388a:	4699      	mov	r9, r3
 800388c:	688a      	ldr	r2, [r1, #8]
 800388e:	690b      	ldr	r3, [r1, #16]
 8003890:	4607      	mov	r7, r0
 8003892:	4293      	cmp	r3, r2
 8003894:	bfb8      	it	lt
 8003896:	4613      	movlt	r3, r2
 8003898:	6033      	str	r3, [r6, #0]
 800389a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800389e:	460c      	mov	r4, r1
 80038a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038a4:	b10a      	cbz	r2, 80038aa <_printf_common+0x26>
 80038a6:	3301      	adds	r3, #1
 80038a8:	6033      	str	r3, [r6, #0]
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	0699      	lsls	r1, r3, #26
 80038ae:	bf42      	ittt	mi
 80038b0:	6833      	ldrmi	r3, [r6, #0]
 80038b2:	3302      	addmi	r3, #2
 80038b4:	6033      	strmi	r3, [r6, #0]
 80038b6:	6825      	ldr	r5, [r4, #0]
 80038b8:	f015 0506 	ands.w	r5, r5, #6
 80038bc:	d106      	bne.n	80038cc <_printf_common+0x48>
 80038be:	f104 0a19 	add.w	sl, r4, #25
 80038c2:	68e3      	ldr	r3, [r4, #12]
 80038c4:	6832      	ldr	r2, [r6, #0]
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	42ab      	cmp	r3, r5
 80038ca:	dc28      	bgt.n	800391e <_printf_common+0x9a>
 80038cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038d0:	1e13      	subs	r3, r2, #0
 80038d2:	6822      	ldr	r2, [r4, #0]
 80038d4:	bf18      	it	ne
 80038d6:	2301      	movne	r3, #1
 80038d8:	0692      	lsls	r2, r2, #26
 80038da:	d42d      	bmi.n	8003938 <_printf_common+0xb4>
 80038dc:	4649      	mov	r1, r9
 80038de:	4638      	mov	r0, r7
 80038e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038e4:	47c0      	blx	r8
 80038e6:	3001      	adds	r0, #1
 80038e8:	d020      	beq.n	800392c <_printf_common+0xa8>
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	68e5      	ldr	r5, [r4, #12]
 80038ee:	f003 0306 	and.w	r3, r3, #6
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	bf18      	it	ne
 80038f6:	2500      	movne	r5, #0
 80038f8:	6832      	ldr	r2, [r6, #0]
 80038fa:	f04f 0600 	mov.w	r6, #0
 80038fe:	68a3      	ldr	r3, [r4, #8]
 8003900:	bf08      	it	eq
 8003902:	1aad      	subeq	r5, r5, r2
 8003904:	6922      	ldr	r2, [r4, #16]
 8003906:	bf08      	it	eq
 8003908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800390c:	4293      	cmp	r3, r2
 800390e:	bfc4      	itt	gt
 8003910:	1a9b      	subgt	r3, r3, r2
 8003912:	18ed      	addgt	r5, r5, r3
 8003914:	341a      	adds	r4, #26
 8003916:	42b5      	cmp	r5, r6
 8003918:	d11a      	bne.n	8003950 <_printf_common+0xcc>
 800391a:	2000      	movs	r0, #0
 800391c:	e008      	b.n	8003930 <_printf_common+0xac>
 800391e:	2301      	movs	r3, #1
 8003920:	4652      	mov	r2, sl
 8003922:	4649      	mov	r1, r9
 8003924:	4638      	mov	r0, r7
 8003926:	47c0      	blx	r8
 8003928:	3001      	adds	r0, #1
 800392a:	d103      	bne.n	8003934 <_printf_common+0xb0>
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003934:	3501      	adds	r5, #1
 8003936:	e7c4      	b.n	80038c2 <_printf_common+0x3e>
 8003938:	2030      	movs	r0, #48	; 0x30
 800393a:	18e1      	adds	r1, r4, r3
 800393c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003946:	4422      	add	r2, r4
 8003948:	3302      	adds	r3, #2
 800394a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800394e:	e7c5      	b.n	80038dc <_printf_common+0x58>
 8003950:	2301      	movs	r3, #1
 8003952:	4622      	mov	r2, r4
 8003954:	4649      	mov	r1, r9
 8003956:	4638      	mov	r0, r7
 8003958:	47c0      	blx	r8
 800395a:	3001      	adds	r0, #1
 800395c:	d0e6      	beq.n	800392c <_printf_common+0xa8>
 800395e:	3601      	adds	r6, #1
 8003960:	e7d9      	b.n	8003916 <_printf_common+0x92>
	...

08003964 <_printf_i>:
 8003964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003968:	7e0f      	ldrb	r7, [r1, #24]
 800396a:	4691      	mov	r9, r2
 800396c:	2f78      	cmp	r7, #120	; 0x78
 800396e:	4680      	mov	r8, r0
 8003970:	460c      	mov	r4, r1
 8003972:	469a      	mov	sl, r3
 8003974:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800397a:	d807      	bhi.n	800398c <_printf_i+0x28>
 800397c:	2f62      	cmp	r7, #98	; 0x62
 800397e:	d80a      	bhi.n	8003996 <_printf_i+0x32>
 8003980:	2f00      	cmp	r7, #0
 8003982:	f000 80d9 	beq.w	8003b38 <_printf_i+0x1d4>
 8003986:	2f58      	cmp	r7, #88	; 0x58
 8003988:	f000 80a4 	beq.w	8003ad4 <_printf_i+0x170>
 800398c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003994:	e03a      	b.n	8003a0c <_printf_i+0xa8>
 8003996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800399a:	2b15      	cmp	r3, #21
 800399c:	d8f6      	bhi.n	800398c <_printf_i+0x28>
 800399e:	a101      	add	r1, pc, #4	; (adr r1, 80039a4 <_printf_i+0x40>)
 80039a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039a4:	080039fd 	.word	0x080039fd
 80039a8:	08003a11 	.word	0x08003a11
 80039ac:	0800398d 	.word	0x0800398d
 80039b0:	0800398d 	.word	0x0800398d
 80039b4:	0800398d 	.word	0x0800398d
 80039b8:	0800398d 	.word	0x0800398d
 80039bc:	08003a11 	.word	0x08003a11
 80039c0:	0800398d 	.word	0x0800398d
 80039c4:	0800398d 	.word	0x0800398d
 80039c8:	0800398d 	.word	0x0800398d
 80039cc:	0800398d 	.word	0x0800398d
 80039d0:	08003b1f 	.word	0x08003b1f
 80039d4:	08003a41 	.word	0x08003a41
 80039d8:	08003b01 	.word	0x08003b01
 80039dc:	0800398d 	.word	0x0800398d
 80039e0:	0800398d 	.word	0x0800398d
 80039e4:	08003b41 	.word	0x08003b41
 80039e8:	0800398d 	.word	0x0800398d
 80039ec:	08003a41 	.word	0x08003a41
 80039f0:	0800398d 	.word	0x0800398d
 80039f4:	0800398d 	.word	0x0800398d
 80039f8:	08003b09 	.word	0x08003b09
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	1d1a      	adds	r2, r3, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	602a      	str	r2, [r5, #0]
 8003a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0a4      	b.n	8003b5a <_printf_i+0x1f6>
 8003a10:	6820      	ldr	r0, [r4, #0]
 8003a12:	6829      	ldr	r1, [r5, #0]
 8003a14:	0606      	lsls	r6, r0, #24
 8003a16:	f101 0304 	add.w	r3, r1, #4
 8003a1a:	d50a      	bpl.n	8003a32 <_printf_i+0xce>
 8003a1c:	680e      	ldr	r6, [r1, #0]
 8003a1e:	602b      	str	r3, [r5, #0]
 8003a20:	2e00      	cmp	r6, #0
 8003a22:	da03      	bge.n	8003a2c <_printf_i+0xc8>
 8003a24:	232d      	movs	r3, #45	; 0x2d
 8003a26:	4276      	negs	r6, r6
 8003a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a2c:	230a      	movs	r3, #10
 8003a2e:	485e      	ldr	r0, [pc, #376]	; (8003ba8 <_printf_i+0x244>)
 8003a30:	e019      	b.n	8003a66 <_printf_i+0x102>
 8003a32:	680e      	ldr	r6, [r1, #0]
 8003a34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a38:	602b      	str	r3, [r5, #0]
 8003a3a:	bf18      	it	ne
 8003a3c:	b236      	sxthne	r6, r6
 8003a3e:	e7ef      	b.n	8003a20 <_printf_i+0xbc>
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	6820      	ldr	r0, [r4, #0]
 8003a44:	1d19      	adds	r1, r3, #4
 8003a46:	6029      	str	r1, [r5, #0]
 8003a48:	0601      	lsls	r1, r0, #24
 8003a4a:	d501      	bpl.n	8003a50 <_printf_i+0xec>
 8003a4c:	681e      	ldr	r6, [r3, #0]
 8003a4e:	e002      	b.n	8003a56 <_printf_i+0xf2>
 8003a50:	0646      	lsls	r6, r0, #25
 8003a52:	d5fb      	bpl.n	8003a4c <_printf_i+0xe8>
 8003a54:	881e      	ldrh	r6, [r3, #0]
 8003a56:	2f6f      	cmp	r7, #111	; 0x6f
 8003a58:	bf0c      	ite	eq
 8003a5a:	2308      	moveq	r3, #8
 8003a5c:	230a      	movne	r3, #10
 8003a5e:	4852      	ldr	r0, [pc, #328]	; (8003ba8 <_printf_i+0x244>)
 8003a60:	2100      	movs	r1, #0
 8003a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a66:	6865      	ldr	r5, [r4, #4]
 8003a68:	2d00      	cmp	r5, #0
 8003a6a:	bfa8      	it	ge
 8003a6c:	6821      	ldrge	r1, [r4, #0]
 8003a6e:	60a5      	str	r5, [r4, #8]
 8003a70:	bfa4      	itt	ge
 8003a72:	f021 0104 	bicge.w	r1, r1, #4
 8003a76:	6021      	strge	r1, [r4, #0]
 8003a78:	b90e      	cbnz	r6, 8003a7e <_printf_i+0x11a>
 8003a7a:	2d00      	cmp	r5, #0
 8003a7c:	d04d      	beq.n	8003b1a <_printf_i+0x1b6>
 8003a7e:	4615      	mov	r5, r2
 8003a80:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a84:	fb03 6711 	mls	r7, r3, r1, r6
 8003a88:	5dc7      	ldrb	r7, [r0, r7]
 8003a8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a8e:	4637      	mov	r7, r6
 8003a90:	42bb      	cmp	r3, r7
 8003a92:	460e      	mov	r6, r1
 8003a94:	d9f4      	bls.n	8003a80 <_printf_i+0x11c>
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d10b      	bne.n	8003ab2 <_printf_i+0x14e>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	07de      	lsls	r6, r3, #31
 8003a9e:	d508      	bpl.n	8003ab2 <_printf_i+0x14e>
 8003aa0:	6923      	ldr	r3, [r4, #16]
 8003aa2:	6861      	ldr	r1, [r4, #4]
 8003aa4:	4299      	cmp	r1, r3
 8003aa6:	bfde      	ittt	le
 8003aa8:	2330      	movle	r3, #48	; 0x30
 8003aaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003aae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ab2:	1b52      	subs	r2, r2, r5
 8003ab4:	6122      	str	r2, [r4, #16]
 8003ab6:	464b      	mov	r3, r9
 8003ab8:	4621      	mov	r1, r4
 8003aba:	4640      	mov	r0, r8
 8003abc:	f8cd a000 	str.w	sl, [sp]
 8003ac0:	aa03      	add	r2, sp, #12
 8003ac2:	f7ff fedf 	bl	8003884 <_printf_common>
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	d14c      	bne.n	8003b64 <_printf_i+0x200>
 8003aca:	f04f 30ff 	mov.w	r0, #4294967295
 8003ace:	b004      	add	sp, #16
 8003ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad4:	4834      	ldr	r0, [pc, #208]	; (8003ba8 <_printf_i+0x244>)
 8003ad6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ada:	6829      	ldr	r1, [r5, #0]
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ae2:	6029      	str	r1, [r5, #0]
 8003ae4:	061d      	lsls	r5, r3, #24
 8003ae6:	d514      	bpl.n	8003b12 <_printf_i+0x1ae>
 8003ae8:	07df      	lsls	r7, r3, #31
 8003aea:	bf44      	itt	mi
 8003aec:	f043 0320 	orrmi.w	r3, r3, #32
 8003af0:	6023      	strmi	r3, [r4, #0]
 8003af2:	b91e      	cbnz	r6, 8003afc <_printf_i+0x198>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	f023 0320 	bic.w	r3, r3, #32
 8003afa:	6023      	str	r3, [r4, #0]
 8003afc:	2310      	movs	r3, #16
 8003afe:	e7af      	b.n	8003a60 <_printf_i+0xfc>
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	f043 0320 	orr.w	r3, r3, #32
 8003b06:	6023      	str	r3, [r4, #0]
 8003b08:	2378      	movs	r3, #120	; 0x78
 8003b0a:	4828      	ldr	r0, [pc, #160]	; (8003bac <_printf_i+0x248>)
 8003b0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b10:	e7e3      	b.n	8003ada <_printf_i+0x176>
 8003b12:	0659      	lsls	r1, r3, #25
 8003b14:	bf48      	it	mi
 8003b16:	b2b6      	uxthmi	r6, r6
 8003b18:	e7e6      	b.n	8003ae8 <_printf_i+0x184>
 8003b1a:	4615      	mov	r5, r2
 8003b1c:	e7bb      	b.n	8003a96 <_printf_i+0x132>
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	6826      	ldr	r6, [r4, #0]
 8003b22:	1d18      	adds	r0, r3, #4
 8003b24:	6961      	ldr	r1, [r4, #20]
 8003b26:	6028      	str	r0, [r5, #0]
 8003b28:	0635      	lsls	r5, r6, #24
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	d501      	bpl.n	8003b32 <_printf_i+0x1ce>
 8003b2e:	6019      	str	r1, [r3, #0]
 8003b30:	e002      	b.n	8003b38 <_printf_i+0x1d4>
 8003b32:	0670      	lsls	r0, r6, #25
 8003b34:	d5fb      	bpl.n	8003b2e <_printf_i+0x1ca>
 8003b36:	8019      	strh	r1, [r3, #0]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	4615      	mov	r5, r2
 8003b3c:	6123      	str	r3, [r4, #16]
 8003b3e:	e7ba      	b.n	8003ab6 <_printf_i+0x152>
 8003b40:	682b      	ldr	r3, [r5, #0]
 8003b42:	2100      	movs	r1, #0
 8003b44:	1d1a      	adds	r2, r3, #4
 8003b46:	602a      	str	r2, [r5, #0]
 8003b48:	681d      	ldr	r5, [r3, #0]
 8003b4a:	6862      	ldr	r2, [r4, #4]
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	f000 f831 	bl	8003bb4 <memchr>
 8003b52:	b108      	cbz	r0, 8003b58 <_printf_i+0x1f4>
 8003b54:	1b40      	subs	r0, r0, r5
 8003b56:	6060      	str	r0, [r4, #4]
 8003b58:	6863      	ldr	r3, [r4, #4]
 8003b5a:	6123      	str	r3, [r4, #16]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b62:	e7a8      	b.n	8003ab6 <_printf_i+0x152>
 8003b64:	462a      	mov	r2, r5
 8003b66:	4649      	mov	r1, r9
 8003b68:	4640      	mov	r0, r8
 8003b6a:	6923      	ldr	r3, [r4, #16]
 8003b6c:	47d0      	blx	sl
 8003b6e:	3001      	adds	r0, #1
 8003b70:	d0ab      	beq.n	8003aca <_printf_i+0x166>
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	079b      	lsls	r3, r3, #30
 8003b76:	d413      	bmi.n	8003ba0 <_printf_i+0x23c>
 8003b78:	68e0      	ldr	r0, [r4, #12]
 8003b7a:	9b03      	ldr	r3, [sp, #12]
 8003b7c:	4298      	cmp	r0, r3
 8003b7e:	bfb8      	it	lt
 8003b80:	4618      	movlt	r0, r3
 8003b82:	e7a4      	b.n	8003ace <_printf_i+0x16a>
 8003b84:	2301      	movs	r3, #1
 8003b86:	4632      	mov	r2, r6
 8003b88:	4649      	mov	r1, r9
 8003b8a:	4640      	mov	r0, r8
 8003b8c:	47d0      	blx	sl
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d09b      	beq.n	8003aca <_printf_i+0x166>
 8003b92:	3501      	adds	r5, #1
 8003b94:	68e3      	ldr	r3, [r4, #12]
 8003b96:	9903      	ldr	r1, [sp, #12]
 8003b98:	1a5b      	subs	r3, r3, r1
 8003b9a:	42ab      	cmp	r3, r5
 8003b9c:	dcf2      	bgt.n	8003b84 <_printf_i+0x220>
 8003b9e:	e7eb      	b.n	8003b78 <_printf_i+0x214>
 8003ba0:	2500      	movs	r5, #0
 8003ba2:	f104 0619 	add.w	r6, r4, #25
 8003ba6:	e7f5      	b.n	8003b94 <_printf_i+0x230>
 8003ba8:	08003d3f 	.word	0x08003d3f
 8003bac:	08003d50 	.word	0x08003d50

08003bb0 <__retarget_lock_acquire_recursive>:
 8003bb0:	4770      	bx	lr

08003bb2 <__retarget_lock_release_recursive>:
 8003bb2:	4770      	bx	lr

08003bb4 <memchr>:
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	b510      	push	{r4, lr}
 8003bb8:	b2c9      	uxtb	r1, r1
 8003bba:	4402      	add	r2, r0
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	d101      	bne.n	8003bc6 <memchr+0x12>
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	e003      	b.n	8003bce <memchr+0x1a>
 8003bc6:	7804      	ldrb	r4, [r0, #0]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	428c      	cmp	r4, r1
 8003bcc:	d1f6      	bne.n	8003bbc <memchr+0x8>
 8003bce:	bd10      	pop	{r4, pc}

08003bd0 <memcpy>:
 8003bd0:	440a      	add	r2, r1
 8003bd2:	4291      	cmp	r1, r2
 8003bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bd8:	d100      	bne.n	8003bdc <memcpy+0xc>
 8003bda:	4770      	bx	lr
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003be2:	4291      	cmp	r1, r2
 8003be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003be8:	d1f9      	bne.n	8003bde <memcpy+0xe>
 8003bea:	bd10      	pop	{r4, pc}

08003bec <memmove>:
 8003bec:	4288      	cmp	r0, r1
 8003bee:	b510      	push	{r4, lr}
 8003bf0:	eb01 0402 	add.w	r4, r1, r2
 8003bf4:	d902      	bls.n	8003bfc <memmove+0x10>
 8003bf6:	4284      	cmp	r4, r0
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	d807      	bhi.n	8003c0c <memmove+0x20>
 8003bfc:	1e43      	subs	r3, r0, #1
 8003bfe:	42a1      	cmp	r1, r4
 8003c00:	d008      	beq.n	8003c14 <memmove+0x28>
 8003c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c0a:	e7f8      	b.n	8003bfe <memmove+0x12>
 8003c0c:	4601      	mov	r1, r0
 8003c0e:	4402      	add	r2, r0
 8003c10:	428a      	cmp	r2, r1
 8003c12:	d100      	bne.n	8003c16 <memmove+0x2a>
 8003c14:	bd10      	pop	{r4, pc}
 8003c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c1e:	e7f7      	b.n	8003c10 <memmove+0x24>

08003c20 <_realloc_r>:
 8003c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c24:	4680      	mov	r8, r0
 8003c26:	4614      	mov	r4, r2
 8003c28:	460e      	mov	r6, r1
 8003c2a:	b921      	cbnz	r1, 8003c36 <_realloc_r+0x16>
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c32:	f7ff bc1b 	b.w	800346c <_malloc_r>
 8003c36:	b92a      	cbnz	r2, 8003c44 <_realloc_r+0x24>
 8003c38:	f7ff fbb0 	bl	800339c <_free_r>
 8003c3c:	4625      	mov	r5, r4
 8003c3e:	4628      	mov	r0, r5
 8003c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c44:	f000 f81b 	bl	8003c7e <_malloc_usable_size_r>
 8003c48:	4284      	cmp	r4, r0
 8003c4a:	4607      	mov	r7, r0
 8003c4c:	d802      	bhi.n	8003c54 <_realloc_r+0x34>
 8003c4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c52:	d812      	bhi.n	8003c7a <_realloc_r+0x5a>
 8003c54:	4621      	mov	r1, r4
 8003c56:	4640      	mov	r0, r8
 8003c58:	f7ff fc08 	bl	800346c <_malloc_r>
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d0ed      	beq.n	8003c3e <_realloc_r+0x1e>
 8003c62:	42bc      	cmp	r4, r7
 8003c64:	4622      	mov	r2, r4
 8003c66:	4631      	mov	r1, r6
 8003c68:	bf28      	it	cs
 8003c6a:	463a      	movcs	r2, r7
 8003c6c:	f7ff ffb0 	bl	8003bd0 <memcpy>
 8003c70:	4631      	mov	r1, r6
 8003c72:	4640      	mov	r0, r8
 8003c74:	f7ff fb92 	bl	800339c <_free_r>
 8003c78:	e7e1      	b.n	8003c3e <_realloc_r+0x1e>
 8003c7a:	4635      	mov	r5, r6
 8003c7c:	e7df      	b.n	8003c3e <_realloc_r+0x1e>

08003c7e <_malloc_usable_size_r>:
 8003c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c82:	1f18      	subs	r0, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bfbc      	itt	lt
 8003c88:	580b      	ldrlt	r3, [r1, r0]
 8003c8a:	18c0      	addlt	r0, r0, r3
 8003c8c:	4770      	bx	lr
	...

08003c90 <_init>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr

08003c9c <_fini>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	bf00      	nop
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr
