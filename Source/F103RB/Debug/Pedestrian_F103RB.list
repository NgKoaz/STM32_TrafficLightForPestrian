
Pedestrian_F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004538  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004644  08004644  00014644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004734  08004734  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004734  08004734  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004734  08004734  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004734  08004734  00014734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004738  08004738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800473c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000090  080047cc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  080047cc  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010738  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f7  00000000  00000000  000307f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00032ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00033d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e54  00000000  00000000  00034c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013405  00000000  00000000  0004da8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008daa1  00000000  00000000  00060e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004754  00000000  00000000  000ee984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	0800462c 	.word	0x0800462c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	0800462c 	.word	0x0800462c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f023 030f 	bic.w	r3, r3, #15
 800016c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	011b      	lsls	r3, r3, #4
 8000172:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	f043 030c 	orr.w	r3, r3, #12
 800017a:	b2db      	uxtb	r3, r3
 800017c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800017e:	7bfb      	ldrb	r3, [r7, #15]
 8000180:	f043 0308 	orr.w	r3, r3, #8
 8000184:	b2db      	uxtb	r3, r3
 8000186:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000188:	7bbb      	ldrb	r3, [r7, #14]
 800018a:	f043 030c 	orr.w	r3, r3, #12
 800018e:	b2db      	uxtb	r3, r3
 8000190:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000192:	7bbb      	ldrb	r3, [r7, #14]
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	b2db      	uxtb	r3, r3
 800019a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800019c:	f107 0208 	add.w	r2, r7, #8
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	9300      	str	r3, [sp, #0]
 80001a4:	2304      	movs	r3, #4
 80001a6:	214e      	movs	r1, #78	; 0x4e
 80001a8:	4803      	ldr	r0, [pc, #12]	; (80001b8 <lcd_send_cmd+0x5c>)
 80001aa:	f002 f84d 	bl	8002248 <HAL_I2C_Master_Transmit>
}
 80001ae:	bf00      	nop
 80001b0:	3710      	adds	r7, #16
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	20000138 	.word	0x20000138

080001bc <lcd_send_data>:

void lcd_send_data (char data)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b086      	sub	sp, #24
 80001c0:	af02      	add	r7, sp, #8
 80001c2:	4603      	mov	r3, r0
 80001c4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	f023 030f 	bic.w	r3, r3, #15
 80001cc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	011b      	lsls	r3, r3, #4
 80001d2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	f043 030d 	orr.w	r3, r3, #13
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f043 0309 	orr.w	r3, r3, #9
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001e8:	7bbb      	ldrb	r3, [r7, #14]
 80001ea:	f043 030d 	orr.w	r3, r3, #13
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	f043 0309 	orr.w	r3, r3, #9
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	2364      	movs	r3, #100	; 0x64
 8000202:	9300      	str	r3, [sp, #0]
 8000204:	2304      	movs	r3, #4
 8000206:	214e      	movs	r1, #78	; 0x4e
 8000208:	4803      	ldr	r0, [pc, #12]	; (8000218 <lcd_send_data+0x5c>)
 800020a:	f002 f81d 	bl	8002248 <HAL_I2C_Master_Transmit>
}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000138 	.word	0x20000138

0800021c <lcd_clear>:

void lcd_clear (void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000222:	2080      	movs	r0, #128	; 0x80
 8000224:	f7ff ff9a 	bl	800015c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000228:	2300      	movs	r3, #0
 800022a:	607b      	str	r3, [r7, #4]
 800022c:	e005      	b.n	800023a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800022e:	2020      	movs	r0, #32
 8000230:	f7ff ffc4 	bl	80001bc <lcd_send_data>
	for (int i=0; i<70; i++)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3301      	adds	r3, #1
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2b45      	cmp	r3, #69	; 0x45
 800023e:	ddf6      	ble.n	800022e <lcd_clear+0x12>
	}
}
 8000240:	bf00      	nop
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	b082      	sub	sp, #8
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
 8000252:	6039      	str	r1, [r7, #0]
    switch (row)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d003      	beq.n	8000262 <lcd_put_cur+0x18>
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d005      	beq.n	800026c <lcd_put_cur+0x22>
 8000260:	e009      	b.n	8000276 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000268:	603b      	str	r3, [r7, #0]
            break;
 800026a:	e004      	b.n	8000276 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000272:	603b      	str	r3, [r7, #0]
            break;
 8000274:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	b2db      	uxtb	r3, r3
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff6e 	bl	800015c <lcd_send_cmd>
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <lcd_init>:


void lcd_init (void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800028c:	2032      	movs	r0, #50	; 0x32
 800028e:	f001 fb99 	bl	80019c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000292:	2030      	movs	r0, #48	; 0x30
 8000294:	f7ff ff62 	bl	800015c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000298:	2005      	movs	r0, #5
 800029a:	f001 fb93 	bl	80019c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800029e:	2030      	movs	r0, #48	; 0x30
 80002a0:	f7ff ff5c 	bl	800015c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80002a4:	2001      	movs	r0, #1
 80002a6:	f001 fb8d 	bl	80019c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002aa:	2030      	movs	r0, #48	; 0x30
 80002ac:	f7ff ff56 	bl	800015c <lcd_send_cmd>
	HAL_Delay(10);
 80002b0:	200a      	movs	r0, #10
 80002b2:	f001 fb87 	bl	80019c4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80002b6:	2020      	movs	r0, #32
 80002b8:	f7ff ff50 	bl	800015c <lcd_send_cmd>
	HAL_Delay(10);
 80002bc:	200a      	movs	r0, #10
 80002be:	f001 fb81 	bl	80019c4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80002c2:	2028      	movs	r0, #40	; 0x28
 80002c4:	f7ff ff4a 	bl	800015c <lcd_send_cmd>
	HAL_Delay(1);
 80002c8:	2001      	movs	r0, #1
 80002ca:	f001 fb7b 	bl	80019c4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80002ce:	2008      	movs	r0, #8
 80002d0:	f7ff ff44 	bl	800015c <lcd_send_cmd>
	HAL_Delay(1);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f001 fb75 	bl	80019c4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80002da:	2001      	movs	r0, #1
 80002dc:	f7ff ff3e 	bl	800015c <lcd_send_cmd>
	HAL_Delay(1);
 80002e0:	2001      	movs	r0, #1
 80002e2:	f001 fb6f 	bl	80019c4 <HAL_Delay>
	HAL_Delay(1);
 80002e6:	2001      	movs	r0, #1
 80002e8:	f001 fb6c 	bl	80019c4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80002ec:	2006      	movs	r0, #6
 80002ee:	f7ff ff35 	bl	800015c <lcd_send_cmd>
	HAL_Delay(1);
 80002f2:	2001      	movs	r0, #1
 80002f4:	f001 fb66 	bl	80019c4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80002f8:	200c      	movs	r0, #12
 80002fa:	f7ff ff2f 	bl	800015c <lcd_send_cmd>
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}

08000302 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b082      	sub	sp, #8
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800030a:	e006      	b.n	800031a <lcd_send_string+0x18>
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	1c5a      	adds	r2, r3, #1
 8000310:	607a      	str	r2, [r7, #4]
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff51 	bl	80001bc <lcd_send_data>
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d1f4      	bne.n	800030c <lcd_send_string+0xa>
}
 8000322:	bf00      	nop
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <resetTrafficLight>:
//This counter for modify button after amount of time it increase `adjusting variable`.
int increasing_counter;

short buzzer_counter;

void resetTrafficLight(void){
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	runState = NORMAL_MODE;
 8000330:	4b16      	ldr	r3, [pc, #88]	; (800038c <resetTrafficLight+0x60>)
 8000332:	2201      	movs	r2, #1
 8000334:	701a      	strb	r2, [r3, #0]
	pState = SLEEP;
 8000336:	4b16      	ldr	r3, [pc, #88]	; (8000390 <resetTrafficLight+0x64>)
 8000338:	2200      	movs	r2, #0
 800033a:	701a      	strb	r2, [r3, #0]
	ledState[VERTICAL] = GREEN;
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <resetTrafficLight+0x68>)
 800033e:	2201      	movs	r2, #1
 8000340:	701a      	strb	r2, [r3, #0]
	ledState[HORIZONTAL] = RED;
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <resetTrafficLight+0x68>)
 8000344:	2202      	movs	r2, #2
 8000346:	705a      	strb	r2, [r3, #1]
	light_counter[VERTICAL]   = durationGreen * ONE_SECOND;
 8000348:	4b13      	ldr	r3, [pc, #76]	; (8000398 <resetTrafficLight+0x6c>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	b29b      	uxth	r3, r3
 800034e:	461a      	mov	r2, r3
 8000350:	0092      	lsls	r2, r2, #2
 8000352:	4413      	add	r3, r2
 8000354:	461a      	mov	r2, r3
 8000356:	0091      	lsls	r1, r2, #2
 8000358:	461a      	mov	r2, r3
 800035a:	460b      	mov	r3, r1
 800035c:	4413      	add	r3, r2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	b29a      	uxth	r2, r3
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <resetTrafficLight+0x70>)
 8000364:	801a      	strh	r2, [r3, #0]
	light_counter[HORIZONTAL] = durationRed * ONE_SECOND;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <resetTrafficLight+0x74>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b29b      	uxth	r3, r3
 800036c:	461a      	mov	r2, r3
 800036e:	0092      	lsls	r2, r2, #2
 8000370:	4413      	add	r3, r2
 8000372:	461a      	mov	r2, r3
 8000374:	0091      	lsls	r1, r2, #2
 8000376:	461a      	mov	r2, r3
 8000378:	460b      	mov	r3, r1
 800037a:	4413      	add	r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	b29a      	uxth	r2, r3
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <resetTrafficLight+0x70>)
 8000382:	805a      	strh	r2, [r3, #2]
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	200000b0 	.word	0x200000b0
 8000390:	200000bc 	.word	0x200000bc
 8000394:	200000b4 	.word	0x200000b4
 8000398:	200000bf 	.word	0x200000bf
 800039c:	200000b8 	.word	0x200000b8
 80003a0:	200000bd 	.word	0x200000bd

080003a4 <toggleLED>:

void toggleLED(void){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80003a8:	2120      	movs	r1, #32
 80003aa:	4802      	ldr	r0, [pc, #8]	; (80003b4 <toggleLED+0x10>)
 80003ac:	f001 fdef 	bl	8001f8e <HAL_GPIO_TogglePin>
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40010800 	.word	0x40010800

080003b8 <transmitMessage>:
		HAL_GPIO_WritePin(P_GREEN_GPIO_Port, P_GREEN_Pin, 0);
		break;
	}
}

void transmitMessage(void){
 80003b8:	b598      	push	{r3, r4, r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(UART, (uint8_t *) msg, strlen(msg), 500);
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <transmitMessage+0x24>)
 80003be:	681c      	ldr	r4, [r3, #0]
 80003c0:	4807      	ldr	r0, [pc, #28]	; (80003e0 <transmitMessage+0x28>)
 80003c2:	f7ff fec3 	bl	800014c <strlen>
 80003c6:	4603      	mov	r3, r0
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003ce:	4904      	ldr	r1, [pc, #16]	; (80003e0 <transmitMessage+0x28>)
 80003d0:	4620      	mov	r0, r4
 80003d2:	f003 faef 	bl	80039b4 <HAL_UART_Transmit>
}
 80003d6:	bf00      	nop
 80003d8:	bd98      	pop	{r3, r4, r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000114 	.word	0x20000114
 80003e0:	200000c4 	.word	0x200000c4

080003e4 <inputProcessingInit>:

void inputProcessingInit(UART_HandleTypeDef* huart)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	buttonState[SET_BTN] = RELEASED;
 80003ec:	4b23      	ldr	r3, [pc, #140]	; (800047c <inputProcessingInit+0x98>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	709a      	strb	r2, [r3, #2]
	buttonState[MOD_BTN] = RELEASED;
 80003f2:	4b22      	ldr	r3, [pc, #136]	; (800047c <inputProcessingInit+0x98>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	705a      	strb	r2, [r3, #1]
	buttonState[SEL_BTN] = RELEASED;
 80003f8:	4b20      	ldr	r3, [pc, #128]	; (800047c <inputProcessingInit+0x98>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
	buttonState[P_BTN] 	 = RELEASED;
 80003fe:	4b1f      	ldr	r3, [pc, #124]	; (800047c <inputProcessingInit+0x98>)
 8000400:	2200      	movs	r2, #0
 8000402:	70da      	strb	r2, [r3, #3]
	blinking_counter = 1;
 8000404:	4b1e      	ldr	r3, [pc, #120]	; (8000480 <inputProcessingInit+0x9c>)
 8000406:	2201      	movs	r2, #1
 8000408:	601a      	str	r2, [r3, #0]
	increasing_counter = INCREASING_PERIOD;
 800040a:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <inputProcessingInit+0xa0>)
 800040c:	220a      	movs	r2, #10
 800040e:	601a      	str	r2, [r3, #0]

	durationRed = DURATION_RED_DEFAULT;
 8000410:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <inputProcessingInit+0xa4>)
 8000412:	2205      	movs	r2, #5
 8000414:	701a      	strb	r2, [r3, #0]
	durationAmber = DURATION_AMBER_DEFAULT;
 8000416:	4b1d      	ldr	r3, [pc, #116]	; (800048c <inputProcessingInit+0xa8>)
 8000418:	2202      	movs	r2, #2
 800041a:	701a      	strb	r2, [r3, #0]
	durationGreen = DURATION_GREEN_DEFAULT;
 800041c:	4b1c      	ldr	r3, [pc, #112]	; (8000490 <inputProcessingInit+0xac>)
 800041e:	2203      	movs	r2, #3
 8000420:	701a      	strb	r2, [r3, #0]

	light_counter[VERTICAL]   = durationGreen * ONE_SECOND;
 8000422:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <inputProcessingInit+0xac>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b29b      	uxth	r3, r3
 8000428:	461a      	mov	r2, r3
 800042a:	0092      	lsls	r2, r2, #2
 800042c:	4413      	add	r3, r2
 800042e:	461a      	mov	r2, r3
 8000430:	0091      	lsls	r1, r2, #2
 8000432:	461a      	mov	r2, r3
 8000434:	460b      	mov	r3, r1
 8000436:	4413      	add	r3, r2
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <inputProcessingInit+0xb0>)
 800043e:	801a      	strh	r2, [r3, #0]
	light_counter[HORIZONTAL] = durationRed * ONE_SECOND;
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <inputProcessingInit+0xa4>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	b29b      	uxth	r3, r3
 8000446:	461a      	mov	r2, r3
 8000448:	0092      	lsls	r2, r2, #2
 800044a:	4413      	add	r3, r2
 800044c:	461a      	mov	r2, r3
 800044e:	0091      	lsls	r1, r2, #2
 8000450:	461a      	mov	r2, r3
 8000452:	460b      	mov	r3, r1
 8000454:	4413      	add	r3, r2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	b29a      	uxth	r2, r3
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <inputProcessingInit+0xb0>)
 800045c:	805a      	strh	r2, [r3, #2]

	resetTrafficLight();
 800045e:	f7ff ff65 	bl	800032c <resetTrafficLight>

	// Take UART from main.c
	UART = huart;
 8000462:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <inputProcessingInit+0xb4>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	6013      	str	r3, [r2, #0]

	// Inform message
	sprintf(msg, "<Pedestrian Project>\r\n");
 8000468:	490c      	ldr	r1, [pc, #48]	; (800049c <inputProcessingInit+0xb8>)
 800046a:	480d      	ldr	r0, [pc, #52]	; (80004a0 <inputProcessingInit+0xbc>)
 800046c:	f003 fd50 	bl	8003f10 <siprintf>
	transmitMessage();
 8000470:	f7ff ffa2 	bl	80003b8 <transmitMessage>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	200000ac 	.word	0x200000ac
 8000480:	20000118 	.word	0x20000118
 8000484:	2000011c 	.word	0x2000011c
 8000488:	200000bd 	.word	0x200000bd
 800048c:	200000be 	.word	0x200000be
 8000490:	200000bf 	.word	0x200000bf
 8000494:	200000b8 	.word	0x200000b8
 8000498:	20000114 	.word	0x20000114
 800049c:	08004644 	.word	0x08004644
 80004a0:	200000c4 	.word	0x200000c4

080004a4 <increaseOne>:

void increaseOne(uint8_t* duration){
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	(*duration) = (*duration) + 1 > 99 ? 0 : (*duration) + 1;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b62      	cmp	r3, #98	; 0x62
 80004b2:	d804      	bhi.n	80004be <increaseOne+0x1a>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	e000      	b.n	80004c0 <increaseOne+0x1c>
 80004be:	2200      	movs	r2, #0
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	701a      	strb	r2, [r3, #0]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
	...

080004d0 <modifyingValue>:

void modifyingValue(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	switch(runState){
 80004d4:	4b3c      	ldr	r3, [pc, #240]	; (80005c8 <modifyingValue+0xf8>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	3b01      	subs	r3, #1
 80004da:	2b03      	cmp	r3, #3
 80004dc:	d871      	bhi.n	80005c2 <modifyingValue+0xf2>
 80004de:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <modifyingValue+0x14>)
 80004e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e4:	080005c1 	.word	0x080005c1
 80004e8:	080004f5 	.word	0x080004f5
 80004ec:	08000539 	.word	0x08000539
 80004f0:	0800057d 	.word	0x0800057d
	case NORMAL_MODE:
		break;
	case MODIFY_DURATION_RED_MODE:
		increaseOne(&adjust_duRed);
 80004f4:	4835      	ldr	r0, [pc, #212]	; (80005cc <modifyingValue+0xfc>)
 80004f6:	f7ff ffd5 	bl	80004a4 <increaseOne>

		lcd_clear();
 80004fa:	f7ff fe8f 	bl	800021c <lcd_clear>
		lcd_put_cur(0, 0);
 80004fe:	2100      	movs	r1, #0
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff fea2 	bl	800024a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationRed);
 8000506:	4b32      	ldr	r3, [pc, #200]	; (80005d0 <modifyingValue+0x100>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	461a      	mov	r2, r3
 800050c:	4931      	ldr	r1, [pc, #196]	; (80005d4 <modifyingValue+0x104>)
 800050e:	4832      	ldr	r0, [pc, #200]	; (80005d8 <modifyingValue+0x108>)
 8000510:	f003 fcfe 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 8000514:	4830      	ldr	r0, [pc, #192]	; (80005d8 <modifyingValue+0x108>)
 8000516:	f7ff fef4 	bl	8000302 <lcd_send_string>
		lcd_put_cur(1, 0);
 800051a:	2100      	movs	r1, #0
 800051c:	2001      	movs	r0, #1
 800051e:	f7ff fe94 	bl	800024a <lcd_put_cur>
		sprintf(message, "MOD_RED: %ds", adjust_duRed);
 8000522:	4b2a      	ldr	r3, [pc, #168]	; (80005cc <modifyingValue+0xfc>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	461a      	mov	r2, r3
 8000528:	492c      	ldr	r1, [pc, #176]	; (80005dc <modifyingValue+0x10c>)
 800052a:	482b      	ldr	r0, [pc, #172]	; (80005d8 <modifyingValue+0x108>)
 800052c:	f003 fcf0 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 8000530:	4829      	ldr	r0, [pc, #164]	; (80005d8 <modifyingValue+0x108>)
 8000532:	f7ff fee6 	bl	8000302 <lcd_send_string>

		break;
 8000536:	e044      	b.n	80005c2 <modifyingValue+0xf2>
	case MODIFY_DURATION_AMBER_MODE:
		increaseOne(&adjust_duAmber);
 8000538:	4829      	ldr	r0, [pc, #164]	; (80005e0 <modifyingValue+0x110>)
 800053a:	f7ff ffb3 	bl	80004a4 <increaseOne>

		lcd_clear();
 800053e:	f7ff fe6d 	bl	800021c <lcd_clear>
		lcd_put_cur(0, 0);
 8000542:	2100      	movs	r1, #0
 8000544:	2000      	movs	r0, #0
 8000546:	f7ff fe80 	bl	800024a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationAmber);
 800054a:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <modifyingValue+0x114>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	461a      	mov	r2, r3
 8000550:	4920      	ldr	r1, [pc, #128]	; (80005d4 <modifyingValue+0x104>)
 8000552:	4821      	ldr	r0, [pc, #132]	; (80005d8 <modifyingValue+0x108>)
 8000554:	f003 fcdc 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 8000558:	481f      	ldr	r0, [pc, #124]	; (80005d8 <modifyingValue+0x108>)
 800055a:	f7ff fed2 	bl	8000302 <lcd_send_string>
		lcd_put_cur(1, 0);
 800055e:	2100      	movs	r1, #0
 8000560:	2001      	movs	r0, #1
 8000562:	f7ff fe72 	bl	800024a <lcd_put_cur>
		sprintf(message, "MOD_AMBER: %ds", adjust_duAmber);
 8000566:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <modifyingValue+0x110>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	491e      	ldr	r1, [pc, #120]	; (80005e8 <modifyingValue+0x118>)
 800056e:	481a      	ldr	r0, [pc, #104]	; (80005d8 <modifyingValue+0x108>)
 8000570:	f003 fcce 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 8000574:	4818      	ldr	r0, [pc, #96]	; (80005d8 <modifyingValue+0x108>)
 8000576:	f7ff fec4 	bl	8000302 <lcd_send_string>

		break;
 800057a:	e022      	b.n	80005c2 <modifyingValue+0xf2>
	case MODIFY_DURATION_GREEN_MODE:
		increaseOne(&adjust_duGreen);
 800057c:	481b      	ldr	r0, [pc, #108]	; (80005ec <modifyingValue+0x11c>)
 800057e:	f7ff ff91 	bl	80004a4 <increaseOne>

		lcd_clear();
 8000582:	f7ff fe4b 	bl	800021c <lcd_clear>
		lcd_put_cur(0, 0);
 8000586:	2100      	movs	r1, #0
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff fe5e 	bl	800024a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationGreen);
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <modifyingValue+0x120>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	490f      	ldr	r1, [pc, #60]	; (80005d4 <modifyingValue+0x104>)
 8000596:	4810      	ldr	r0, [pc, #64]	; (80005d8 <modifyingValue+0x108>)
 8000598:	f003 fcba 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 800059c:	480e      	ldr	r0, [pc, #56]	; (80005d8 <modifyingValue+0x108>)
 800059e:	f7ff feb0 	bl	8000302 <lcd_send_string>
		lcd_put_cur(1, 0);
 80005a2:	2100      	movs	r1, #0
 80005a4:	2001      	movs	r0, #1
 80005a6:	f7ff fe50 	bl	800024a <lcd_put_cur>
		sprintf(message, "MOD_GREEN: %ds", adjust_duGreen);
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <modifyingValue+0x11c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	461a      	mov	r2, r3
 80005b0:	4910      	ldr	r1, [pc, #64]	; (80005f4 <modifyingValue+0x124>)
 80005b2:	4809      	ldr	r0, [pc, #36]	; (80005d8 <modifyingValue+0x108>)
 80005b4:	f003 fcac 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <modifyingValue+0x108>)
 80005ba:	f7ff fea2 	bl	8000302 <lcd_send_string>
		break;
 80005be:	e000      	b.n	80005c2 <modifyingValue+0xf2>
		break;
 80005c0:	bf00      	nop
	}
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000b0 	.word	0x200000b0
 80005cc:	200000c0 	.word	0x200000c0
 80005d0:	200000bd 	.word	0x200000bd
 80005d4:	0800465c 	.word	0x0800465c
 80005d8:	20000104 	.word	0x20000104
 80005dc:	0800466c 	.word	0x0800466c
 80005e0:	200000c1 	.word	0x200000c1
 80005e4:	200000be 	.word	0x200000be
 80005e8:	0800467c 	.word	0x0800467c
 80005ec:	200000c2 	.word	0x200000c2
 80005f0:	200000bf 	.word	0x200000bf
 80005f4:	0800468c 	.word	0x0800468c

080005f8 <changingMode>:
void changingMode(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	//Turn off all LEDs.
	resetAllLED();
 80005fc:	f001 f8b4 	bl	8001768 <resetAllLED>

	//Changing state and initial new value for new mode.
	switch(runState){
 8000600:	4b4a      	ldr	r3, [pc, #296]	; (800072c <changingMode+0x134>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	3b01      	subs	r3, #1
 8000606:	2b03      	cmp	r3, #3
 8000608:	f200 808d 	bhi.w	8000726 <changingMode+0x12e>
 800060c:	a201      	add	r2, pc, #4	; (adr r2, 8000614 <changingMode+0x1c>)
 800060e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000612:	bf00      	nop
 8000614:	08000625 	.word	0x08000625
 8000618:	08000677 	.word	0x08000677
 800061c:	080006c9 	.word	0x080006c9
 8000620:	0800071b 	.word	0x0800071b
	case NORMAL_MODE:
		runState = MODIFY_DURATION_RED_MODE;
 8000624:	4b41      	ldr	r3, [pc, #260]	; (800072c <changingMode+0x134>)
 8000626:	2202      	movs	r2, #2
 8000628:	701a      	strb	r2, [r3, #0]
		blinking_counter = HALF_SECOND;
 800062a:	4b41      	ldr	r3, [pc, #260]	; (8000730 <changingMode+0x138>)
 800062c:	2232      	movs	r2, #50	; 0x32
 800062e:	601a      	str	r2, [r3, #0]
		adjust_duRed = durationRed;
 8000630:	4b40      	ldr	r3, [pc, #256]	; (8000734 <changingMode+0x13c>)
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	4b40      	ldr	r3, [pc, #256]	; (8000738 <changingMode+0x140>)
 8000636:	701a      	strb	r2, [r3, #0]


		lcd_clear();
 8000638:	f7ff fdf0 	bl	800021c <lcd_clear>
		lcd_put_cur(0, 0);
 800063c:	2100      	movs	r1, #0
 800063e:	2000      	movs	r0, #0
 8000640:	f7ff fe03 	bl	800024a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationRed);
 8000644:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <changingMode+0x13c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	493c      	ldr	r1, [pc, #240]	; (800073c <changingMode+0x144>)
 800064c:	483c      	ldr	r0, [pc, #240]	; (8000740 <changingMode+0x148>)
 800064e:	f003 fc5f 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 8000652:	483b      	ldr	r0, [pc, #236]	; (8000740 <changingMode+0x148>)
 8000654:	f7ff fe55 	bl	8000302 <lcd_send_string>
		lcd_put_cur(1, 0);
 8000658:	2100      	movs	r1, #0
 800065a:	2001      	movs	r0, #1
 800065c:	f7ff fdf5 	bl	800024a <lcd_put_cur>
		sprintf(message, "MOD_RED: %ds", adjust_duRed);
 8000660:	4b35      	ldr	r3, [pc, #212]	; (8000738 <changingMode+0x140>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4937      	ldr	r1, [pc, #220]	; (8000744 <changingMode+0x14c>)
 8000668:	4835      	ldr	r0, [pc, #212]	; (8000740 <changingMode+0x148>)
 800066a:	f003 fc51 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 800066e:	4834      	ldr	r0, [pc, #208]	; (8000740 <changingMode+0x148>)
 8000670:	f7ff fe47 	bl	8000302 <lcd_send_string>

		break;
 8000674:	e057      	b.n	8000726 <changingMode+0x12e>
	case MODIFY_DURATION_RED_MODE:
		runState = MODIFY_DURATION_AMBER_MODE;
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <changingMode+0x134>)
 8000678:	2203      	movs	r2, #3
 800067a:	701a      	strb	r2, [r3, #0]
		blinking_counter = HALF_SECOND;
 800067c:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <changingMode+0x138>)
 800067e:	2232      	movs	r2, #50	; 0x32
 8000680:	601a      	str	r2, [r3, #0]
		adjust_duAmber = durationAmber;
 8000682:	4b31      	ldr	r3, [pc, #196]	; (8000748 <changingMode+0x150>)
 8000684:	781a      	ldrb	r2, [r3, #0]
 8000686:	4b31      	ldr	r3, [pc, #196]	; (800074c <changingMode+0x154>)
 8000688:	701a      	strb	r2, [r3, #0]


		lcd_clear();
 800068a:	f7ff fdc7 	bl	800021c <lcd_clear>
		lcd_put_cur(0, 0);
 800068e:	2100      	movs	r1, #0
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff fdda 	bl	800024a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationAmber);
 8000696:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <changingMode+0x150>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	4927      	ldr	r1, [pc, #156]	; (800073c <changingMode+0x144>)
 800069e:	4828      	ldr	r0, [pc, #160]	; (8000740 <changingMode+0x148>)
 80006a0:	f003 fc36 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 80006a4:	4826      	ldr	r0, [pc, #152]	; (8000740 <changingMode+0x148>)
 80006a6:	f7ff fe2c 	bl	8000302 <lcd_send_string>
		lcd_put_cur(1, 0);
 80006aa:	2100      	movs	r1, #0
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff fdcc 	bl	800024a <lcd_put_cur>
		sprintf(message, "MOD_AMBER: %ds", adjust_duAmber);
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <changingMode+0x154>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4925      	ldr	r1, [pc, #148]	; (8000750 <changingMode+0x158>)
 80006ba:	4821      	ldr	r0, [pc, #132]	; (8000740 <changingMode+0x148>)
 80006bc:	f003 fc28 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 80006c0:	481f      	ldr	r0, [pc, #124]	; (8000740 <changingMode+0x148>)
 80006c2:	f7ff fe1e 	bl	8000302 <lcd_send_string>

		break;
 80006c6:	e02e      	b.n	8000726 <changingMode+0x12e>
	case MODIFY_DURATION_AMBER_MODE:
		runState = MODIFY_DURATION_GREEN_MODE;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <changingMode+0x134>)
 80006ca:	2204      	movs	r2, #4
 80006cc:	701a      	strb	r2, [r3, #0]
		blinking_counter = HALF_SECOND;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <changingMode+0x138>)
 80006d0:	2232      	movs	r2, #50	; 0x32
 80006d2:	601a      	str	r2, [r3, #0]
		adjust_duGreen = durationGreen;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <changingMode+0x15c>)
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <changingMode+0x160>)
 80006da:	701a      	strb	r2, [r3, #0]


		lcd_clear();
 80006dc:	f7ff fd9e 	bl	800021c <lcd_clear>
		lcd_put_cur(0, 0);
 80006e0:	2100      	movs	r1, #0
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff fdb1 	bl	800024a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationGreen);
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <changingMode+0x15c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4913      	ldr	r1, [pc, #76]	; (800073c <changingMode+0x144>)
 80006f0:	4813      	ldr	r0, [pc, #76]	; (8000740 <changingMode+0x148>)
 80006f2:	f003 fc0d 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <changingMode+0x148>)
 80006f8:	f7ff fe03 	bl	8000302 <lcd_send_string>
		lcd_put_cur(1, 0);
 80006fc:	2100      	movs	r1, #0
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff fda3 	bl	800024a <lcd_put_cur>
		sprintf(message, "MOD_GREEN: %ds", adjust_duGreen);
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <changingMode+0x160>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4914      	ldr	r1, [pc, #80]	; (800075c <changingMode+0x164>)
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <changingMode+0x148>)
 800070e:	f003 fbff 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 8000712:	480b      	ldr	r0, [pc, #44]	; (8000740 <changingMode+0x148>)
 8000714:	f7ff fdf5 	bl	8000302 <lcd_send_string>

		break;
 8000718:	e005      	b.n	8000726 <changingMode+0x12e>
	case MODIFY_DURATION_GREEN_MODE:
		runState = NORMAL_MODE;
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <changingMode+0x134>)
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
		resetTrafficLight();
 8000720:	f7ff fe04 	bl	800032c <resetTrafficLight>
		break;
 8000724:	bf00      	nop
	}
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000b0 	.word	0x200000b0
 8000730:	20000118 	.word	0x20000118
 8000734:	200000bd 	.word	0x200000bd
 8000738:	200000c0 	.word	0x200000c0
 800073c:	0800465c 	.word	0x0800465c
 8000740:	20000104 	.word	0x20000104
 8000744:	0800466c 	.word	0x0800466c
 8000748:	200000be 	.word	0x200000be
 800074c:	200000c1 	.word	0x200000c1
 8000750:	0800467c 	.word	0x0800467c
 8000754:	200000bf 	.word	0x200000bf
 8000758:	200000c2 	.word	0x200000c2
 800075c:	0800468c 	.word	0x0800468c

08000760 <setValue>:
void setValue(void){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	switch(runState){
 8000764:	4b3d      	ldr	r3, [pc, #244]	; (800085c <setValue+0xfc>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	3b01      	subs	r3, #1
 800076a:	2b03      	cmp	r3, #3
 800076c:	d874      	bhi.n	8000858 <setValue+0xf8>
 800076e:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <setValue+0x14>)
 8000770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000774:	08000857 	.word	0x08000857
 8000778:	08000785 	.word	0x08000785
 800077c:	080007cb 	.word	0x080007cb
 8000780:	08000811 	.word	0x08000811
	case NORMAL_MODE:
		break;
	case MODIFY_DURATION_RED_MODE:
		durationRed = adjust_duRed;
 8000784:	4b36      	ldr	r3, [pc, #216]	; (8000860 <setValue+0x100>)
 8000786:	781a      	ldrb	r2, [r3, #0]
 8000788:	4b36      	ldr	r3, [pc, #216]	; (8000864 <setValue+0x104>)
 800078a:	701a      	strb	r2, [r3, #0]

		lcd_clear();
 800078c:	f7ff fd46 	bl	800021c <lcd_clear>
		lcd_put_cur(0, 0);
 8000790:	2100      	movs	r1, #0
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff fd59 	bl	800024a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationRed);
 8000798:	4b32      	ldr	r3, [pc, #200]	; (8000864 <setValue+0x104>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	4932      	ldr	r1, [pc, #200]	; (8000868 <setValue+0x108>)
 80007a0:	4832      	ldr	r0, [pc, #200]	; (800086c <setValue+0x10c>)
 80007a2:	f003 fbb5 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 80007a6:	4831      	ldr	r0, [pc, #196]	; (800086c <setValue+0x10c>)
 80007a8:	f7ff fdab 	bl	8000302 <lcd_send_string>
		lcd_put_cur(1, 0);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff fd4b 	bl	800024a <lcd_put_cur>
		sprintf(message, "MOD_RED: %ds", adjust_duRed);
 80007b4:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <setValue+0x100>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	492d      	ldr	r1, [pc, #180]	; (8000870 <setValue+0x110>)
 80007bc:	482b      	ldr	r0, [pc, #172]	; (800086c <setValue+0x10c>)
 80007be:	f003 fba7 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 80007c2:	482a      	ldr	r0, [pc, #168]	; (800086c <setValue+0x10c>)
 80007c4:	f7ff fd9d 	bl	8000302 <lcd_send_string>

		break;
 80007c8:	e046      	b.n	8000858 <setValue+0xf8>
	case MODIFY_DURATION_AMBER_MODE:
		durationAmber = adjust_duAmber;
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <setValue+0x114>)
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <setValue+0x118>)
 80007d0:	701a      	strb	r2, [r3, #0]

		lcd_clear();
 80007d2:	f7ff fd23 	bl	800021c <lcd_clear>
		lcd_put_cur(0, 0);
 80007d6:	2100      	movs	r1, #0
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff fd36 	bl	800024a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationAmber);
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <setValue+0x118>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	4920      	ldr	r1, [pc, #128]	; (8000868 <setValue+0x108>)
 80007e6:	4821      	ldr	r0, [pc, #132]	; (800086c <setValue+0x10c>)
 80007e8:	f003 fb92 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 80007ec:	481f      	ldr	r0, [pc, #124]	; (800086c <setValue+0x10c>)
 80007ee:	f7ff fd88 	bl	8000302 <lcd_send_string>
		lcd_put_cur(1, 0);
 80007f2:	2100      	movs	r1, #0
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff fd28 	bl	800024a <lcd_put_cur>
		sprintf(message, "MOD_AMBER: %ds", adjust_duAmber);
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <setValue+0x114>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	491e      	ldr	r1, [pc, #120]	; (800087c <setValue+0x11c>)
 8000802:	481a      	ldr	r0, [pc, #104]	; (800086c <setValue+0x10c>)
 8000804:	f003 fb84 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 8000808:	4818      	ldr	r0, [pc, #96]	; (800086c <setValue+0x10c>)
 800080a:	f7ff fd7a 	bl	8000302 <lcd_send_string>

		break;
 800080e:	e023      	b.n	8000858 <setValue+0xf8>
	case MODIFY_DURATION_GREEN_MODE:
		durationGreen = adjust_duGreen;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <setValue+0x120>)
 8000812:	781a      	ldrb	r2, [r3, #0]
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <setValue+0x124>)
 8000816:	701a      	strb	r2, [r3, #0]

		lcd_clear();
 8000818:	f7ff fd00 	bl	800021c <lcd_clear>
		lcd_put_cur(0, 0);
 800081c:	2100      	movs	r1, #0
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fd13 	bl	800024a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationGreen);
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <setValue+0x124>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	490f      	ldr	r1, [pc, #60]	; (8000868 <setValue+0x108>)
 800082c:	480f      	ldr	r0, [pc, #60]	; (800086c <setValue+0x10c>)
 800082e:	f003 fb6f 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 8000832:	480e      	ldr	r0, [pc, #56]	; (800086c <setValue+0x10c>)
 8000834:	f7ff fd65 	bl	8000302 <lcd_send_string>
		lcd_put_cur(1, 0);
 8000838:	2100      	movs	r1, #0
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff fd05 	bl	800024a <lcd_put_cur>
		sprintf(message, "MOD_GREEN: %ds", adjust_duGreen);
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <setValue+0x120>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4910      	ldr	r1, [pc, #64]	; (8000888 <setValue+0x128>)
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <setValue+0x10c>)
 800084a:	f003 fb61 	bl	8003f10 <siprintf>
		lcd_send_string(message);
 800084e:	4807      	ldr	r0, [pc, #28]	; (800086c <setValue+0x10c>)
 8000850:	f7ff fd57 	bl	8000302 <lcd_send_string>

		break;
 8000854:	e000      	b.n	8000858 <setValue+0xf8>
		break;
 8000856:	bf00      	nop
	}
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000b0 	.word	0x200000b0
 8000860:	200000c0 	.word	0x200000c0
 8000864:	200000bd 	.word	0x200000bd
 8000868:	0800465c 	.word	0x0800465c
 800086c:	20000104 	.word	0x20000104
 8000870:	0800466c 	.word	0x0800466c
 8000874:	200000c1 	.word	0x200000c1
 8000878:	200000be 	.word	0x200000be
 800087c:	0800467c 	.word	0x0800467c
 8000880:	200000c2 	.word	0x200000c2
 8000884:	200000bf 	.word	0x200000bf
 8000888:	0800468c 	.word	0x0800468c

0800088c <inputProcessingFSM>:
		pState = SLEEP;
	}
}

//This is abstract function. Use for those function below.
void inputProcessingFSM(void (*processing) (void), const short index){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
	switch(buttonState[index]){
 8000898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800089c:	4a26      	ldr	r2, [pc, #152]	; (8000938 <inputProcessingFSM+0xac>)
 800089e:	5cd3      	ldrb	r3, [r2, r3]
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d032      	beq.n	800090a <inputProcessingFSM+0x7e>
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	dc43      	bgt.n	8000930 <inputProcessingFSM+0xa4>
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <inputProcessingFSM+0x26>
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d010      	beq.n	80008d2 <inputProcessingFSM+0x46>
		if (!isButtonPressedOneSec(index)){
			buttonState[index] = RELEASED;
		}
		break;
	}
}
 80008b0:	e03e      	b.n	8000930 <inputProcessingFSM+0xa4>
		if (isButtonPressed(index)){
 80008b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 faa8 	bl	8000e0c <isButtonPressed>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d031      	beq.n	8000926 <inputProcessingFSM+0x9a>
			buttonState[index] = PRESSED;
 80008c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008c6:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <inputProcessingFSM+0xac>)
 80008c8:	2101      	movs	r1, #1
 80008ca:	54d1      	strb	r1, [r2, r3]
			(*processing)();
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4798      	blx	r3
		break;
 80008d0:	e029      	b.n	8000926 <inputProcessingFSM+0x9a>
		if (!isButtonPressed(index)){
 80008d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fa98 	bl	8000e0c <isButtonPressed>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d105      	bne.n	80008ee <inputProcessingFSM+0x62>
			buttonState[index] = RELEASED;
 80008e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <inputProcessingFSM+0xac>)
 80008e8:	2100      	movs	r1, #0
 80008ea:	54d1      	strb	r1, [r2, r3]
		break;
 80008ec:	e01d      	b.n	800092a <inputProcessingFSM+0x9e>
		} else if (isButtonPressedOneSec(index)){
 80008ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 faa0 	bl	8000e38 <isButtonPressedOneSec>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d015      	beq.n	800092a <inputProcessingFSM+0x9e>
			buttonState[index] = PRESSED_MORE_THAN_ONE_SECOND;
 80008fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000902:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <inputProcessingFSM+0xac>)
 8000904:	2102      	movs	r1, #2
 8000906:	54d1      	strb	r1, [r2, r3]
		break;
 8000908:	e00f      	b.n	800092a <inputProcessingFSM+0x9e>
		if (!isButtonPressedOneSec(index)){
 800090a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fa92 	bl	8000e38 <isButtonPressedOneSec>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d109      	bne.n	800092e <inputProcessingFSM+0xa2>
			buttonState[index] = RELEASED;
 800091a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800091e:	4a06      	ldr	r2, [pc, #24]	; (8000938 <inputProcessingFSM+0xac>)
 8000920:	2100      	movs	r1, #0
 8000922:	54d1      	strb	r1, [r2, r3]
		break;
 8000924:	e003      	b.n	800092e <inputProcessingFSM+0xa2>
		break;
 8000926:	bf00      	nop
 8000928:	e002      	b.n	8000930 <inputProcessingFSM+0xa4>
		break;
 800092a:	bf00      	nop
 800092c:	e000      	b.n	8000930 <inputProcessingFSM+0xa4>
		break;
 800092e:	bf00      	nop
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000ac 	.word	0x200000ac

0800093c <handleSetValueButton>:
void handleSetValueButton(void){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	buttonReading(SET_BTN);
 8000940:	2002      	movs	r0, #2
 8000942:	f000 f9f3 	bl	8000d2c <buttonReading>
	inputProcessingFSM(setValue, SET_BTN);
 8000946:	2102      	movs	r1, #2
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <handleSetValueButton+0x18>)
 800094a:	f7ff ff9f 	bl	800088c <inputProcessingFSM>
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	08000761 	.word	0x08000761

08000958 <handleModifyButton>:
void handleModifyButton(void){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	buttonReading(MOD_BTN);
 800095c:	2001      	movs	r0, #1
 800095e:	f000 f9e5 	bl	8000d2c <buttonReading>
	inputProcessingFSM(modifyingValue, MOD_BTN);
 8000962:	2101      	movs	r1, #1
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <handleModifyButton+0x44>)
 8000966:	f7ff ff91 	bl	800088c <inputProcessingFSM>
	//Handle when button hold more than one second
	//increase `adjusting value` after INCREASING_PERIOD ms
	if (buttonState[MOD_BTN] == PRESSED_MORE_THAN_ONE_SECOND) {
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <handleModifyButton+0x48>)
 800096c:	785b      	ldrb	r3, [r3, #1]
 800096e:	2b02      	cmp	r3, #2
 8000970:	d10e      	bne.n	8000990 <handleModifyButton+0x38>
		increasing_counter--;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <handleModifyButton+0x4c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3b01      	subs	r3, #1
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <handleModifyButton+0x4c>)
 800097a:	6013      	str	r3, [r2, #0]
		if (increasing_counter <= 0) {
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <handleModifyButton+0x4c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	dc08      	bgt.n	8000996 <handleModifyButton+0x3e>
			increasing_counter = INCREASING_PERIOD;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <handleModifyButton+0x4c>)
 8000986:	220a      	movs	r2, #10
 8000988:	601a      	str	r2, [r3, #0]
			modifyingValue();
 800098a:	f7ff fda1 	bl	80004d0 <modifyingValue>
		}
	} else {
		increasing_counter = INCREASING_PERIOD;
	}
}
 800098e:	e002      	b.n	8000996 <handleModifyButton+0x3e>
		increasing_counter = INCREASING_PERIOD;
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <handleModifyButton+0x4c>)
 8000992:	220a      	movs	r2, #10
 8000994:	601a      	str	r2, [r3, #0]
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	080004d1 	.word	0x080004d1
 80009a0:	200000ac 	.word	0x200000ac
 80009a4:	2000011c 	.word	0x2000011c

080009a8 <handleSelectModeButton>:
void handleSelectModeButton(void){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	buttonReading(SEL_BTN);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 f9bd 	bl	8000d2c <buttonReading>
	inputProcessingFSM(changingMode, SEL_BTN);
 80009b2:	2100      	movs	r1, #0
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <handleSelectModeButton+0x18>)
 80009b6:	f7ff ff69 	bl	800088c <inputProcessingFSM>
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	080005f9 	.word	0x080005f9

080009c4 <handlePedestrianButton>:

void handlePedestrianButton(void){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	buttonReading(P_BTN);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f9af 	bl	8000d2c <buttonReading>
	inputProcessingFSM(toggleLED, P_BTN);
 80009ce:	2103      	movs	r1, #3
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <handlePedestrianButton+0x18>)
 80009d2:	f7ff ff5b 	bl	800088c <inputProcessingFSM>
	//.inputProcessingFSM(handlePedestrianPressedEvent, P_BTN);
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	080003a5 	.word	0x080003a5

080009e0 <displayingDuration>:
		return 1;
	}

}

void displayingDuration(uint8_t index){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	if (light_counter[index] % ONE_SECOND != 0 || light_counter[index] == 0)
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4a2a      	ldr	r2, [pc, #168]	; (8000a98 <displayingDuration+0xb8>)
 80009ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f2:	4a2a      	ldr	r2, [pc, #168]	; (8000a9c <displayingDuration+0xbc>)
 80009f4:	fba2 1203 	umull	r1, r2, r2, r3
 80009f8:	0952      	lsrs	r2, r2, #5
 80009fa:	2164      	movs	r1, #100	; 0x64
 80009fc:	fb01 f202 	mul.w	r2, r1, r2
 8000a00:	1a9b      	subs	r3, r3, r2
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d143      	bne.n	8000a90 <displayingDuration+0xb0>
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4a23      	ldr	r2, [pc, #140]	; (8000a98 <displayingDuration+0xb8>)
 8000a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d03d      	beq.n	8000a90 <displayingDuration+0xb0>
		return;

	char* orientation;
	if (index == VERTICAL) orientation = "V";
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d102      	bne.n	8000a20 <displayingDuration+0x40>
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <displayingDuration+0xc0>)
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	e001      	b.n	8000a24 <displayingDuration+0x44>
	else orientation = "H";
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <displayingDuration+0xc4>)
 8000a22:	617b      	str	r3, [r7, #20]

	char* led_state_name;
	switch(ledState[index]){
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4a20      	ldr	r2, [pc, #128]	; (8000aa8 <displayingDuration+0xc8>)
 8000a28:	5cd3      	ldrb	r3, [r2, r3]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d008      	beq.n	8000a40 <displayingDuration+0x60>
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	dc0c      	bgt.n	8000a4c <displayingDuration+0x6c>
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d007      	beq.n	8000a46 <displayingDuration+0x66>
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d108      	bne.n	8000a4c <displayingDuration+0x6c>
	case RED:
		led_state_name = "RED";
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <displayingDuration+0xcc>)
 8000a3c:	613b      	str	r3, [r7, #16]
		break;
 8000a3e:	e005      	b.n	8000a4c <displayingDuration+0x6c>
	case AMBER:
		led_state_name = "AMBER";
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <displayingDuration+0xd0>)
 8000a42:	613b      	str	r3, [r7, #16]
		break;
 8000a44:	e002      	b.n	8000a4c <displayingDuration+0x6c>
	case GREEN:
		led_state_name = "GREEN";
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <displayingDuration+0xd4>)
 8000a48:	613b      	str	r3, [r7, #16]
		break;
 8000a4a:	bf00      	nop
	}

	uint16_t numberDisplay = (light_counter[index] - 1) / ONE_SECOND;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <displayingDuration+0xb8>)
 8000a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <displayingDuration+0xbc>)
 8000a58:	fb82 1203 	smull	r1, r2, r2, r3
 8000a5c:	1152      	asrs	r2, r2, #5
 8000a5e:	17db      	asrs	r3, r3, #31
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	81fb      	strh	r3, [r7, #14]

	if (index == 0) lcd_clear();
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d101      	bne.n	8000a6e <displayingDuration+0x8e>
 8000a6a:	f7ff fbd7 	bl	800021c <lcd_clear>
	lcd_put_cur(index, 0);
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fbe9 	bl	800024a <lcd_put_cur>
	sprintf(message, "%s-%s: %ds", orientation, led_state_name, numberDisplay);
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	490d      	ldr	r1, [pc, #52]	; (8000ab8 <displayingDuration+0xd8>)
 8000a82:	480e      	ldr	r0, [pc, #56]	; (8000abc <displayingDuration+0xdc>)
 8000a84:	f003 fa44 	bl	8003f10 <siprintf>
	lcd_send_string(message);
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <displayingDuration+0xdc>)
 8000a8a:	f7ff fc3a 	bl	8000302 <lcd_send_string>
 8000a8e:	e000      	b.n	8000a92 <displayingDuration+0xb2>
		return;
 8000a90:	bf00      	nop
}
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200000b8 	.word	0x200000b8
 8000a9c:	51eb851f 	.word	0x51eb851f
 8000aa0:	0800469c 	.word	0x0800469c
 8000aa4:	080046a0 	.word	0x080046a0
 8000aa8:	200000b4 	.word	0x200000b4
 8000aac:	080046a4 	.word	0x080046a4
 8000ab0:	080046a8 	.word	0x080046a8
 8000ab4:	080046b0 	.word	0x080046b0
 8000ab8:	080046b8 	.word	0x080046b8
 8000abc:	20000104 	.word	0x20000104

08000ac0 <trafficLightFSM>:


void trafficLightFSM(const short index){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]
	// Display duration via UART.
	displayingDuration(index);
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ff86 	bl	80009e0 <displayingDuration>
	light_counter[index]--;
 8000ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad8:	4a45      	ldr	r2, [pc, #276]	; (8000bf0 <trafficLightFSM+0x130>)
 8000ada:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ade:	3a01      	subs	r2, #1
 8000ae0:	b291      	uxth	r1, r2
 8000ae2:	4a43      	ldr	r2, [pc, #268]	; (8000bf0 <trafficLightFSM+0x130>)
 8000ae4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	switch (ledState[index]){
 8000ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aec:	4a41      	ldr	r2, [pc, #260]	; (8000bf4 <trafficLightFSM+0x134>)
 8000aee:	5cd3      	ldrb	r3, [r2, r3]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	d02a      	beq.n	8000b4a <trafficLightFSM+0x8a>
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	dc77      	bgt.n	8000be8 <trafficLightFSM+0x128>
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d04b      	beq.n	8000b94 <trafficLightFSM+0xd4>
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d173      	bne.n	8000be8 <trafficLightFSM+0x128>
	case RED:
		//Display only Red LED.
		WritePinLED(index, RED);
 8000b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b04:	2102      	movs	r1, #2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fe56 	bl	80017b8 <WritePinLED>
		//After amount of time, it will switch to Green.
		if (light_counter[index] <= 0) {
 8000b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b10:	4a37      	ldr	r2, [pc, #220]	; (8000bf0 <trafficLightFSM+0x130>)
 8000b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d161      	bne.n	8000bde <trafficLightFSM+0x11e>
			light_counter[index] = durationGreen * ONE_SECOND;
 8000b1a:	4b37      	ldr	r3, [pc, #220]	; (8000bf8 <trafficLightFSM+0x138>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b24:	4611      	mov	r1, r2
 8000b26:	0089      	lsls	r1, r1, #2
 8000b28:	440a      	add	r2, r1
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	0088      	lsls	r0, r1, #2
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4602      	mov	r2, r0
 8000b32:	440a      	add	r2, r1
 8000b34:	0092      	lsls	r2, r2, #2
 8000b36:	b291      	uxth	r1, r2
 8000b38:	4a2d      	ldr	r2, [pc, #180]	; (8000bf0 <trafficLightFSM+0x130>)
 8000b3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ledState[index] = GREEN;
 8000b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b42:	4a2c      	ldr	r2, [pc, #176]	; (8000bf4 <trafficLightFSM+0x134>)
 8000b44:	2101      	movs	r1, #1
 8000b46:	54d1      	strb	r1, [r2, r3]
		}
		break;
 8000b48:	e049      	b.n	8000bde <trafficLightFSM+0x11e>
	case AMBER:
		//Display only Amber LED.
		WritePinLED(index, AMBER);
 8000b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b4e:	2103      	movs	r1, #3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 fe31 	bl	80017b8 <WritePinLED>
		//After amount of time, it will switch to Red.
		if (light_counter[index] <= 0) {
 8000b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b5a:	4a25      	ldr	r2, [pc, #148]	; (8000bf0 <trafficLightFSM+0x130>)
 8000b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d13e      	bne.n	8000be2 <trafficLightFSM+0x122>
			light_counter[index] = durationRed * ONE_SECOND;
 8000b64:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <trafficLightFSM+0x13c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	0089      	lsls	r1, r1, #2
 8000b72:	440a      	add	r2, r1
 8000b74:	4611      	mov	r1, r2
 8000b76:	0088      	lsls	r0, r1, #2
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	440a      	add	r2, r1
 8000b7e:	0092      	lsls	r2, r2, #2
 8000b80:	b291      	uxth	r1, r2
 8000b82:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <trafficLightFSM+0x130>)
 8000b84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ledState[index] = RED;
 8000b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b8c:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <trafficLightFSM+0x134>)
 8000b8e:	2102      	movs	r1, #2
 8000b90:	54d1      	strb	r1, [r2, r3]
		}

		break;
 8000b92:	e026      	b.n	8000be2 <trafficLightFSM+0x122>
	case GREEN:
		//Display only Green LED.
		WritePinLED(index, GREEN);
 8000b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fe0c 	bl	80017b8 <WritePinLED>
		//After amount of time, it will switch to Amber.
		if (light_counter[index] <= 0) {
 8000ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <trafficLightFSM+0x130>)
 8000ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d11b      	bne.n	8000be6 <trafficLightFSM+0x126>
			light_counter[index] = durationAmber * ONE_SECOND;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <trafficLightFSM+0x140>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	0089      	lsls	r1, r1, #2
 8000bbc:	440a      	add	r2, r1
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	0088      	lsls	r0, r1, #2
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	440a      	add	r2, r1
 8000bc8:	0092      	lsls	r2, r2, #2
 8000bca:	b291      	uxth	r1, r2
 8000bcc:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <trafficLightFSM+0x130>)
 8000bce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ledState[index] = AMBER;
 8000bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd6:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <trafficLightFSM+0x134>)
 8000bd8:	2103      	movs	r1, #3
 8000bda:	54d1      	strb	r1, [r2, r3]
		}
		break;
 8000bdc:	e003      	b.n	8000be6 <trafficLightFSM+0x126>
		break;
 8000bde:	bf00      	nop
 8000be0:	e002      	b.n	8000be8 <trafficLightFSM+0x128>
		break;
 8000be2:	bf00      	nop
 8000be4:	e000      	b.n	8000be8 <trafficLightFSM+0x128>
		break;
 8000be6:	bf00      	nop
	}
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200000b8 	.word	0x200000b8
 8000bf4:	200000b4 	.word	0x200000b4
 8000bf8:	200000bf 	.word	0x200000bf
 8000bfc:	200000bd 	.word	0x200000bd
 8000c00:	200000be 	.word	0x200000be

08000c04 <runStateFSM>:
	default:
		pState = SLEEP;
	}
}

void runStateFSM(void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	//sprintf(msg, "Hello\r\n");
	//transmitMessage();
	switch (runState){
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <runStateFSM+0xa8>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d841      	bhi.n	8000c96 <runStateFSM+0x92>
 8000c12:	a201      	add	r2, pc, #4	; (adr r2, 8000c18 <runStateFSM+0x14>)
 8000c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c18:	08000c29 	.word	0x08000c29
 8000c1c:	08000c37 	.word	0x08000c37
 8000c20:	08000c57 	.word	0x08000c57
 8000c24:	08000c77 	.word	0x08000c77
		case NORMAL_MODE:
		//Run 2 traffic light FSMs.
		trafficLightFSM(VERTICAL);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff ff49 	bl	8000ac0 <trafficLightFSM>
		trafficLightFSM(HORIZONTAL);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f7ff ff46 	bl	8000ac0 <trafficLightFSM>
		//pedestrianStateFSM();
		break;
 8000c34:	e038      	b.n	8000ca8 <runStateFSM+0xa4>
	case MODIFY_DURATION_RED_MODE:
		//Blinking Red LED in 0.5s
		blinking_counter--;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <runStateFSM+0xac>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <runStateFSM+0xac>)
 8000c3e:	6013      	str	r3, [r2, #0]
		if (blinking_counter <= 0) {
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <runStateFSM+0xac>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	dc2a      	bgt.n	8000c9e <runStateFSM+0x9a>
			blinking_counter = HALF_SECOND;
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <runStateFSM+0xac>)
 8000c4a:	2232      	movs	r2, #50	; 0x32
 8000c4c:	601a      	str	r2, [r3, #0]
			TogglePinLED(RED);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f000 fdf0 	bl	8001834 <TogglePinLED>
		}
		break;
 8000c54:	e023      	b.n	8000c9e <runStateFSM+0x9a>
	case MODIFY_DURATION_AMBER_MODE:
		//Blinking Amber LED in 0.5s
		blinking_counter--;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <runStateFSM+0xac>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <runStateFSM+0xac>)
 8000c5e:	6013      	str	r3, [r2, #0]
		if (blinking_counter <= 0) {
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <runStateFSM+0xac>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dc1c      	bgt.n	8000ca2 <runStateFSM+0x9e>
			blinking_counter = HALF_SECOND;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <runStateFSM+0xac>)
 8000c6a:	2232      	movs	r2, #50	; 0x32
 8000c6c:	601a      	str	r2, [r3, #0]
			TogglePinLED(AMBER);
 8000c6e:	2003      	movs	r0, #3
 8000c70:	f000 fde0 	bl	8001834 <TogglePinLED>
		}
		break;
 8000c74:	e015      	b.n	8000ca2 <runStateFSM+0x9e>
	case MODIFY_DURATION_GREEN_MODE:
		//Blinking Green LED in 0.5s
		blinking_counter--;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <runStateFSM+0xac>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <runStateFSM+0xac>)
 8000c7e:	6013      	str	r3, [r2, #0]
		if (blinking_counter <= 0) {
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <runStateFSM+0xac>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	dc0e      	bgt.n	8000ca6 <runStateFSM+0xa2>
			blinking_counter = HALF_SECOND;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <runStateFSM+0xac>)
 8000c8a:	2232      	movs	r2, #50	; 0x32
 8000c8c:	601a      	str	r2, [r3, #0]
			TogglePinLED(GREEN);
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f000 fdd0 	bl	8001834 <TogglePinLED>
		}
		break;
 8000c94:	e007      	b.n	8000ca6 <runStateFSM+0xa2>
	default:
		runState = NORMAL_MODE;
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <runStateFSM+0xa8>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
	}
}
 8000c9c:	e004      	b.n	8000ca8 <runStateFSM+0xa4>
		break;
 8000c9e:	bf00      	nop
 8000ca0:	e002      	b.n	8000ca8 <runStateFSM+0xa4>
		break;
 8000ca2:	bf00      	nop
 8000ca4:	e000      	b.n	8000ca8 <runStateFSM+0xa4>
		break;
 8000ca6:	bf00      	nop
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200000b0 	.word	0x200000b0
 8000cb0:	20000118 	.word	0x20000118

08000cb4 <inputReadingInit>:

//These variable use for handling pressed more than one second.
uint8_t flagOneSec[NO_BUTTON];
short counterOneSec[NO_BUTTON];

void inputReadingInit(void){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
	for(short i = 0; i < NO_BUTTON; i++){
 8000cba:	2300      	movs	r3, #0
 8000cbc:	80fb      	strh	r3, [r7, #6]
 8000cbe:	e021      	b.n	8000d04 <inputReadingInit+0x50>
		filtered[i] = buffer0[i] = buffer1[i] = BUTTON_RELEASED;
 8000cc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <inputReadingInit+0x64>)
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	5499      	strb	r1, [r3, r2]
 8000cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cce:	4912      	ldr	r1, [pc, #72]	; (8000d18 <inputReadingInit+0x64>)
 8000cd0:	5c89      	ldrb	r1, [r1, r2]
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <inputReadingInit+0x68>)
 8000cd4:	54d1      	strb	r1, [r2, r3]
 8000cd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000cda:	4910      	ldr	r1, [pc, #64]	; (8000d1c <inputReadingInit+0x68>)
 8000cdc:	5cc9      	ldrb	r1, [r1, r3]
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <inputReadingInit+0x6c>)
 8000ce0:	5499      	strb	r1, [r3, r2]
		flagOneSec[i] = 0;
 8000ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <inputReadingInit+0x70>)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	54d1      	strb	r1, [r2, r3]
		counterOneSec[i] = ONE_SECOND;
 8000cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <inputReadingInit+0x74>)
 8000cf2:	2164      	movs	r1, #100	; 0x64
 8000cf4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(short i = 0; i < NO_BUTTON; i++){
 8000cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	80fb      	strh	r3, [r7, #6]
 8000d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	ddd9      	ble.n	8000cc0 <inputReadingInit+0xc>
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	20000128 	.word	0x20000128
 8000d1c:	20000124 	.word	0x20000124
 8000d20:	20000120 	.word	0x20000120
 8000d24:	2000012c 	.word	0x2000012c
 8000d28:	20000130 	.word	0x20000130

08000d2c <buttonReading>:

void buttonReading(const short index){
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
	//Save 2 recently states
	buffer1[index] = buffer0[index];
 8000d36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d3e:	492c      	ldr	r1, [pc, #176]	; (8000df0 <buttonReading+0xc4>)
 8000d40:	5c89      	ldrb	r1, [r1, r2]
 8000d42:	4a2c      	ldr	r2, [pc, #176]	; (8000df4 <buttonReading+0xc8>)
 8000d44:	54d1      	strb	r1, [r2, r3]
	buffer0[index] = HAL_GPIO_ReadPin(BTN_GPIO[index], BTN_Pin[index]);
 8000d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4a:	4a2b      	ldr	r2, [pc, #172]	; (8000df8 <buttonReading+0xcc>)
 8000d4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d54:	4929      	ldr	r1, [pc, #164]	; (8000dfc <buttonReading+0xd0>)
 8000d56:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8000d60:	4619      	mov	r1, r3
 8000d62:	4610      	mov	r0, r2
 8000d64:	f001 f8e4 	bl	8001f30 <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <buttonReading+0xc4>)
 8000d6e:	551a      	strb	r2, [r3, r4]

	//If all saved states equal -> that's a good reading (filtered)
	if(buffer1[index] == buffer0[index]){
 8000d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d74:	4a1f      	ldr	r2, [pc, #124]	; (8000df4 <buttonReading+0xc8>)
 8000d76:	5cd2      	ldrb	r2, [r2, r3]
 8000d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7c:	491c      	ldr	r1, [pc, #112]	; (8000df0 <buttonReading+0xc4>)
 8000d7e:	5ccb      	ldrb	r3, [r1, r3]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d131      	bne.n	8000de8 <buttonReading+0xbc>
		filtered[index] = buffer0[index];
 8000d84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d8c:	4918      	ldr	r1, [pc, #96]	; (8000df0 <buttonReading+0xc4>)
 8000d8e:	5c89      	ldrb	r1, [r1, r2]
 8000d90:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <buttonReading+0xd4>)
 8000d92:	54d1      	strb	r1, [r2, r3]
		//If button_pressed -> counter will work, if not -> just reset counter.
		if (filtered[index] == BUTTON_PRESSED){
 8000d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d98:	4a19      	ldr	r2, [pc, #100]	; (8000e00 <buttonReading+0xd4>)
 8000d9a:	5cd3      	ldrb	r3, [r2, r3]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d118      	bne.n	8000dd2 <buttonReading+0xa6>
			counterOneSec[index]--;
 8000da0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da4:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <buttonReading+0xd8>)
 8000da6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000daa:	b292      	uxth	r2, r2
 8000dac:	3a01      	subs	r2, #1
 8000dae:	b292      	uxth	r2, r2
 8000db0:	b211      	sxth	r1, r2
 8000db2:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <buttonReading+0xd8>)
 8000db4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (counterOneSec[index] <= 0){
 8000db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dbc:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <buttonReading+0xd8>)
 8000dbe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	dc10      	bgt.n	8000de8 <buttonReading+0xbc>
				flagOneSec[index] = 1;
 8000dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <buttonReading+0xdc>)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	54d1      	strb	r1, [r2, r3]
		} else {
			counterOneSec[index] = ONE_SECOND;
			flagOneSec[index] = 0;
		}
	}
}
 8000dd0:	e00a      	b.n	8000de8 <buttonReading+0xbc>
			counterOneSec[index] = ONE_SECOND;
 8000dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <buttonReading+0xd8>)
 8000dd8:	2164      	movs	r1, #100	; 0x64
 8000dda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagOneSec[index] = 0;
 8000dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000de2:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <buttonReading+0xdc>)
 8000de4:	2100      	movs	r1, #0
 8000de6:	54d1      	strb	r1, [r2, r3]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd90      	pop	{r4, r7, pc}
 8000df0:	20000124 	.word	0x20000124
 8000df4:	20000128 	.word	0x20000128
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	080046c4 	.word	0x080046c4
 8000e00:	20000120 	.word	0x20000120
 8000e04:	20000130 	.word	0x20000130
 8000e08:	2000012c 	.word	0x2000012c

08000e0c <isButtonPressed>:

uint8_t isButtonPressed(const short index){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	80fb      	strh	r3, [r7, #6]
	return (filtered[index] == BUTTON_PRESSED);
 8000e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1a:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <isButtonPressed+0x28>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf0c      	ite	eq
 8000e22:	2301      	moveq	r3, #1
 8000e24:	2300      	movne	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000120 	.word	0x20000120

08000e38 <isButtonPressedOneSec>:

uint8_t isButtonPressedOneSec(const short index){
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
	return flagOneSec[index];
 8000e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e46:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <isButtonPressedOneSec+0x1c>)
 8000e48:	5cd3      	ldrb	r3, [r2, r3]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	2000012c 	.word	0x2000012c

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5c:	f000 fd50 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e60:	f000 f82a 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e64:	f000 f90e 	bl	8001084 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e68:	f000 f8e2 	bl	8001030 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e6c:	f000 f894 	bl	8000f98 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000e70:	f000 f864 	bl	8000f3c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000e74:	f7ff fa08 	bl	8000288 <lcd_init>
  SCH_Init();
 8000e78:	f000 f9ca 	bl	8001210 <SCH_Init>

  inputReadingInit();
 8000e7c:	f7ff ff1a 	bl	8000cb4 <inputReadingInit>
  inputProcessingInit(&huart2);
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <main+0x50>)
 8000e82:	f7ff faaf 	bl	80003e4 <inputProcessingInit>

  //SCH_Add_Task(blinkingLED, 10, 1000);
  SCH_Add_Task(readInputAndProcessing, 0, 10);
 8000e86:	220a      	movs	r2, #10
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4808      	ldr	r0, [pc, #32]	; (8000eac <main+0x54>)
 8000e8c:	f000 fad8 	bl	8001440 <SCH_Add_Task>
  SCH_Add_Task(runStateFSM, 10, 10);
 8000e90:	220a      	movs	r2, #10
 8000e92:	210a      	movs	r1, #10
 8000e94:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <main+0x58>)
 8000e96:	f000 fad3 	bl	8001440 <SCH_Add_Task>
  //SCH_Add_Task(displayPLED, 20, 20);

  HAL_TIM_Base_Start_IT(&htim2);
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <main+0x5c>)
 8000e9c:	f002 f98c 	bl	80031b8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000ea0:	f000 fae8 	bl	8001474 <SCH_Dispatch_Tasks>
 8000ea4:	e7fc      	b.n	8000ea0 <main+0x48>
 8000ea6:	bf00      	nop
 8000ea8:	200001d4 	.word	0x200001d4
 8000eac:	080011ed 	.word	0x080011ed
 8000eb0:	08000c05 	.word	0x08000c05
 8000eb4:	2000018c 	.word	0x2000018c

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b090      	sub	sp, #64	; 0x40
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	2228      	movs	r2, #40	; 0x28
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 ff2e 	bl	8003d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000eee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 fcfd 	bl	80028f8 <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f04:	f000 f97e 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f08:	230f      	movs	r3, #15
 8000f0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2102      	movs	r1, #2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 ff6a 	bl	8002dfc <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f2e:	f000 f969 	bl	8001204 <Error_Handler>
  }
}
 8000f32:	bf00      	nop
 8000f34:	3740      	adds	r7, #64	; 0x40
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_I2C2_Init+0x50>)
 8000f42:	4a13      	ldr	r2, [pc, #76]	; (8000f90 <MX_I2C2_Init+0x54>)
 8000f44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_I2C2_Init+0x50>)
 8000f48:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <MX_I2C2_Init+0x58>)
 8000f4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_I2C2_Init+0x50>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_I2C2_Init+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_I2C2_Init+0x50>)
 8000f5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f5e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <MX_I2C2_Init+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_I2C2_Init+0x50>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <MX_I2C2_Init+0x50>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_I2C2_Init+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_I2C2_Init+0x50>)
 8000f7a:	f001 f821 	bl	8001fc0 <HAL_I2C_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f84:	f000 f93e 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000138 	.word	0x20000138
 8000f90:	40005800 	.word	0x40005800
 8000f94:	000186a0 	.word	0x000186a0

08000f98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	; (800102c <MX_TIM2_Init+0x94>)
 8000fb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <MX_TIM2_Init+0x94>)
 8000fbe:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000fc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_TIM2_Init+0x94>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <MX_TIM2_Init+0x94>)
 8000fcc:	2209      	movs	r2, #9
 8000fce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <MX_TIM2_Init+0x94>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_TIM2_Init+0x94>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fdc:	4813      	ldr	r0, [pc, #76]	; (800102c <MX_TIM2_Init+0x94>)
 8000fde:	f002 f89b 	bl	8003118 <HAL_TIM_Base_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fe8:	f000 f90c 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <MX_TIM2_Init+0x94>)
 8000ffa:	f002 fa37 	bl	800346c <HAL_TIM_ConfigClockSource>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001004:	f000 f8fe 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_TIM2_Init+0x94>)
 8001016:	f002 fc0d 	bl	8003834 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001020:	f000 f8f0 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000018c 	.word	0x2000018c

08001030 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_USART2_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001068:	f002 fc54 	bl	8003914 <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f000 f8c7 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200001d4 	.word	0x200001d4
 8001080:	40004400 	.word	0x40004400

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	4b4b      	ldr	r3, [pc, #300]	; (80011c8 <MX_GPIO_Init+0x144>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a4a      	ldr	r2, [pc, #296]	; (80011c8 <MX_GPIO_Init+0x144>)
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <MX_GPIO_Init+0x144>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0310 	and.w	r3, r3, #16
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b0:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <MX_GPIO_Init+0x144>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a44      	ldr	r2, [pc, #272]	; (80011c8 <MX_GPIO_Init+0x144>)
 80010b6:	f043 0320 	orr.w	r3, r3, #32
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <MX_GPIO_Init+0x144>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0320 	and.w	r3, r3, #32
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <MX_GPIO_Init+0x144>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a3e      	ldr	r2, [pc, #248]	; (80011c8 <MX_GPIO_Init+0x144>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <MX_GPIO_Init+0x144>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <MX_GPIO_Init+0x144>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a38      	ldr	r2, [pc, #224]	; (80011c8 <MX_GPIO_Init+0x144>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <MX_GPIO_Init+0x144>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL1_B_Pin|LD2_Pin|P_RED_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2170      	movs	r1, #112	; 0x70
 80010fc:	4833      	ldr	r0, [pc, #204]	; (80011cc <MX_GPIO_Init+0x148>)
 80010fe:	f000 ff2e 	bl	8001f5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P_REDC5_Pin|P_GREEN_Pin|TL2_A_Pin|TL2_B_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 6146 	mov.w	r1, #3168	; 0xc60
 8001108:	4831      	ldr	r0, [pc, #196]	; (80011d0 <MX_GPIO_Init+0x14c>)
 800110a:	f000 ff28 	bl	8001f5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TL1_A_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f242 0101 	movw	r1, #8193	; 0x2001
 8001114:	482f      	ldr	r0, [pc, #188]	; (80011d4 <MX_GPIO_Init+0x150>)
 8001116:	f000 ff22 	bl	8001f5e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOD_BTN_Pin SEL_BTN_Pin */
  GPIO_InitStruct.Pin = MOD_BTN_Pin|SEL_BTN_Pin;
 800111a:	f240 2302 	movw	r3, #514	; 0x202
 800111e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	4827      	ldr	r0, [pc, #156]	; (80011cc <MX_GPIO_Init+0x148>)
 8001130:	f000 fd7a 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL1_B_Pin LD2_Pin P_RED_Pin */
  GPIO_InitStruct.Pin = TL1_B_Pin|LD2_Pin|P_RED_Pin;
 8001134:	2370      	movs	r3, #112	; 0x70
 8001136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2302      	movs	r3, #2
 8001142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	4820      	ldr	r0, [pc, #128]	; (80011cc <MX_GPIO_Init+0x148>)
 800114c:	f000 fd6c 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_REDC5_Pin P_GREEN_Pin TL2_A_Pin TL2_B_Pin */
  GPIO_InitStruct.Pin = P_REDC5_Pin|P_GREEN_Pin|TL2_A_Pin|TL2_B_Pin;
 8001150:	f44f 6346 	mov.w	r3, #3168	; 0xc60
 8001154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2302      	movs	r3, #2
 8001160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	4619      	mov	r1, r3
 8001168:	4819      	ldr	r0, [pc, #100]	; (80011d0 <MX_GPIO_Init+0x14c>)
 800116a:	f000 fd5d 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL1_A_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = TL1_A_Pin|BUZZER_Pin;
 800116e:	f242 0301 	movw	r3, #8193	; 0x2001
 8001172:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2302      	movs	r3, #2
 800117e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	4813      	ldr	r0, [pc, #76]	; (80011d4 <MX_GPIO_Init+0x150>)
 8001188:	f000 fd4e 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : P_BTN_Pin */
  GPIO_InitStruct.Pin = P_BTN_Pin;
 800118c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(P_BTN_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4619      	mov	r1, r3
 80011a0:	480b      	ldr	r0, [pc, #44]	; (80011d0 <MX_GPIO_Init+0x14c>)
 80011a2:	f000 fd41 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_BTN_Pin */
  GPIO_InitStruct.Pin = SET_BTN_Pin;
 80011a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SET_BTN_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <MX_GPIO_Init+0x150>)
 80011bc:	f000 fd34 	bl	8001c28 <HAL_GPIO_Init>

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010800 	.word	0x40010800
 80011d0:	40011000 	.word	0x40011000
 80011d4:	40010c00 	.word	0x40010c00

080011d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80011e0:	f000 f836 	bl	8001250 <SCH_Update>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <readInputAndProcessing>:
void blinkingLED(void){
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
void readInputAndProcessing(void){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	handlePedestrianButton();
 80011f0:	f7ff fbe8 	bl	80009c4 <handlePedestrianButton>
	handleSelectModeButton();
 80011f4:	f7ff fbd8 	bl	80009a8 <handleSelectModeButton>
	handleModifyButton();
 80011f8:	f7ff fbae 	bl	8000958 <handleModifyButton>
	handleSetValueButton();
 80011fc:	f7ff fb9e 	bl	800093c <handleSetValueButton>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	e7fe      	b.n	800120c <Error_Handler+0x8>
	...

08001210 <SCH_Init>:
/*
 * For report error
 */
uint8_t errorCode;

void SCH_Init(void){
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	head_task 	= NULL;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <SCH_Init+0x2c>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
	time_skip 	= 0;
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <SCH_Init+0x30>)
 800121c:	2200      	movs	r2, #0
 800121e:	801a      	strh	r2, [r3, #0]
	count_task 	= 0;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <SCH_Init+0x34>)
 8001222:	2200      	movs	r2, #0
 8001224:	801a      	strh	r2, [r3, #0]
	next_id 	= 1;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <SCH_Init+0x38>)
 8001228:	2201      	movs	r2, #1
 800122a:	801a      	strh	r2, [r3, #0]
	errorCode	= 0;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <SCH_Init+0x3c>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	2000021c 	.word	0x2000021c
 8001240:	20000220 	.word	0x20000220
 8001244:	20000222 	.word	0x20000222
 8001248:	20000224 	.word	0x20000224
 800124c:	20000228 	.word	0x20000228

08001250 <SCH_Update>:

void SCH_Update(void){
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
	if (head_task == NULL) {
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <SCH_Update+0x80>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10c      	bne.n	8001278 <SCH_Update+0x28>
		 * This is for situation, you just have one task run.
		 * When task ran completely, it will dequeue, but at this time
		 * SCH_Update can be run, and if we not add 1 for time_skip
		 * instead of do nothing, your task will run wrong time.
		 */
		time_skip = (count_task > 0) ? time_skip + 1 : 0;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <SCH_Update+0x84>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d004      	beq.n	8001270 <SCH_Update+0x20>
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <SCH_Update+0x88>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	b29b      	uxth	r3, r3
 800126e:	e000      	b.n	8001272 <SCH_Update+0x22>
 8001270:	2300      	movs	r3, #0
 8001272:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <SCH_Update+0x88>)
 8001274:	8013      	strh	r3, [r2, #0]
		return;
 8001276:	e026      	b.n	80012c6 <SCH_Update+0x76>
	}
	time_skip++;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <SCH_Update+0x88>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <SCH_Update+0x88>)
 8001282:	801a      	strh	r2, [r3, #0]
	if (head_task->Delay > 0){
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <SCH_Update+0x80>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d01b      	beq.n	80012c6 <SCH_Update+0x76>
		int temp = head_task->Delay - time_skip;
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <SCH_Update+0x80>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <SCH_Update+0x88>)
 8001296:	8812      	ldrh	r2, [r2, #0]
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	607b      	str	r3, [r7, #4]
		if (temp >= 0) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db07      	blt.n	80012b2 <SCH_Update+0x62>
			head_task->Delay = temp;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <SCH_Update+0x80>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	605a      	str	r2, [r3, #4]
			time_skip = 0;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <SCH_Update+0x88>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	801a      	strh	r2, [r3, #0]
 80012b0:	e009      	b.n	80012c6 <SCH_Update+0x76>
		} else {
			head_task->Delay = 0;
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <SCH_Update+0x80>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
			time_skip = 0 - temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	425b      	negs	r3, r3
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SCH_Update+0x88>)
 80012c4:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000021c 	.word	0x2000021c
 80012d4:	20000222 	.word	0x20000222
 80012d8:	20000220 	.word	0x20000220

080012dc <Create_Task>:

sTask* Create_Task(void (*pFunc)(void), uint32_t Delay, uint32_t Period){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
	if (count_task > SCH_MAX_TASKS){
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <Create_Task+0x80>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	2b0a      	cmp	r3, #10
 80012ee:	d904      	bls.n	80012fa <Create_Task+0x1e>
		errorCode = ERROR_SCH_TOO_MANY_TASKS;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <Create_Task+0x84>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
		return NULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e02b      	b.n	8001352 <Create_Task+0x76>
	}
	uint16_t newId = next_id++;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <Create_Task+0x88>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	b291      	uxth	r1, r2
 8001302:	4a18      	ldr	r2, [pc, #96]	; (8001364 <Create_Task+0x88>)
 8001304:	8011      	strh	r1, [r2, #0]
 8001306:	82fb      	strh	r3, [r7, #22]

	Delay  /= TIMER_CYCLE;
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <Create_Task+0x8c>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	60bb      	str	r3, [r7, #8]
	Period /= TIMER_CYCLE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a14      	ldr	r2, [pc, #80]	; (8001368 <Create_Task+0x8c>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	607b      	str	r3, [r7, #4]

	sTask* newTask = malloc(sizeof(sTask));
 8001320:	2014      	movs	r0, #20
 8001322:	f002 fcf1 	bl	8003d08 <malloc>
 8001326:	4603      	mov	r3, r0
 8001328:	613b      	str	r3, [r7, #16]

	newTask->pFunc 		= pFunc;
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	601a      	str	r2, [r3, #0]
	newTask->Delay 		= Delay + time_skip;
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <Create_Task+0x90>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	441a      	add	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	605a      	str	r2, [r3, #4]
	newTask->Period	    = Period;
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	609a      	str	r2, [r3, #8]
	newTask->TaskID		= newId;
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	8afa      	ldrh	r2, [r7, #22]
 8001348:	819a      	strh	r2, [r3, #12]
	newTask->Next 		= NULL;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]

	return newTask;
 8001350:	693b      	ldr	r3, [r7, #16]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000222 	.word	0x20000222
 8001360:	20000228 	.word	0x20000228
 8001364:	20000224 	.word	0x20000224
 8001368:	cccccccd 	.word	0xcccccccd
 800136c:	20000220 	.word	0x20000220

08001370 <Enqueue_Task>:
 * Enqueue and modify Delay
 * Example: A->Delay = 1000, B->Delay = 2000, C->Delay = 3000
 * When we completely add all of them in queue, the queue will be
 * Element 1: A->Delay = 1000, Element 2: B->Delay = 1000, C->Delay = 1000
 */
sTask* Enqueue_Task(sTask* newTask){
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	//First task in queue.
	if (head_task == NULL){
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <Enqueue_Task+0xcc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d104      	bne.n	800138a <Enqueue_Task+0x1a>
		head_task = newTask;
 8001380:	4a2e      	ldr	r2, [pc, #184]	; (800143c <Enqueue_Task+0xcc>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
		return newTask;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	e052      	b.n	8001430 <Enqueue_Task+0xc0>
	}

	//Task will add at middle of queue.
	sTask *ini = head_task;
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <Enqueue_Task+0xcc>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	617b      	str	r3, [r7, #20]
	sTask *pre = NULL;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
	uint32_t sum = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
	while (ini != NULL){
 8001398:	e03a      	b.n	8001410 <Enqueue_Task+0xa0>
		if (sum + ini->Delay > newTask->Delay){
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	441a      	add	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d928      	bls.n	80013fc <Enqueue_Task+0x8c>
			if (ini == head_task){
 80013aa:	4b24      	ldr	r3, [pc, #144]	; (800143c <Enqueue_Task+0xcc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d10e      	bne.n	80013d2 <Enqueue_Task+0x62>
				newTask->Next = head_task;
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <Enqueue_Task+0xcc>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	611a      	str	r2, [r3, #16]
				head_task 	= newTask;
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <Enqueue_Task+0xcc>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
				ini->Delay -= newTask->Delay;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	1ad2      	subs	r2, r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	e012      	b.n	80013f8 <Enqueue_Task+0x88>
			} else {
				newTask->Next 	= ini;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	611a      	str	r2, [r3, #16]
				pre->Next 		= newTask;
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	611a      	str	r2, [r3, #16]
				newTask->Delay -= sum;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1ad2      	subs	r2, r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	605a      	str	r2, [r3, #4]
				ini->Delay     -= newTask->Delay;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	1ad2      	subs	r2, r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	605a      	str	r2, [r3, #4]
			}
			return newTask;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	e019      	b.n	8001430 <Enqueue_Task+0xc0>
		}
		sum 	+= ini->Delay;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
		pre		 = ini;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	613b      	str	r3, [r7, #16]
		ini		 = ini->Next;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	617b      	str	r3, [r7, #20]
	while (ini != NULL){
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1c1      	bne.n	800139a <Enqueue_Task+0x2a>
	}

	//Task will add of tail
	if (ini == NULL){
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d108      	bne.n	800142e <Enqueue_Task+0xbe>
		pre->Next 		= newTask;
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	611a      	str	r2, [r3, #16]
		newTask->Delay -= sum;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1ad2      	subs	r2, r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	605a      	str	r2, [r3, #4]
	}

	return newTask;
 800142e:	687b      	ldr	r3, [r7, #4]
}
 8001430:	4618      	mov	r0, r3
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000021c 	.word	0x2000021c

08001440 <SCH_Add_Task>:

sTask* SCH_Add_Task(void (*pFunc)(void), uint32_t Delay, uint32_t Period){
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
	sTask* newTask = Create_Task(pFunc, Delay, Period);
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	68b9      	ldr	r1, [r7, #8]
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f7ff ff43 	bl	80012dc <Create_Task>
 8001456:	6178      	str	r0, [r7, #20]
	if (newTask == NULL){
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <SCH_Add_Task+0x22>
		return NULL;
 800145e:	2300      	movs	r3, #0
 8001460:	e003      	b.n	800146a <SCH_Add_Task+0x2a>
	}
	return Enqueue_Task(newTask);
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff84 	bl	8001370 <Enqueue_Task>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <SCH_Dispatch_Tasks>:

/*
 * If no task run => return 0
 * task run => return 1
 */
uint8_t SCH_Dispatch_Tasks(void){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
	if (head_task == NULL || head_task->Delay > 0) return 0;
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <SCH_Dispatch_Tasks+0x68>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d004      	beq.n	800148c <SCH_Dispatch_Tasks+0x18>
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <SCH_Dispatch_Tasks+0x68>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SCH_Dispatch_Tasks+0x1c>
 800148c:	2300      	movs	r3, #0
 800148e:	e021      	b.n	80014d4 <SCH_Dispatch_Tasks+0x60>

	// Remove head task out of queue (dequeue, not delete)
	// and config delay then enqueue it again.
	sTask* runningTask = head_task;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <SCH_Dispatch_Tasks+0x68>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	607b      	str	r3, [r7, #4]
	head_task = head_task->Next;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <SCH_Dispatch_Tasks+0x68>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <SCH_Dispatch_Tasks+0x68>)
 800149e:	6013      	str	r3, [r2, #0]

	runningTask->Next 	= NULL;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
	runningTask->Delay 	= runningTask->Period;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	605a      	str	r2, [r3, #4]

	// Run task
	runningTask->pFunc();
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4798      	blx	r3
	// Save the task just ran
	TaskIdJustRun = runningTask->TaskID;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	899a      	ldrh	r2, [r3, #12]
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <SCH_Dispatch_Tasks+0x6c>)
 80014ba:	801a      	strh	r2, [r3, #0]

	// Add again if a task has period value isn't equal to 0.
	if (runningTask->Period != 0) Enqueue_Task(runningTask);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <SCH_Dispatch_Tasks+0x58>
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff53 	bl	8001370 <Enqueue_Task>
 80014ca:	e002      	b.n	80014d2 <SCH_Dispatch_Tasks+0x5e>
	else free(runningTask);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f002 fc23 	bl	8003d18 <free>

	return 1;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000021c 	.word	0x2000021c
 80014e0:	20000226 	.word	0x20000226

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_MspInit+0x5c>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	4a14      	ldr	r2, [pc, #80]	; (8001540 <HAL_MspInit+0x5c>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6193      	str	r3, [r2, #24]
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_MspInit+0x5c>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_MspInit+0x5c>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <HAL_MspInit+0x5c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	61d3      	str	r3, [r2, #28]
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_MspInit+0x5c>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_MspInit+0x60>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_MspInit+0x60>)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000

08001548 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_I2C_MspInit+0x74>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d124      	bne.n	80015b2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_I2C_MspInit+0x78>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <HAL_I2C_MspInit+0x78>)
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_I2C_MspInit+0x78>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001580:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001586:	2312      	movs	r3, #18
 8001588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	4619      	mov	r1, r3
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <HAL_I2C_MspInit+0x7c>)
 8001596:	f000 fb47 	bl	8001c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_I2C_MspInit+0x78>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <HAL_I2C_MspInit+0x78>)
 80015a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_I2C_MspInit+0x78>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	3720      	adds	r7, #32
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40005800 	.word	0x40005800
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010c00 	.word	0x40010c00

080015c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d8:	d113      	bne.n	8001602 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_TIM_Base_MspInit+0x44>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_TIM_Base_MspInit+0x44>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	61d3      	str	r3, [r2, #28]
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_TIM_Base_MspInit+0x44>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	201c      	movs	r0, #28
 80015f8:	f000 fadf 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015fc:	201c      	movs	r0, #28
 80015fe:	f000 faf8 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a15      	ldr	r2, [pc, #84]	; (8001680 <HAL_UART_MspInit+0x70>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d123      	bne.n	8001678 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_UART_MspInit+0x74>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	4a13      	ldr	r2, [pc, #76]	; (8001684 <HAL_UART_MspInit+0x74>)
 8001636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163a:	61d3      	str	r3, [r2, #28]
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_UART_MspInit+0x74>)
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_UART_MspInit+0x74>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_UART_MspInit+0x74>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_UART_MspInit+0x74>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001660:	230c      	movs	r3, #12
 8001662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2302      	movs	r3, #2
 800166a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <HAL_UART_MspInit+0x78>)
 8001674:	f000 fad8 	bl	8001c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001678:	bf00      	nop
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40004400 	.word	0x40004400
 8001684:	40021000 	.word	0x40021000
 8001688:	40010800 	.word	0x40010800

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <NMI_Handler+0x4>

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d2:	f000 f95b 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <TIM2_IRQHandler+0x10>)
 80016e2:	f001 fdbb 	bl	800325c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000018c 	.word	0x2000018c

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f002 fac8 	bl	8003cb4 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20005000 	.word	0x20005000
 8001750:	00000400 	.word	0x00000400
 8001754:	2000022c 	.word	0x2000022c
 8001758:	20000248 	.word	0x20000248

0800175c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <resetAllLED>:
const short TL_Pin[DIMENSION * 2] = {
		TL1_A_Pin, TL1_B_Pin,
		TL2_A_Pin, TL2_B_Pin
};

void resetAllLED(void){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL_GPIO[0], TL_Pin[0], RESET);
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <resetAllLED+0x4c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	b291      	uxth	r1, r2
 8001774:	2200      	movs	r2, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fbf1 	bl	8001f5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL_GPIO[1], TL_Pin[1], RESET);
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <resetAllLED+0x4c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2210      	movs	r2, #16
 8001782:	b291      	uxth	r1, r2
 8001784:	2200      	movs	r2, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f000 fbe9 	bl	8001f5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL_GPIO[2], TL_Pin[2], RESET);
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <resetAllLED+0x4c>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001794:	b291      	uxth	r1, r2
 8001796:	2200      	movs	r2, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fbe0 	bl	8001f5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL_GPIO[3], TL_Pin[3], RESET);
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <resetAllLED+0x4c>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a6:	b291      	uxth	r1, r2
 80017a8:	2200      	movs	r2, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fbd7 	bl	8001f5e <HAL_GPIO_WritePin>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000014 	.word	0x20000014

080017b8 <WritePinLED>:

void WritePinLED(const short index, uint8_t state){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	80fb      	strh	r3, [r7, #6]
 80017c4:	4613      	mov	r3, r2
 80017c6:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(TL_GPIO[index * 2 + 1], TL_Pin[index * 2 + 1], state & 1);
 80017c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	3301      	adds	r3, #1
 80017d0:	4a16      	ldr	r2, [pc, #88]	; (800182c <WritePinLED+0x74>)
 80017d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	3301      	adds	r3, #1
 80017de:	4a14      	ldr	r2, [pc, #80]	; (8001830 <WritePinLED+0x78>)
 80017e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017e4:	b299      	uxth	r1, r3
 80017e6:	797b      	ldrb	r3, [r7, #5]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	f000 fbb5 	bl	8001f5e <HAL_GPIO_WritePin>
	state >>= 1;
 80017f4:	797b      	ldrb	r3, [r7, #5]
 80017f6:	085b      	lsrs	r3, r3, #1
 80017f8:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(TL_GPIO[index * 2], TL_Pin[index * 2], state & 1);
 80017fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <WritePinLED+0x74>)
 8001802:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4a08      	ldr	r2, [pc, #32]	; (8001830 <WritePinLED+0x78>)
 800180e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001812:	b299      	uxth	r1, r3
 8001814:	797b      	ldrb	r3, [r7, #5]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	f000 fb9e 	bl	8001f5e <HAL_GPIO_WritePin>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000014 	.word	0x20000014
 8001830:	080046e4 	.word	0x080046e4

08001834 <TogglePinLED>:

//Depend on `state` parameter. If RED, blinking RED, so on.
void TogglePinLED(uint8_t state){
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	switch(state){
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d00f      	beq.n	8001864 <TogglePinLED+0x30>
 8001844:	2b03      	cmp	r3, #3
 8001846:	dc2a      	bgt.n	800189e <TogglePinLED+0x6a>
 8001848:	2b01      	cmp	r3, #1
 800184a:	d01e      	beq.n	800188a <TogglePinLED+0x56>
 800184c:	2b02      	cmp	r3, #2
 800184e:	d126      	bne.n	800189e <TogglePinLED+0x6a>
	case RED:
		HAL_GPIO_TogglePin(TL1_A_GPIO_Port, TL1_A_Pin);
 8001850:	2101      	movs	r1, #1
 8001852:	4815      	ldr	r0, [pc, #84]	; (80018a8 <TogglePinLED+0x74>)
 8001854:	f000 fb9b 	bl	8001f8e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TL2_A_GPIO_Port, TL2_A_Pin);
 8001858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800185c:	4813      	ldr	r0, [pc, #76]	; (80018ac <TogglePinLED+0x78>)
 800185e:	f000 fb96 	bl	8001f8e <HAL_GPIO_TogglePin>
		break;
 8001862:	e01c      	b.n	800189e <TogglePinLED+0x6a>
	case AMBER:
		HAL_GPIO_TogglePin(TL1_A_GPIO_Port, TL1_A_Pin);
 8001864:	2101      	movs	r1, #1
 8001866:	4810      	ldr	r0, [pc, #64]	; (80018a8 <TogglePinLED+0x74>)
 8001868:	f000 fb91 	bl	8001f8e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TL1_B_GPIO_Port, TL1_B_Pin);
 800186c:	2110      	movs	r1, #16
 800186e:	4810      	ldr	r0, [pc, #64]	; (80018b0 <TogglePinLED+0x7c>)
 8001870:	f000 fb8d 	bl	8001f8e <HAL_GPIO_TogglePin>

		HAL_GPIO_TogglePin(TL2_A_GPIO_Port, TL2_A_Pin);
 8001874:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <TogglePinLED+0x78>)
 800187a:	f000 fb88 	bl	8001f8e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TL2_B_GPIO_Port, TL2_B_Pin);
 800187e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001882:	480a      	ldr	r0, [pc, #40]	; (80018ac <TogglePinLED+0x78>)
 8001884:	f000 fb83 	bl	8001f8e <HAL_GPIO_TogglePin>
		break;
 8001888:	e009      	b.n	800189e <TogglePinLED+0x6a>
	case GREEN:
		HAL_GPIO_TogglePin(TL1_B_GPIO_Port, TL1_B_Pin);
 800188a:	2110      	movs	r1, #16
 800188c:	4808      	ldr	r0, [pc, #32]	; (80018b0 <TogglePinLED+0x7c>)
 800188e:	f000 fb7e 	bl	8001f8e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TL2_B_GPIO_Port, TL2_B_Pin);
 8001892:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <TogglePinLED+0x78>)
 8001898:	f000 fb79 	bl	8001f8e <HAL_GPIO_TogglePin>
 		break;
 800189c:	bf00      	nop
	}
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	40011000 	.word	0x40011000
 80018b0:	40010800 	.word	0x40010800

080018b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018b4:	f7ff ff52 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018ba:	490c      	ldr	r1, [pc, #48]	; (80018ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018bc:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018d0:	4c09      	ldr	r4, [pc, #36]	; (80018f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018de:	f002 f9ef 	bl	8003cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018e2:	f7ff fab9 	bl	8000e58 <main>
  bx lr
 80018e6:	4770      	bx	lr
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80018f0:	0800473c 	.word	0x0800473c
  ldr r2, =_sbss
 80018f4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80018f8:	20000244 	.word	0x20000244

080018fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC1_2_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_Init+0x28>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_Init+0x28>)
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001910:	2003      	movs	r0, #3
 8001912:	f000 f947 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001916:	2000      	movs	r0, #0
 8001918:	f000 f808 	bl	800192c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191c:	f7ff fde2 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40022000 	.word	0x40022000

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_InitTick+0x54>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_InitTick+0x58>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f95f 	bl	8001c0e <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f000 f927 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	; (8001988 <HAL_InitTick+0x5c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000010 	.word	0x20000010
 8001984:	20000028 	.word	0x20000028
 8001988:	20000024 	.word	0x20000024

0800198c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_IncTick+0x1c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_IncTick+0x20>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a03      	ldr	r2, [pc, #12]	; (80019ac <HAL_IncTick+0x20>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	20000028 	.word	0x20000028
 80019ac:	20000230 	.word	0x20000230

080019b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <HAL_GetTick+0x10>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	20000230 	.word	0x20000230

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff fff0 	bl	80019b0 <HAL_GetTick>
 80019d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d005      	beq.n	80019ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_Delay+0x44>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ea:	bf00      	nop
 80019ec:	f7ff ffe0 	bl	80019b0 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d8f7      	bhi.n	80019ec <HAL_Delay+0x28>
  {
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000028 	.word	0x20000028

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0b      	blt.n	8001a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4906      	ldr	r1, [pc, #24]	; (8001aa4 <__NVIC_EnableIRQ+0x34>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff90 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff2d 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff42 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff90 	bl	8001afc <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5f 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff35 	bl	8001a70 <__NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffa2 	bl	8001b60 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b08b      	sub	sp, #44	; 0x2c
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3a:	e169      	b.n	8001f10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	f040 8158 	bne.w	8001f0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4a9a      	ldr	r2, [pc, #616]	; (8001ec8 <HAL_GPIO_Init+0x2a0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d05e      	beq.n	8001d22 <HAL_GPIO_Init+0xfa>
 8001c64:	4a98      	ldr	r2, [pc, #608]	; (8001ec8 <HAL_GPIO_Init+0x2a0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d875      	bhi.n	8001d56 <HAL_GPIO_Init+0x12e>
 8001c6a:	4a98      	ldr	r2, [pc, #608]	; (8001ecc <HAL_GPIO_Init+0x2a4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d058      	beq.n	8001d22 <HAL_GPIO_Init+0xfa>
 8001c70:	4a96      	ldr	r2, [pc, #600]	; (8001ecc <HAL_GPIO_Init+0x2a4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d86f      	bhi.n	8001d56 <HAL_GPIO_Init+0x12e>
 8001c76:	4a96      	ldr	r2, [pc, #600]	; (8001ed0 <HAL_GPIO_Init+0x2a8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d052      	beq.n	8001d22 <HAL_GPIO_Init+0xfa>
 8001c7c:	4a94      	ldr	r2, [pc, #592]	; (8001ed0 <HAL_GPIO_Init+0x2a8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d869      	bhi.n	8001d56 <HAL_GPIO_Init+0x12e>
 8001c82:	4a94      	ldr	r2, [pc, #592]	; (8001ed4 <HAL_GPIO_Init+0x2ac>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d04c      	beq.n	8001d22 <HAL_GPIO_Init+0xfa>
 8001c88:	4a92      	ldr	r2, [pc, #584]	; (8001ed4 <HAL_GPIO_Init+0x2ac>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d863      	bhi.n	8001d56 <HAL_GPIO_Init+0x12e>
 8001c8e:	4a92      	ldr	r2, [pc, #584]	; (8001ed8 <HAL_GPIO_Init+0x2b0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d046      	beq.n	8001d22 <HAL_GPIO_Init+0xfa>
 8001c94:	4a90      	ldr	r2, [pc, #576]	; (8001ed8 <HAL_GPIO_Init+0x2b0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d85d      	bhi.n	8001d56 <HAL_GPIO_Init+0x12e>
 8001c9a:	2b12      	cmp	r3, #18
 8001c9c:	d82a      	bhi.n	8001cf4 <HAL_GPIO_Init+0xcc>
 8001c9e:	2b12      	cmp	r3, #18
 8001ca0:	d859      	bhi.n	8001d56 <HAL_GPIO_Init+0x12e>
 8001ca2:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <HAL_GPIO_Init+0x80>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001d23 	.word	0x08001d23
 8001cac:	08001cfd 	.word	0x08001cfd
 8001cb0:	08001d0f 	.word	0x08001d0f
 8001cb4:	08001d51 	.word	0x08001d51
 8001cb8:	08001d57 	.word	0x08001d57
 8001cbc:	08001d57 	.word	0x08001d57
 8001cc0:	08001d57 	.word	0x08001d57
 8001cc4:	08001d57 	.word	0x08001d57
 8001cc8:	08001d57 	.word	0x08001d57
 8001ccc:	08001d57 	.word	0x08001d57
 8001cd0:	08001d57 	.word	0x08001d57
 8001cd4:	08001d57 	.word	0x08001d57
 8001cd8:	08001d57 	.word	0x08001d57
 8001cdc:	08001d57 	.word	0x08001d57
 8001ce0:	08001d57 	.word	0x08001d57
 8001ce4:	08001d57 	.word	0x08001d57
 8001ce8:	08001d57 	.word	0x08001d57
 8001cec:	08001d05 	.word	0x08001d05
 8001cf0:	08001d19 	.word	0x08001d19
 8001cf4:	4a79      	ldr	r2, [pc, #484]	; (8001edc <HAL_GPIO_Init+0x2b4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cfa:	e02c      	b.n	8001d56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	623b      	str	r3, [r7, #32]
          break;
 8001d02:	e029      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	623b      	str	r3, [r7, #32]
          break;
 8001d0c:	e024      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	3308      	adds	r3, #8
 8001d14:	623b      	str	r3, [r7, #32]
          break;
 8001d16:	e01f      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	330c      	adds	r3, #12
 8001d1e:	623b      	str	r3, [r7, #32]
          break;
 8001d20:	e01a      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d102      	bne.n	8001d30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	623b      	str	r3, [r7, #32]
          break;
 8001d2e:	e013      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d105      	bne.n	8001d44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d38:	2308      	movs	r3, #8
 8001d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	611a      	str	r2, [r3, #16]
          break;
 8001d42:	e009      	b.n	8001d58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d44:	2308      	movs	r3, #8
 8001d46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	615a      	str	r2, [r3, #20]
          break;
 8001d4e:	e003      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
          break;
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_Init+0x130>
          break;
 8001d56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2bff      	cmp	r3, #255	; 0xff
 8001d5c:	d801      	bhi.n	8001d62 <HAL_GPIO_Init+0x13a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	e001      	b.n	8001d66 <HAL_GPIO_Init+0x13e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3304      	adds	r3, #4
 8001d66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2bff      	cmp	r3, #255	; 0xff
 8001d6c:	d802      	bhi.n	8001d74 <HAL_GPIO_Init+0x14c>
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	e002      	b.n	8001d7a <HAL_GPIO_Init+0x152>
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	3b08      	subs	r3, #8
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	210f      	movs	r1, #15
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	6a39      	ldr	r1, [r7, #32]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	431a      	orrs	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 80b1 	beq.w	8001f0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001da8:	4b4d      	ldr	r3, [pc, #308]	; (8001ee0 <HAL_GPIO_Init+0x2b8>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a4c      	ldr	r2, [pc, #304]	; (8001ee0 <HAL_GPIO_Init+0x2b8>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b4a      	ldr	r3, [pc, #296]	; (8001ee0 <HAL_GPIO_Init+0x2b8>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dc0:	4a48      	ldr	r2, [pc, #288]	; (8001ee4 <HAL_GPIO_Init+0x2bc>)
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	220f      	movs	r2, #15
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a40      	ldr	r2, [pc, #256]	; (8001ee8 <HAL_GPIO_Init+0x2c0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d013      	beq.n	8001e14 <HAL_GPIO_Init+0x1ec>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a3f      	ldr	r2, [pc, #252]	; (8001eec <HAL_GPIO_Init+0x2c4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d00d      	beq.n	8001e10 <HAL_GPIO_Init+0x1e8>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a3e      	ldr	r2, [pc, #248]	; (8001ef0 <HAL_GPIO_Init+0x2c8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d007      	beq.n	8001e0c <HAL_GPIO_Init+0x1e4>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a3d      	ldr	r2, [pc, #244]	; (8001ef4 <HAL_GPIO_Init+0x2cc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d101      	bne.n	8001e08 <HAL_GPIO_Init+0x1e0>
 8001e04:	2303      	movs	r3, #3
 8001e06:	e006      	b.n	8001e16 <HAL_GPIO_Init+0x1ee>
 8001e08:	2304      	movs	r3, #4
 8001e0a:	e004      	b.n	8001e16 <HAL_GPIO_Init+0x1ee>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e002      	b.n	8001e16 <HAL_GPIO_Init+0x1ee>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_GPIO_Init+0x1ee>
 8001e14:	2300      	movs	r3, #0
 8001e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e18:	f002 0203 	and.w	r2, r2, #3
 8001e1c:	0092      	lsls	r2, r2, #2
 8001e1e:	4093      	lsls	r3, r2
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e26:	492f      	ldr	r1, [pc, #188]	; (8001ee4 <HAL_GPIO_Init+0x2bc>)
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e40:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	492c      	ldr	r1, [pc, #176]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]
 8001e4c:	e006      	b.n	8001e5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	4928      	ldr	r1, [pc, #160]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e68:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	4922      	ldr	r1, [pc, #136]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60cb      	str	r3, [r1, #12]
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	491e      	ldr	r1, [pc, #120]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	4918      	ldr	r1, [pc, #96]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	4914      	ldr	r1, [pc, #80]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d021      	beq.n	8001efc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	490e      	ldr	r1, [pc, #56]	; (8001ef8 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
 8001ec4:	e021      	b.n	8001f0a <HAL_GPIO_Init+0x2e2>
 8001ec6:	bf00      	nop
 8001ec8:	10320000 	.word	0x10320000
 8001ecc:	10310000 	.word	0x10310000
 8001ed0:	10220000 	.word	0x10220000
 8001ed4:	10210000 	.word	0x10210000
 8001ed8:	10120000 	.word	0x10120000
 8001edc:	10110000 	.word	0x10110000
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40010800 	.word	0x40010800
 8001eec:	40010c00 	.word	0x40010c00
 8001ef0:	40011000 	.word	0x40011000
 8001ef4:	40011400 	.word	0x40011400
 8001ef8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_GPIO_Init+0x304>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	4909      	ldr	r1, [pc, #36]	; (8001f2c <HAL_GPIO_Init+0x304>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f47f ae8e 	bne.w	8001c3c <HAL_GPIO_Init+0x14>
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	372c      	adds	r7, #44	; 0x2c
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	40010400 	.word	0x40010400

08001f30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	e001      	b.n	8001f52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	807b      	strh	r3, [r7, #2]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f6e:	787b      	ldrb	r3, [r7, #1]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f74:	887a      	ldrh	r2, [r7, #2]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f7a:	e003      	b.n	8001f84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f7c:	887b      	ldrh	r3, [r7, #2]
 8001f7e:	041a      	lsls	r2, r3, #16
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	611a      	str	r2, [r3, #16]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fa0:	887a      	ldrh	r2, [r7, #2]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	041a      	lsls	r2, r3, #16
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	400b      	ands	r3, r1
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	611a      	str	r2, [r3, #16]
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e12b      	b.n	800222a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff faae 	bl	8001548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2224      	movs	r2, #36	; 0x24
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002024:	f001 f832 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8002028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a81      	ldr	r2, [pc, #516]	; (8002234 <HAL_I2C_Init+0x274>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d807      	bhi.n	8002044 <HAL_I2C_Init+0x84>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a80      	ldr	r2, [pc, #512]	; (8002238 <HAL_I2C_Init+0x278>)
 8002038:	4293      	cmp	r3, r2
 800203a:	bf94      	ite	ls
 800203c:	2301      	movls	r3, #1
 800203e:	2300      	movhi	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	e006      	b.n	8002052 <HAL_I2C_Init+0x92>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a7d      	ldr	r2, [pc, #500]	; (800223c <HAL_I2C_Init+0x27c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	bf94      	ite	ls
 800204c:	2301      	movls	r3, #1
 800204e:	2300      	movhi	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0e7      	b.n	800222a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4a78      	ldr	r2, [pc, #480]	; (8002240 <HAL_I2C_Init+0x280>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	0c9b      	lsrs	r3, r3, #18
 8002064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	430a      	orrs	r2, r1
 8002078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a6a      	ldr	r2, [pc, #424]	; (8002234 <HAL_I2C_Init+0x274>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d802      	bhi.n	8002094 <HAL_I2C_Init+0xd4>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3301      	adds	r3, #1
 8002092:	e009      	b.n	80020a8 <HAL_I2C_Init+0xe8>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	4a69      	ldr	r2, [pc, #420]	; (8002244 <HAL_I2C_Init+0x284>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	3301      	adds	r3, #1
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	495c      	ldr	r1, [pc, #368]	; (8002234 <HAL_I2C_Init+0x274>)
 80020c4:	428b      	cmp	r3, r1
 80020c6:	d819      	bhi.n	80020fc <HAL_I2C_Init+0x13c>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1e59      	subs	r1, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d6:	1c59      	adds	r1, r3, #1
 80020d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020dc:	400b      	ands	r3, r1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_I2C_Init+0x138>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1e59      	subs	r1, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f6:	e051      	b.n	800219c <HAL_I2C_Init+0x1dc>
 80020f8:	2304      	movs	r3, #4
 80020fa:	e04f      	b.n	800219c <HAL_I2C_Init+0x1dc>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d111      	bne.n	8002128 <HAL_I2C_Init+0x168>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1e58      	subs	r0, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	440b      	add	r3, r1
 8002112:	fbb0 f3f3 	udiv	r3, r0, r3
 8002116:	3301      	adds	r3, #1
 8002118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e012      	b.n	800214e <HAL_I2C_Init+0x18e>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1e58      	subs	r0, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	0099      	lsls	r1, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	fbb0 f3f3 	udiv	r3, r0, r3
 800213e:	3301      	adds	r3, #1
 8002140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_Init+0x196>
 8002152:	2301      	movs	r3, #1
 8002154:	e022      	b.n	800219c <HAL_I2C_Init+0x1dc>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10e      	bne.n	800217c <HAL_I2C_Init+0x1bc>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1e58      	subs	r0, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6859      	ldr	r1, [r3, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	440b      	add	r3, r1
 800216c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002170:	3301      	adds	r3, #1
 8002172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217a:	e00f      	b.n	800219c <HAL_I2C_Init+0x1dc>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1e58      	subs	r0, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	0099      	lsls	r1, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002192:	3301      	adds	r3, #1
 8002194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	6809      	ldr	r1, [r1, #0]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6911      	ldr	r1, [r2, #16]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68d2      	ldr	r2, [r2, #12]
 80021d6:	4311      	orrs	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	430b      	orrs	r3, r1
 80021de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	000186a0 	.word	0x000186a0
 8002238:	001e847f 	.word	0x001e847f
 800223c:	003d08ff 	.word	0x003d08ff
 8002240:	431bde83 	.word	0x431bde83
 8002244:	10624dd3 	.word	0x10624dd3

08002248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	461a      	mov	r2, r3
 8002254:	460b      	mov	r3, r1
 8002256:	817b      	strh	r3, [r7, #10]
 8002258:	4613      	mov	r3, r2
 800225a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff fba8 	bl	80019b0 <HAL_GetTick>
 8002260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b20      	cmp	r3, #32
 800226c:	f040 80e0 	bne.w	8002430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2319      	movs	r3, #25
 8002276:	2201      	movs	r2, #1
 8002278:	4970      	ldr	r1, [pc, #448]	; (800243c <HAL_I2C_Master_Transmit+0x1f4>)
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f964 	bl	8002548 <I2C_WaitOnFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
 8002288:	e0d3      	b.n	8002432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_I2C_Master_Transmit+0x50>
 8002294:	2302      	movs	r3, #2
 8002296:	e0cc      	b.n	8002432 <HAL_I2C_Master_Transmit+0x1ea>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d007      	beq.n	80022be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2221      	movs	r2, #33	; 0x21
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2210      	movs	r2, #16
 80022da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	893a      	ldrh	r2, [r7, #8]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a50      	ldr	r2, [pc, #320]	; (8002440 <HAL_I2C_Master_Transmit+0x1f8>)
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002300:	8979      	ldrh	r1, [r7, #10]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	6a3a      	ldr	r2, [r7, #32]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f89c 	bl	8002444 <I2C_MasterRequestWrite>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e08d      	b.n	8002432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800232c:	e066      	b.n	80023fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	6a39      	ldr	r1, [r7, #32]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fa22 	bl	800277c <I2C_WaitOnTXEFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00d      	beq.n	800235a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	2b04      	cmp	r3, #4
 8002344:	d107      	bne.n	8002356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06b      	b.n	8002432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b04      	cmp	r3, #4
 8002396:	d11b      	bne.n	80023d0 <HAL_I2C_Master_Transmit+0x188>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	d017      	beq.n	80023d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	6a39      	ldr	r1, [r7, #32]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 fa19 	bl	800280c <I2C_WaitOnBTFFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00d      	beq.n	80023fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d107      	bne.n	80023f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e01a      	b.n	8002432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	d194      	bne.n	800232e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002430:	2302      	movs	r3, #2
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	00100002 	.word	0x00100002
 8002440:	ffff0000 	.word	0xffff0000

08002444 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	460b      	mov	r3, r1
 8002452:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b08      	cmp	r3, #8
 800245e:	d006      	beq.n	800246e <I2C_MasterRequestWrite+0x2a>
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d003      	beq.n	800246e <I2C_MasterRequestWrite+0x2a>
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800246c:	d108      	bne.n	8002480 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e00b      	b.n	8002498 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	2b12      	cmp	r3, #18
 8002486:	d107      	bne.n	8002498 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002496:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f84f 	bl	8002548 <I2C_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024be:	d103      	bne.n	80024c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e035      	b.n	8002538 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024d4:	d108      	bne.n	80024e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024d6:	897b      	ldrh	r3, [r7, #10]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024e4:	611a      	str	r2, [r3, #16]
 80024e6:	e01b      	b.n	8002520 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024e8:	897b      	ldrh	r3, [r7, #10]
 80024ea:	11db      	asrs	r3, r3, #7
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f003 0306 	and.w	r3, r3, #6
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f063 030f 	orn	r3, r3, #15
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	490e      	ldr	r1, [pc, #56]	; (8002540 <I2C_MasterRequestWrite+0xfc>)
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f898 	bl	800263c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e010      	b.n	8002538 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002516:	897b      	ldrh	r3, [r7, #10]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4907      	ldr	r1, [pc, #28]	; (8002544 <I2C_MasterRequestWrite+0x100>)
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f888 	bl	800263c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	00010008 	.word	0x00010008
 8002544:	00010002 	.word	0x00010002

08002548 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002558:	e048      	b.n	80025ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d044      	beq.n	80025ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002562:	f7ff fa25 	bl	80019b0 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d302      	bcc.n	8002578 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d139      	bne.n	80025ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	0c1b      	lsrs	r3, r3, #16
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d10d      	bne.n	800259e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	43da      	mvns	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4013      	ands	r3, r2
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	e00c      	b.n	80025b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	43da      	mvns	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4013      	ands	r3, r2
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d116      	bne.n	80025ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e023      	b.n	8002634 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	0c1b      	lsrs	r3, r3, #16
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d10d      	bne.n	8002612 <I2C_WaitOnFlagUntilTimeout+0xca>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	43da      	mvns	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4013      	ands	r3, r2
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	e00c      	b.n	800262c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	43da      	mvns	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4013      	ands	r3, r2
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	429a      	cmp	r2, r3
 8002630:	d093      	beq.n	800255a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800264a:	e071      	b.n	8002730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265a:	d123      	bne.n	80026a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002674:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f043 0204 	orr.w	r2, r3, #4
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e067      	b.n	8002774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026aa:	d041      	beq.n	8002730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ac:	f7ff f980 	bl	80019b0 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d302      	bcc.n	80026c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d136      	bne.n	8002730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	0c1b      	lsrs	r3, r3, #16
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d10c      	bne.n	80026e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4013      	ands	r3, r2
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bf14      	ite	ne
 80026de:	2301      	movne	r3, #1
 80026e0:	2300      	moveq	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	e00b      	b.n	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	43da      	mvns	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	4013      	ands	r3, r2
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf14      	ite	ne
 80026f8:	2301      	movne	r3, #1
 80026fa:	2300      	moveq	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d016      	beq.n	8002730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f043 0220 	orr.w	r2, r3, #32
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e021      	b.n	8002774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	0c1b      	lsrs	r3, r3, #16
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d10c      	bne.n	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	43da      	mvns	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	4013      	ands	r3, r2
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf14      	ite	ne
 800274c:	2301      	movne	r3, #1
 800274e:	2300      	moveq	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e00b      	b.n	800276c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	43da      	mvns	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4013      	ands	r3, r2
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf14      	ite	ne
 8002766:	2301      	movne	r3, #1
 8002768:	2300      	moveq	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	f47f af6d 	bne.w	800264c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002788:	e034      	b.n	80027f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f886 	bl	800289c <I2C_IsAcknowledgeFailed>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e034      	b.n	8002804 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d028      	beq.n	80027f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a2:	f7ff f905 	bl	80019b0 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d302      	bcc.n	80027b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d11d      	bne.n	80027f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c2:	2b80      	cmp	r3, #128	; 0x80
 80027c4:	d016      	beq.n	80027f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e007      	b.n	8002804 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b80      	cmp	r3, #128	; 0x80
 8002800:	d1c3      	bne.n	800278a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002818:	e034      	b.n	8002884 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f83e 	bl	800289c <I2C_IsAcknowledgeFailed>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e034      	b.n	8002894 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d028      	beq.n	8002884 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002832:	f7ff f8bd 	bl	80019b0 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	429a      	cmp	r2, r3
 8002840:	d302      	bcc.n	8002848 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d11d      	bne.n	8002884 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b04      	cmp	r3, #4
 8002854:	d016      	beq.n	8002884 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f043 0220 	orr.w	r2, r3, #32
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e007      	b.n	8002894 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b04      	cmp	r3, #4
 8002890:	d1c3      	bne.n	800281a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b2:	d11b      	bne.n	80028ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f043 0204 	orr.w	r2, r3, #4
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e272      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8087 	beq.w	8002a26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002918:	4b92      	ldr	r3, [pc, #584]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b04      	cmp	r3, #4
 8002922:	d00c      	beq.n	800293e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002924:	4b8f      	ldr	r3, [pc, #572]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b08      	cmp	r3, #8
 800292e:	d112      	bne.n	8002956 <HAL_RCC_OscConfig+0x5e>
 8002930:	4b8c      	ldr	r3, [pc, #560]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293c:	d10b      	bne.n	8002956 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293e:	4b89      	ldr	r3, [pc, #548]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d06c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x12c>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d168      	bne.n	8002a24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e24c      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x76>
 8002960:	4b80      	ldr	r3, [pc, #512]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a7f      	ldr	r2, [pc, #508]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e02e      	b.n	80029cc <HAL_RCC_OscConfig+0xd4>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x98>
 8002976:	4b7b      	ldr	r3, [pc, #492]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a7a      	ldr	r2, [pc, #488]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 800297c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b78      	ldr	r3, [pc, #480]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a77      	ldr	r2, [pc, #476]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e01d      	b.n	80029cc <HAL_RCC_OscConfig+0xd4>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0xbc>
 800299a:	4b72      	ldr	r3, [pc, #456]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a71      	ldr	r2, [pc, #452]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b6f      	ldr	r3, [pc, #444]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a6e      	ldr	r2, [pc, #440]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0xd4>
 80029b4:	4b6b      	ldr	r3, [pc, #428]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a6a      	ldr	r2, [pc, #424]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b68      	ldr	r3, [pc, #416]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a67      	ldr	r2, [pc, #412]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe ffec 	bl	80019b0 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029dc:	f7fe ffe8 	bl	80019b0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e200      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b5d      	ldr	r3, [pc, #372]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0xe4>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7fe ffd8 	bl	80019b0 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a04:	f7fe ffd4 	bl	80019b0 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1ec      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x10c>
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d063      	beq.n	8002afa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a32:	4b4c      	ldr	r3, [pc, #304]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a3e:	4b49      	ldr	r3, [pc, #292]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d11c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x18c>
 8002a4a:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_RCC_OscConfig+0x176>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e1c0      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6e:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4939      	ldr	r1, [pc, #228]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	e03a      	b.n	8002afa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7fe ff8d 	bl	80019b0 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7fe ff89 	bl	80019b0 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e1a1      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aac:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab8:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4927      	ldr	r1, [pc, #156]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
 8002acc:	e015      	b.n	8002afa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe ff6c 	bl	80019b0 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002adc:	f7fe ff68 	bl	80019b0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e180      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d03a      	beq.n	8002b7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d019      	beq.n	8002b42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b0e:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b14:	f7fe ff4c 	bl	80019b0 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1c:	f7fe ff48 	bl	80019b0 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e160      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f000 face 	bl	80030dc <RCC_Delay>
 8002b40:	e01c      	b.n	8002b7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7fe ff32 	bl	80019b0 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4e:	e00f      	b.n	8002b70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b50:	f7fe ff2e 	bl	80019b0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d908      	bls.n	8002b70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e146      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	42420000 	.word	0x42420000
 8002b6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b70:	4b92      	ldr	r3, [pc, #584]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e9      	bne.n	8002b50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80a6 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8e:	4b8b      	ldr	r3, [pc, #556]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10d      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9a:	4b88      	ldr	r3, [pc, #544]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	4a87      	ldr	r2, [pc, #540]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	61d3      	str	r3, [r2, #28]
 8002ba6:	4b85      	ldr	r3, [pc, #532]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb6:	4b82      	ldr	r3, [pc, #520]	; (8002dc0 <HAL_RCC_OscConfig+0x4c8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d118      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc2:	4b7f      	ldr	r3, [pc, #508]	; (8002dc0 <HAL_RCC_OscConfig+0x4c8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a7e      	ldr	r2, [pc, #504]	; (8002dc0 <HAL_RCC_OscConfig+0x4c8>)
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bce:	f7fe feef 	bl	80019b0 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd6:	f7fe feeb 	bl	80019b0 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b64      	cmp	r3, #100	; 0x64
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e103      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	4b75      	ldr	r3, [pc, #468]	; (8002dc0 <HAL_RCC_OscConfig+0x4c8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x312>
 8002bfc:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6213      	str	r3, [r2, #32]
 8002c08:	e02d      	b.n	8002c66 <HAL_RCC_OscConfig+0x36e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x334>
 8002c12:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4a69      	ldr	r2, [pc, #420]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	6213      	str	r3, [r2, #32]
 8002c1e:	4b67      	ldr	r3, [pc, #412]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4a66      	ldr	r2, [pc, #408]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	f023 0304 	bic.w	r3, r3, #4
 8002c28:	6213      	str	r3, [r2, #32]
 8002c2a:	e01c      	b.n	8002c66 <HAL_RCC_OscConfig+0x36e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	d10c      	bne.n	8002c4e <HAL_RCC_OscConfig+0x356>
 8002c34:	4b61      	ldr	r3, [pc, #388]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4a60      	ldr	r2, [pc, #384]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	f043 0304 	orr.w	r3, r3, #4
 8002c3e:	6213      	str	r3, [r2, #32]
 8002c40:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	4a5d      	ldr	r2, [pc, #372]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	6213      	str	r3, [r2, #32]
 8002c4c:	e00b      	b.n	8002c66 <HAL_RCC_OscConfig+0x36e>
 8002c4e:	4b5b      	ldr	r3, [pc, #364]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4a5a      	ldr	r2, [pc, #360]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	6213      	str	r3, [r2, #32]
 8002c5a:	4b58      	ldr	r3, [pc, #352]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4a57      	ldr	r2, [pc, #348]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d015      	beq.n	8002c9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fe9f 	bl	80019b0 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7fe fe9b 	bl	80019b0 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e0b1      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8c:	4b4b      	ldr	r3, [pc, #300]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ee      	beq.n	8002c76 <HAL_RCC_OscConfig+0x37e>
 8002c98:	e014      	b.n	8002cc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fe89 	bl	80019b0 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7fe fe85 	bl	80019b0 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e09b      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb8:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ee      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d105      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cca:	4b3c      	ldr	r3, [pc, #240]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	4a3b      	ldr	r2, [pc, #236]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8087 	beq.w	8002dee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ce0:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d061      	beq.n	8002db0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d146      	bne.n	8002d82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf4:	4b33      	ldr	r3, [pc, #204]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fe59 	bl	80019b0 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d02:	f7fe fe55 	bl	80019b0 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e06d      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d14:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d28:	d108      	bne.n	8002d3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d2a:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4921      	ldr	r1, [pc, #132]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a19      	ldr	r1, [r3, #32]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	491b      	ldr	r1, [pc, #108]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5a:	f7fe fe29 	bl	80019b0 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d62:	f7fe fe25 	bl	80019b0 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e03d      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x46a>
 8002d80:	e035      	b.n	8002dee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe fe12 	bl	80019b0 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe fe0e 	bl	80019b0 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e026      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x498>
 8002dae:	e01e      	b.n	8002dee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e019      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_OscConfig+0x500>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d106      	bne.n	8002dea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0d0      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e10:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d910      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 0207 	bic.w	r2, r3, #7
 8002e26:	4965      	ldr	r1, [pc, #404]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b63      	ldr	r3, [pc, #396]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b8      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a58      	ldr	r2, [pc, #352]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e70:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	494d      	ldr	r1, [pc, #308]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d040      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d115      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eba:	4b41      	ldr	r3, [pc, #260]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e073      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eca:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06b      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eda:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f023 0203 	bic.w	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4936      	ldr	r1, [pc, #216]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eec:	f7fe fd60 	bl	80019b0 <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef4:	f7fe fd5c 	bl	80019b0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e053      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 020c 	and.w	r2, r3, #12
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d1eb      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d210      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 0207 	bic.w	r2, r3, #7
 8002f32:	4922      	ldr	r1, [pc, #136]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e032      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4916      	ldr	r1, [pc, #88]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	490e      	ldr	r1, [pc, #56]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f821 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	490a      	ldr	r1, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	5ccb      	ldrb	r3, [r1, r3]
 8002f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1cc>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCC_ClockConfig+0x1d0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe fcbe 	bl	800192c <HAL_InitTick>

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	080046cc 	.word	0x080046cc
 8002fc8:	20000010 	.word	0x20000010
 8002fcc:	20000024 	.word	0x20000024

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fea:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d002      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x30>
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d003      	beq.n	8003006 <HAL_RCC_GetSysClockFreq+0x36>
 8002ffe:	e027      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_RCC_GetSysClockFreq+0x98>)
 8003002:	613b      	str	r3, [r7, #16]
      break;
 8003004:	e027      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	0c9b      	lsrs	r3, r3, #18
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	4a17      	ldr	r2, [pc, #92]	; (800306c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003010:	5cd3      	ldrb	r3, [r2, r3]
 8003012:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d010      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800301e:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_RCC_GetSysClockFreq+0x94>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	0c5b      	lsrs	r3, r3, #17
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	4a11      	ldr	r2, [pc, #68]	; (8003070 <HAL_RCC_GetSysClockFreq+0xa0>)
 800302a:	5cd3      	ldrb	r3, [r2, r3]
 800302c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a0d      	ldr	r2, [pc, #52]	; (8003068 <HAL_RCC_GetSysClockFreq+0x98>)
 8003032:	fb03 f202 	mul.w	r2, r3, r2
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	e004      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a0c      	ldr	r2, [pc, #48]	; (8003074 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003044:	fb02 f303 	mul.w	r3, r2, r3
 8003048:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	613b      	str	r3, [r7, #16]
      break;
 800304e:	e002      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetSysClockFreq+0x98>)
 8003052:	613b      	str	r3, [r7, #16]
      break;
 8003054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003056:	693b      	ldr	r3, [r7, #16]
}
 8003058:	4618      	mov	r0, r3
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	007a1200 	.word	0x007a1200
 800306c:	080046ec 	.word	0x080046ec
 8003070:	080046fc 	.word	0x080046fc
 8003074:	003d0900 	.word	0x003d0900

08003078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800307c:	4b02      	ldr	r3, [pc, #8]	; (8003088 <HAL_RCC_GetHCLKFreq+0x10>)
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	20000010 	.word	0x20000010

0800308c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003090:	f7ff fff2 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4903      	ldr	r1, [pc, #12]	; (80030b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000
 80030b0:	080046dc 	.word	0x080046dc

080030b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030b8:	f7ff ffde 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	0adb      	lsrs	r3, r3, #11
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4903      	ldr	r1, [pc, #12]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000
 80030d8:	080046dc 	.word	0x080046dc

080030dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <RCC_Delay+0x34>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <RCC_Delay+0x38>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0a5b      	lsrs	r3, r3, #9
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030f8:	bf00      	nop
  }
  while (Delay --);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1e5a      	subs	r2, r3, #1
 80030fe:	60fa      	str	r2, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f9      	bne.n	80030f8 <RCC_Delay+0x1c>
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	20000010 	.word	0x20000010
 8003114:	10624dd3 	.word	0x10624dd3

08003118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e041      	b.n	80031ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe fa42 	bl	80015c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	4619      	mov	r1, r3
 8003156:	4610      	mov	r0, r2
 8003158:	f000 fa74 	bl	8003644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d001      	beq.n	80031d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e03a      	b.n	8003246 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a18      	ldr	r2, [pc, #96]	; (8003250 <HAL_TIM_Base_Start_IT+0x98>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00e      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x58>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fa:	d009      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x58>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a14      	ldr	r2, [pc, #80]	; (8003254 <HAL_TIM_Base_Start_IT+0x9c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x58>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a13      	ldr	r2, [pc, #76]	; (8003258 <HAL_TIM_Base_Start_IT+0xa0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d111      	bne.n	8003234 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b06      	cmp	r3, #6
 8003220:	d010      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003232:	e007      	b.n	8003244 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800

0800325c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b02      	cmp	r3, #2
 8003270:	d122      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b02      	cmp	r3, #2
 800327e:	d11b      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0202 	mvn.w	r2, #2
 8003288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f9b4 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 80032a4:	e005      	b.n	80032b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f9a7 	bl	80035fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f9b6 	bl	800361e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d122      	bne.n	800330c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d11b      	bne.n	800330c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0204 	mvn.w	r2, #4
 80032dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f98a 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 80032f8:	e005      	b.n	8003306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f97d 	bl	80035fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f98c 	bl	800361e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b08      	cmp	r3, #8
 8003318:	d122      	bne.n	8003360 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b08      	cmp	r3, #8
 8003326:	d11b      	bne.n	8003360 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0208 	mvn.w	r2, #8
 8003330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2204      	movs	r2, #4
 8003336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f960 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f953 	bl	80035fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f962 	bl	800361e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b10      	cmp	r3, #16
 800336c:	d122      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b10      	cmp	r3, #16
 800337a:	d11b      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0210 	mvn.w	r2, #16
 8003384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2208      	movs	r2, #8
 800338a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f936 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 80033a0:	e005      	b.n	80033ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f929 	bl	80035fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f938 	bl	800361e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10e      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d107      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0201 	mvn.w	r2, #1
 80033d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd fefc 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ea:	2b80      	cmp	r3, #128	; 0x80
 80033ec:	d10e      	bne.n	800340c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	2b80      	cmp	r3, #128	; 0x80
 80033fa:	d107      	bne.n	800340c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fa7b 	bl	8003902 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003416:	2b40      	cmp	r3, #64	; 0x40
 8003418:	d10e      	bne.n	8003438 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003424:	2b40      	cmp	r3, #64	; 0x40
 8003426:	d107      	bne.n	8003438 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f8fc 	bl	8003630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b20      	cmp	r3, #32
 8003444:	d10e      	bne.n	8003464 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b20      	cmp	r3, #32
 8003452:	d107      	bne.n	8003464 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0220 	mvn.w	r2, #32
 800345c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fa46 	bl	80038f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_TIM_ConfigClockSource+0x1c>
 8003484:	2302      	movs	r3, #2
 8003486:	e0b4      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x186>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c0:	d03e      	beq.n	8003540 <HAL_TIM_ConfigClockSource+0xd4>
 80034c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c6:	f200 8087 	bhi.w	80035d8 <HAL_TIM_ConfigClockSource+0x16c>
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ce:	f000 8086 	beq.w	80035de <HAL_TIM_ConfigClockSource+0x172>
 80034d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d6:	d87f      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x16c>
 80034d8:	2b70      	cmp	r3, #112	; 0x70
 80034da:	d01a      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0xa6>
 80034dc:	2b70      	cmp	r3, #112	; 0x70
 80034de:	d87b      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x16c>
 80034e0:	2b60      	cmp	r3, #96	; 0x60
 80034e2:	d050      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x11a>
 80034e4:	2b60      	cmp	r3, #96	; 0x60
 80034e6:	d877      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x16c>
 80034e8:	2b50      	cmp	r3, #80	; 0x50
 80034ea:	d03c      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0xfa>
 80034ec:	2b50      	cmp	r3, #80	; 0x50
 80034ee:	d873      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x16c>
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d058      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x13a>
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d86f      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x16c>
 80034f8:	2b30      	cmp	r3, #48	; 0x30
 80034fa:	d064      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x15a>
 80034fc:	2b30      	cmp	r3, #48	; 0x30
 80034fe:	d86b      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003500:	2b20      	cmp	r3, #32
 8003502:	d060      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003504:	2b20      	cmp	r3, #32
 8003506:	d867      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d05c      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x15a>
 800350c:	2b10      	cmp	r3, #16
 800350e:	d05a      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003510:	e062      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6899      	ldr	r1, [r3, #8]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f000 f968 	bl	80037f6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003534:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	609a      	str	r2, [r3, #8]
      break;
 800353e:	e04f      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6899      	ldr	r1, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f000 f951 	bl	80037f6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003562:	609a      	str	r2, [r3, #8]
      break;
 8003564:	e03c      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6859      	ldr	r1, [r3, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	461a      	mov	r2, r3
 8003574:	f000 f8c8 	bl	8003708 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2150      	movs	r1, #80	; 0x50
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f91f 	bl	80037c2 <TIM_ITRx_SetConfig>
      break;
 8003584:	e02c      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	461a      	mov	r2, r3
 8003594:	f000 f8e6 	bl	8003764 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2160      	movs	r1, #96	; 0x60
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f90f 	bl	80037c2 <TIM_ITRx_SetConfig>
      break;
 80035a4:	e01c      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f000 f8a8 	bl	8003708 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2140      	movs	r1, #64	; 0x40
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f8ff 	bl	80037c2 <TIM_ITRx_SetConfig>
      break;
 80035c4:	e00c      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4619      	mov	r1, r3
 80035d0:	4610      	mov	r0, r2
 80035d2:	f000 f8f6 	bl	80037c2 <TIM_ITRx_SetConfig>
      break;
 80035d6:	e003      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
      break;
 80035dc:	e000      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr

08003630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
	...

08003644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a29      	ldr	r2, [pc, #164]	; (80036fc <TIM_Base_SetConfig+0xb8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00b      	beq.n	8003674 <TIM_Base_SetConfig+0x30>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003662:	d007      	beq.n	8003674 <TIM_Base_SetConfig+0x30>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a26      	ldr	r2, [pc, #152]	; (8003700 <TIM_Base_SetConfig+0xbc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_Base_SetConfig+0x30>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a25      	ldr	r2, [pc, #148]	; (8003704 <TIM_Base_SetConfig+0xc0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d108      	bne.n	8003686 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <TIM_Base_SetConfig+0xb8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <TIM_Base_SetConfig+0x62>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d007      	beq.n	80036a6 <TIM_Base_SetConfig+0x62>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a19      	ldr	r2, [pc, #100]	; (8003700 <TIM_Base_SetConfig+0xbc>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_Base_SetConfig+0x62>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a18      	ldr	r2, [pc, #96]	; (8003704 <TIM_Base_SetConfig+0xc0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d108      	bne.n	80036b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a07      	ldr	r2, [pc, #28]	; (80036fc <TIM_Base_SetConfig+0xb8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d103      	bne.n	80036ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	615a      	str	r2, [r3, #20]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800

08003708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f023 0201 	bic.w	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f023 030a 	bic.w	r3, r3, #10
 8003744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f023 0210 	bic.w	r2, r3, #16
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800378e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	031b      	lsls	r3, r3, #12
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	621a      	str	r2, [r3, #32]
}
 80037b8:	bf00      	nop
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b085      	sub	sp, #20
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	f043 0307 	orr.w	r3, r3, #7
 80037e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	609a      	str	r2, [r3, #8]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b087      	sub	sp, #28
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003810:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	021a      	lsls	r2, r3, #8
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	431a      	orrs	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4313      	orrs	r3, r2
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	609a      	str	r2, [r3, #8]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003848:	2302      	movs	r3, #2
 800384a:	e046      	b.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00e      	beq.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003898:	d009      	beq.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a10      	ldr	r2, [pc, #64]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d10c      	bne.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	40012c00 	.word	0x40012c00
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000800 	.word	0x40000800

080038f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e042      	b.n	80039ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fd fe68 	bl	8001610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2224      	movs	r2, #36	; 0x24
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f91d 	bl	8003b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800396c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800397c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800398c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d16d      	bne.n	8003ab0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_UART_Transmit+0x2c>
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e066      	b.n	8003ab2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2221      	movs	r2, #33	; 0x21
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039f2:	f7fd ffdd 	bl	80019b0 <HAL_GetTick>
 80039f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	88fa      	ldrh	r2, [r7, #6]
 80039fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	88fa      	ldrh	r2, [r7, #6]
 8003a02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0c:	d108      	bne.n	8003a20 <HAL_UART_Transmit+0x6c>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	e003      	b.n	8003a28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a28:	e02a      	b.n	8003a80 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2200      	movs	r2, #0
 8003a32:	2180      	movs	r1, #128	; 0x80
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f840 	bl	8003aba <UART_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e036      	b.n	8003ab2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10b      	bne.n	8003a62 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	e007      	b.n	8003a72 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	781a      	ldrb	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1cf      	bne.n	8003a2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2140      	movs	r1, #64	; 0x40
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f810 	bl	8003aba <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e006      	b.n	8003ab2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	e000      	b.n	8003ab2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003ab0:	2302      	movs	r3, #2
  }
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b090      	sub	sp, #64	; 0x40
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	603b      	str	r3, [r7, #0]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aca:	e050      	b.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	d04c      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d007      	beq.n	8003aea <UART_WaitOnFlagUntilTimeout+0x30>
 8003ada:	f7fd ff69 	bl	80019b0 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d241      	bcs.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	330c      	adds	r3, #12
 8003b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b0a:	637a      	str	r2, [r7, #52]	; 0x34
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e5      	bne.n	8003aea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3314      	adds	r3, #20
 8003b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3314      	adds	r3, #20
 8003b3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b3e:	623a      	str	r2, [r7, #32]
 8003b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b42:	69f9      	ldr	r1, [r7, #28]
 8003b44:	6a3a      	ldr	r2, [r7, #32]
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e5      	bne.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e00f      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4013      	ands	r3, r2
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	bf0c      	ite	eq
 8003b7e:	2301      	moveq	r3, #1
 8003b80:	2300      	movne	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d09f      	beq.n	8003acc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3740      	adds	r7, #64	; 0x40
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bd2:	f023 030c 	bic.w	r3, r3, #12
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <UART_SetConfig+0x114>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d103      	bne.n	8003c08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c00:	f7ff fa58 	bl	80030b4 <HAL_RCC_GetPCLK2Freq>
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	e002      	b.n	8003c0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7ff fa40 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8003c0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009a      	lsls	r2, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	4a22      	ldr	r2, [pc, #136]	; (8003cb0 <UART_SetConfig+0x118>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	0119      	lsls	r1, r3, #4
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009a      	lsls	r2, r3, #2
 8003c38:	441a      	add	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c44:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <UART_SetConfig+0x118>)
 8003c46:	fba3 0302 	umull	r0, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	2064      	movs	r0, #100	; 0x64
 8003c4e:	fb00 f303 	mul.w	r3, r0, r3
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	3332      	adds	r3, #50	; 0x32
 8003c58:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <UART_SetConfig+0x118>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c64:	4419      	add	r1, r3
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009a      	lsls	r2, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <UART_SetConfig+0x118>)
 8003c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2064      	movs	r0, #100	; 0x64
 8003c86:	fb00 f303 	mul.w	r3, r0, r3
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	3332      	adds	r3, #50	; 0x32
 8003c90:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <UART_SetConfig+0x118>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	f003 020f 	and.w	r2, r3, #15
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	440a      	add	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40013800 	.word	0x40013800
 8003cb0:	51eb851f 	.word	0x51eb851f

08003cb4 <__errno>:
 8003cb4:	4b01      	ldr	r3, [pc, #4]	; (8003cbc <__errno+0x8>)
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	2000002c 	.word	0x2000002c

08003cc0 <__libc_init_array>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	2600      	movs	r6, #0
 8003cc4:	4d0c      	ldr	r5, [pc, #48]	; (8003cf8 <__libc_init_array+0x38>)
 8003cc6:	4c0d      	ldr	r4, [pc, #52]	; (8003cfc <__libc_init_array+0x3c>)
 8003cc8:	1b64      	subs	r4, r4, r5
 8003cca:	10a4      	asrs	r4, r4, #2
 8003ccc:	42a6      	cmp	r6, r4
 8003cce:	d109      	bne.n	8003ce4 <__libc_init_array+0x24>
 8003cd0:	f000 fcac 	bl	800462c <_init>
 8003cd4:	2600      	movs	r6, #0
 8003cd6:	4d0a      	ldr	r5, [pc, #40]	; (8003d00 <__libc_init_array+0x40>)
 8003cd8:	4c0a      	ldr	r4, [pc, #40]	; (8003d04 <__libc_init_array+0x44>)
 8003cda:	1b64      	subs	r4, r4, r5
 8003cdc:	10a4      	asrs	r4, r4, #2
 8003cde:	42a6      	cmp	r6, r4
 8003ce0:	d105      	bne.n	8003cee <__libc_init_array+0x2e>
 8003ce2:	bd70      	pop	{r4, r5, r6, pc}
 8003ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce8:	4798      	blx	r3
 8003cea:	3601      	adds	r6, #1
 8003cec:	e7ee      	b.n	8003ccc <__libc_init_array+0xc>
 8003cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf2:	4798      	blx	r3
 8003cf4:	3601      	adds	r6, #1
 8003cf6:	e7f2      	b.n	8003cde <__libc_init_array+0x1e>
 8003cf8:	08004734 	.word	0x08004734
 8003cfc:	08004734 	.word	0x08004734
 8003d00:	08004734 	.word	0x08004734
 8003d04:	08004738 	.word	0x08004738

08003d08 <malloc>:
 8003d08:	4b02      	ldr	r3, [pc, #8]	; (8003d14 <malloc+0xc>)
 8003d0a:	4601      	mov	r1, r0
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	f000 b87b 	b.w	8003e08 <_malloc_r>
 8003d12:	bf00      	nop
 8003d14:	2000002c 	.word	0x2000002c

08003d18 <free>:
 8003d18:	4b02      	ldr	r3, [pc, #8]	; (8003d24 <free+0xc>)
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	f000 b80b 	b.w	8003d38 <_free_r>
 8003d22:	bf00      	nop
 8003d24:	2000002c 	.word	0x2000002c

08003d28 <memset>:
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4402      	add	r2, r0
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d100      	bne.n	8003d32 <memset+0xa>
 8003d30:	4770      	bx	lr
 8003d32:	f803 1b01 	strb.w	r1, [r3], #1
 8003d36:	e7f9      	b.n	8003d2c <memset+0x4>

08003d38 <_free_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	4605      	mov	r5, r0
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	d040      	beq.n	8003dc2 <_free_r+0x8a>
 8003d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d44:	1f0c      	subs	r4, r1, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bfb8      	it	lt
 8003d4a:	18e4      	addlt	r4, r4, r3
 8003d4c:	f000 f900 	bl	8003f50 <__malloc_lock>
 8003d50:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <_free_r+0x8c>)
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	b933      	cbnz	r3, 8003d64 <_free_r+0x2c>
 8003d56:	6063      	str	r3, [r4, #4]
 8003d58:	6014      	str	r4, [r2, #0]
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d60:	f000 b8fc 	b.w	8003f5c <__malloc_unlock>
 8003d64:	42a3      	cmp	r3, r4
 8003d66:	d908      	bls.n	8003d7a <_free_r+0x42>
 8003d68:	6820      	ldr	r0, [r4, #0]
 8003d6a:	1821      	adds	r1, r4, r0
 8003d6c:	428b      	cmp	r3, r1
 8003d6e:	bf01      	itttt	eq
 8003d70:	6819      	ldreq	r1, [r3, #0]
 8003d72:	685b      	ldreq	r3, [r3, #4]
 8003d74:	1809      	addeq	r1, r1, r0
 8003d76:	6021      	streq	r1, [r4, #0]
 8003d78:	e7ed      	b.n	8003d56 <_free_r+0x1e>
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	b10b      	cbz	r3, 8003d84 <_free_r+0x4c>
 8003d80:	42a3      	cmp	r3, r4
 8003d82:	d9fa      	bls.n	8003d7a <_free_r+0x42>
 8003d84:	6811      	ldr	r1, [r2, #0]
 8003d86:	1850      	adds	r0, r2, r1
 8003d88:	42a0      	cmp	r0, r4
 8003d8a:	d10b      	bne.n	8003da4 <_free_r+0x6c>
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	4401      	add	r1, r0
 8003d90:	1850      	adds	r0, r2, r1
 8003d92:	4283      	cmp	r3, r0
 8003d94:	6011      	str	r1, [r2, #0]
 8003d96:	d1e0      	bne.n	8003d5a <_free_r+0x22>
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4401      	add	r1, r0
 8003d9e:	6011      	str	r1, [r2, #0]
 8003da0:	6053      	str	r3, [r2, #4]
 8003da2:	e7da      	b.n	8003d5a <_free_r+0x22>
 8003da4:	d902      	bls.n	8003dac <_free_r+0x74>
 8003da6:	230c      	movs	r3, #12
 8003da8:	602b      	str	r3, [r5, #0]
 8003daa:	e7d6      	b.n	8003d5a <_free_r+0x22>
 8003dac:	6820      	ldr	r0, [r4, #0]
 8003dae:	1821      	adds	r1, r4, r0
 8003db0:	428b      	cmp	r3, r1
 8003db2:	bf01      	itttt	eq
 8003db4:	6819      	ldreq	r1, [r3, #0]
 8003db6:	685b      	ldreq	r3, [r3, #4]
 8003db8:	1809      	addeq	r1, r1, r0
 8003dba:	6021      	streq	r1, [r4, #0]
 8003dbc:	6063      	str	r3, [r4, #4]
 8003dbe:	6054      	str	r4, [r2, #4]
 8003dc0:	e7cb      	b.n	8003d5a <_free_r+0x22>
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
 8003dc4:	20000234 	.word	0x20000234

08003dc8 <sbrk_aligned>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	4e0e      	ldr	r6, [pc, #56]	; (8003e04 <sbrk_aligned+0x3c>)
 8003dcc:	460c      	mov	r4, r1
 8003dce:	6831      	ldr	r1, [r6, #0]
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	b911      	cbnz	r1, 8003dda <sbrk_aligned+0x12>
 8003dd4:	f000 f88c 	bl	8003ef0 <_sbrk_r>
 8003dd8:	6030      	str	r0, [r6, #0]
 8003dda:	4621      	mov	r1, r4
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f000 f887 	bl	8003ef0 <_sbrk_r>
 8003de2:	1c43      	adds	r3, r0, #1
 8003de4:	d00a      	beq.n	8003dfc <sbrk_aligned+0x34>
 8003de6:	1cc4      	adds	r4, r0, #3
 8003de8:	f024 0403 	bic.w	r4, r4, #3
 8003dec:	42a0      	cmp	r0, r4
 8003dee:	d007      	beq.n	8003e00 <sbrk_aligned+0x38>
 8003df0:	1a21      	subs	r1, r4, r0
 8003df2:	4628      	mov	r0, r5
 8003df4:	f000 f87c 	bl	8003ef0 <_sbrk_r>
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d101      	bne.n	8003e00 <sbrk_aligned+0x38>
 8003dfc:	f04f 34ff 	mov.w	r4, #4294967295
 8003e00:	4620      	mov	r0, r4
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
 8003e04:	20000238 	.word	0x20000238

08003e08 <_malloc_r>:
 8003e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e0c:	1ccd      	adds	r5, r1, #3
 8003e0e:	f025 0503 	bic.w	r5, r5, #3
 8003e12:	3508      	adds	r5, #8
 8003e14:	2d0c      	cmp	r5, #12
 8003e16:	bf38      	it	cc
 8003e18:	250c      	movcc	r5, #12
 8003e1a:	2d00      	cmp	r5, #0
 8003e1c:	4607      	mov	r7, r0
 8003e1e:	db01      	blt.n	8003e24 <_malloc_r+0x1c>
 8003e20:	42a9      	cmp	r1, r5
 8003e22:	d905      	bls.n	8003e30 <_malloc_r+0x28>
 8003e24:	230c      	movs	r3, #12
 8003e26:	2600      	movs	r6, #0
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e30:	4e2e      	ldr	r6, [pc, #184]	; (8003eec <_malloc_r+0xe4>)
 8003e32:	f000 f88d 	bl	8003f50 <__malloc_lock>
 8003e36:	6833      	ldr	r3, [r6, #0]
 8003e38:	461c      	mov	r4, r3
 8003e3a:	bb34      	cbnz	r4, 8003e8a <_malloc_r+0x82>
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	4638      	mov	r0, r7
 8003e40:	f7ff ffc2 	bl	8003dc8 <sbrk_aligned>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	4604      	mov	r4, r0
 8003e48:	d14d      	bne.n	8003ee6 <_malloc_r+0xde>
 8003e4a:	6834      	ldr	r4, [r6, #0]
 8003e4c:	4626      	mov	r6, r4
 8003e4e:	2e00      	cmp	r6, #0
 8003e50:	d140      	bne.n	8003ed4 <_malloc_r+0xcc>
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	4631      	mov	r1, r6
 8003e56:	4638      	mov	r0, r7
 8003e58:	eb04 0803 	add.w	r8, r4, r3
 8003e5c:	f000 f848 	bl	8003ef0 <_sbrk_r>
 8003e60:	4580      	cmp	r8, r0
 8003e62:	d13a      	bne.n	8003eda <_malloc_r+0xd2>
 8003e64:	6821      	ldr	r1, [r4, #0]
 8003e66:	3503      	adds	r5, #3
 8003e68:	1a6d      	subs	r5, r5, r1
 8003e6a:	f025 0503 	bic.w	r5, r5, #3
 8003e6e:	3508      	adds	r5, #8
 8003e70:	2d0c      	cmp	r5, #12
 8003e72:	bf38      	it	cc
 8003e74:	250c      	movcc	r5, #12
 8003e76:	4638      	mov	r0, r7
 8003e78:	4629      	mov	r1, r5
 8003e7a:	f7ff ffa5 	bl	8003dc8 <sbrk_aligned>
 8003e7e:	3001      	adds	r0, #1
 8003e80:	d02b      	beq.n	8003eda <_malloc_r+0xd2>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	442b      	add	r3, r5
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	e00e      	b.n	8003ea8 <_malloc_r+0xa0>
 8003e8a:	6822      	ldr	r2, [r4, #0]
 8003e8c:	1b52      	subs	r2, r2, r5
 8003e8e:	d41e      	bmi.n	8003ece <_malloc_r+0xc6>
 8003e90:	2a0b      	cmp	r2, #11
 8003e92:	d916      	bls.n	8003ec2 <_malloc_r+0xba>
 8003e94:	1961      	adds	r1, r4, r5
 8003e96:	42a3      	cmp	r3, r4
 8003e98:	6025      	str	r5, [r4, #0]
 8003e9a:	bf18      	it	ne
 8003e9c:	6059      	strne	r1, [r3, #4]
 8003e9e:	6863      	ldr	r3, [r4, #4]
 8003ea0:	bf08      	it	eq
 8003ea2:	6031      	streq	r1, [r6, #0]
 8003ea4:	5162      	str	r2, [r4, r5]
 8003ea6:	604b      	str	r3, [r1, #4]
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	f104 060b 	add.w	r6, r4, #11
 8003eae:	f000 f855 	bl	8003f5c <__malloc_unlock>
 8003eb2:	f026 0607 	bic.w	r6, r6, #7
 8003eb6:	1d23      	adds	r3, r4, #4
 8003eb8:	1af2      	subs	r2, r6, r3
 8003eba:	d0b6      	beq.n	8003e2a <_malloc_r+0x22>
 8003ebc:	1b9b      	subs	r3, r3, r6
 8003ebe:	50a3      	str	r3, [r4, r2]
 8003ec0:	e7b3      	b.n	8003e2a <_malloc_r+0x22>
 8003ec2:	6862      	ldr	r2, [r4, #4]
 8003ec4:	42a3      	cmp	r3, r4
 8003ec6:	bf0c      	ite	eq
 8003ec8:	6032      	streq	r2, [r6, #0]
 8003eca:	605a      	strne	r2, [r3, #4]
 8003ecc:	e7ec      	b.n	8003ea8 <_malloc_r+0xa0>
 8003ece:	4623      	mov	r3, r4
 8003ed0:	6864      	ldr	r4, [r4, #4]
 8003ed2:	e7b2      	b.n	8003e3a <_malloc_r+0x32>
 8003ed4:	4634      	mov	r4, r6
 8003ed6:	6876      	ldr	r6, [r6, #4]
 8003ed8:	e7b9      	b.n	8003e4e <_malloc_r+0x46>
 8003eda:	230c      	movs	r3, #12
 8003edc:	4638      	mov	r0, r7
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	f000 f83c 	bl	8003f5c <__malloc_unlock>
 8003ee4:	e7a1      	b.n	8003e2a <_malloc_r+0x22>
 8003ee6:	6025      	str	r5, [r4, #0]
 8003ee8:	e7de      	b.n	8003ea8 <_malloc_r+0xa0>
 8003eea:	bf00      	nop
 8003eec:	20000234 	.word	0x20000234

08003ef0 <_sbrk_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	4d05      	ldr	r5, [pc, #20]	; (8003f0c <_sbrk_r+0x1c>)
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4608      	mov	r0, r1
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	f7fd fbf8 	bl	80016f0 <_sbrk>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d102      	bne.n	8003f0a <_sbrk_r+0x1a>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	b103      	cbz	r3, 8003f0a <_sbrk_r+0x1a>
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	2000023c 	.word	0x2000023c

08003f10 <siprintf>:
 8003f10:	b40e      	push	{r1, r2, r3}
 8003f12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f16:	b500      	push	{lr}
 8003f18:	b09c      	sub	sp, #112	; 0x70
 8003f1a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f1c:	9002      	str	r0, [sp, #8]
 8003f1e:	9006      	str	r0, [sp, #24]
 8003f20:	9107      	str	r1, [sp, #28]
 8003f22:	9104      	str	r1, [sp, #16]
 8003f24:	4808      	ldr	r0, [pc, #32]	; (8003f48 <siprintf+0x38>)
 8003f26:	4909      	ldr	r1, [pc, #36]	; (8003f4c <siprintf+0x3c>)
 8003f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f2c:	9105      	str	r1, [sp, #20]
 8003f2e:	6800      	ldr	r0, [r0, #0]
 8003f30:	a902      	add	r1, sp, #8
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	f000 f874 	bl	8004020 <_svfiprintf_r>
 8003f38:	2200      	movs	r2, #0
 8003f3a:	9b02      	ldr	r3, [sp, #8]
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	b01c      	add	sp, #112	; 0x70
 8003f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f44:	b003      	add	sp, #12
 8003f46:	4770      	bx	lr
 8003f48:	2000002c 	.word	0x2000002c
 8003f4c:	ffff0208 	.word	0xffff0208

08003f50 <__malloc_lock>:
 8003f50:	4801      	ldr	r0, [pc, #4]	; (8003f58 <__malloc_lock+0x8>)
 8003f52:	f000 bafb 	b.w	800454c <__retarget_lock_acquire_recursive>
 8003f56:	bf00      	nop
 8003f58:	20000240 	.word	0x20000240

08003f5c <__malloc_unlock>:
 8003f5c:	4801      	ldr	r0, [pc, #4]	; (8003f64 <__malloc_unlock+0x8>)
 8003f5e:	f000 baf6 	b.w	800454e <__retarget_lock_release_recursive>
 8003f62:	bf00      	nop
 8003f64:	20000240 	.word	0x20000240

08003f68 <__ssputs_r>:
 8003f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f6c:	688e      	ldr	r6, [r1, #8]
 8003f6e:	4682      	mov	sl, r0
 8003f70:	429e      	cmp	r6, r3
 8003f72:	460c      	mov	r4, r1
 8003f74:	4690      	mov	r8, r2
 8003f76:	461f      	mov	r7, r3
 8003f78:	d838      	bhi.n	8003fec <__ssputs_r+0x84>
 8003f7a:	898a      	ldrh	r2, [r1, #12]
 8003f7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f80:	d032      	beq.n	8003fe8 <__ssputs_r+0x80>
 8003f82:	6825      	ldr	r5, [r4, #0]
 8003f84:	6909      	ldr	r1, [r1, #16]
 8003f86:	3301      	adds	r3, #1
 8003f88:	eba5 0901 	sub.w	r9, r5, r1
 8003f8c:	6965      	ldr	r5, [r4, #20]
 8003f8e:	444b      	add	r3, r9
 8003f90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f98:	106d      	asrs	r5, r5, #1
 8003f9a:	429d      	cmp	r5, r3
 8003f9c:	bf38      	it	cc
 8003f9e:	461d      	movcc	r5, r3
 8003fa0:	0553      	lsls	r3, r2, #21
 8003fa2:	d531      	bpl.n	8004008 <__ssputs_r+0xa0>
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	f7ff ff2f 	bl	8003e08 <_malloc_r>
 8003faa:	4606      	mov	r6, r0
 8003fac:	b950      	cbnz	r0, 8003fc4 <__ssputs_r+0x5c>
 8003fae:	230c      	movs	r3, #12
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb4:	f8ca 3000 	str.w	r3, [sl]
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fbe:	81a3      	strh	r3, [r4, #12]
 8003fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc4:	464a      	mov	r2, r9
 8003fc6:	6921      	ldr	r1, [r4, #16]
 8003fc8:	f000 fad0 	bl	800456c <memcpy>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	6126      	str	r6, [r4, #16]
 8003fda:	444e      	add	r6, r9
 8003fdc:	6026      	str	r6, [r4, #0]
 8003fde:	463e      	mov	r6, r7
 8003fe0:	6165      	str	r5, [r4, #20]
 8003fe2:	eba5 0509 	sub.w	r5, r5, r9
 8003fe6:	60a5      	str	r5, [r4, #8]
 8003fe8:	42be      	cmp	r6, r7
 8003fea:	d900      	bls.n	8003fee <__ssputs_r+0x86>
 8003fec:	463e      	mov	r6, r7
 8003fee:	4632      	mov	r2, r6
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	6820      	ldr	r0, [r4, #0]
 8003ff4:	f000 fac8 	bl	8004588 <memmove>
 8003ff8:	68a3      	ldr	r3, [r4, #8]
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	1b9b      	subs	r3, r3, r6
 8003ffe:	60a3      	str	r3, [r4, #8]
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	4433      	add	r3, r6
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	e7db      	b.n	8003fc0 <__ssputs_r+0x58>
 8004008:	462a      	mov	r2, r5
 800400a:	f000 fad7 	bl	80045bc <_realloc_r>
 800400e:	4606      	mov	r6, r0
 8004010:	2800      	cmp	r0, #0
 8004012:	d1e1      	bne.n	8003fd8 <__ssputs_r+0x70>
 8004014:	4650      	mov	r0, sl
 8004016:	6921      	ldr	r1, [r4, #16]
 8004018:	f7ff fe8e 	bl	8003d38 <_free_r>
 800401c:	e7c7      	b.n	8003fae <__ssputs_r+0x46>
	...

08004020 <_svfiprintf_r>:
 8004020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004024:	4698      	mov	r8, r3
 8004026:	898b      	ldrh	r3, [r1, #12]
 8004028:	4607      	mov	r7, r0
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	460d      	mov	r5, r1
 800402e:	4614      	mov	r4, r2
 8004030:	b09d      	sub	sp, #116	; 0x74
 8004032:	d50e      	bpl.n	8004052 <_svfiprintf_r+0x32>
 8004034:	690b      	ldr	r3, [r1, #16]
 8004036:	b963      	cbnz	r3, 8004052 <_svfiprintf_r+0x32>
 8004038:	2140      	movs	r1, #64	; 0x40
 800403a:	f7ff fee5 	bl	8003e08 <_malloc_r>
 800403e:	6028      	str	r0, [r5, #0]
 8004040:	6128      	str	r0, [r5, #16]
 8004042:	b920      	cbnz	r0, 800404e <_svfiprintf_r+0x2e>
 8004044:	230c      	movs	r3, #12
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	f04f 30ff 	mov.w	r0, #4294967295
 800404c:	e0d1      	b.n	80041f2 <_svfiprintf_r+0x1d2>
 800404e:	2340      	movs	r3, #64	; 0x40
 8004050:	616b      	str	r3, [r5, #20]
 8004052:	2300      	movs	r3, #0
 8004054:	9309      	str	r3, [sp, #36]	; 0x24
 8004056:	2320      	movs	r3, #32
 8004058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800405c:	2330      	movs	r3, #48	; 0x30
 800405e:	f04f 0901 	mov.w	r9, #1
 8004062:	f8cd 800c 	str.w	r8, [sp, #12]
 8004066:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800420c <_svfiprintf_r+0x1ec>
 800406a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800406e:	4623      	mov	r3, r4
 8004070:	469a      	mov	sl, r3
 8004072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004076:	b10a      	cbz	r2, 800407c <_svfiprintf_r+0x5c>
 8004078:	2a25      	cmp	r2, #37	; 0x25
 800407a:	d1f9      	bne.n	8004070 <_svfiprintf_r+0x50>
 800407c:	ebba 0b04 	subs.w	fp, sl, r4
 8004080:	d00b      	beq.n	800409a <_svfiprintf_r+0x7a>
 8004082:	465b      	mov	r3, fp
 8004084:	4622      	mov	r2, r4
 8004086:	4629      	mov	r1, r5
 8004088:	4638      	mov	r0, r7
 800408a:	f7ff ff6d 	bl	8003f68 <__ssputs_r>
 800408e:	3001      	adds	r0, #1
 8004090:	f000 80aa 	beq.w	80041e8 <_svfiprintf_r+0x1c8>
 8004094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004096:	445a      	add	r2, fp
 8004098:	9209      	str	r2, [sp, #36]	; 0x24
 800409a:	f89a 3000 	ldrb.w	r3, [sl]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80a2 	beq.w	80041e8 <_svfiprintf_r+0x1c8>
 80040a4:	2300      	movs	r3, #0
 80040a6:	f04f 32ff 	mov.w	r2, #4294967295
 80040aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ae:	f10a 0a01 	add.w	sl, sl, #1
 80040b2:	9304      	str	r3, [sp, #16]
 80040b4:	9307      	str	r3, [sp, #28]
 80040b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040ba:	931a      	str	r3, [sp, #104]	; 0x68
 80040bc:	4654      	mov	r4, sl
 80040be:	2205      	movs	r2, #5
 80040c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c4:	4851      	ldr	r0, [pc, #324]	; (800420c <_svfiprintf_r+0x1ec>)
 80040c6:	f000 fa43 	bl	8004550 <memchr>
 80040ca:	9a04      	ldr	r2, [sp, #16]
 80040cc:	b9d8      	cbnz	r0, 8004106 <_svfiprintf_r+0xe6>
 80040ce:	06d0      	lsls	r0, r2, #27
 80040d0:	bf44      	itt	mi
 80040d2:	2320      	movmi	r3, #32
 80040d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040d8:	0711      	lsls	r1, r2, #28
 80040da:	bf44      	itt	mi
 80040dc:	232b      	movmi	r3, #43	; 0x2b
 80040de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040e2:	f89a 3000 	ldrb.w	r3, [sl]
 80040e6:	2b2a      	cmp	r3, #42	; 0x2a
 80040e8:	d015      	beq.n	8004116 <_svfiprintf_r+0xf6>
 80040ea:	4654      	mov	r4, sl
 80040ec:	2000      	movs	r0, #0
 80040ee:	f04f 0c0a 	mov.w	ip, #10
 80040f2:	9a07      	ldr	r2, [sp, #28]
 80040f4:	4621      	mov	r1, r4
 80040f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040fa:	3b30      	subs	r3, #48	; 0x30
 80040fc:	2b09      	cmp	r3, #9
 80040fe:	d94e      	bls.n	800419e <_svfiprintf_r+0x17e>
 8004100:	b1b0      	cbz	r0, 8004130 <_svfiprintf_r+0x110>
 8004102:	9207      	str	r2, [sp, #28]
 8004104:	e014      	b.n	8004130 <_svfiprintf_r+0x110>
 8004106:	eba0 0308 	sub.w	r3, r0, r8
 800410a:	fa09 f303 	lsl.w	r3, r9, r3
 800410e:	4313      	orrs	r3, r2
 8004110:	46a2      	mov	sl, r4
 8004112:	9304      	str	r3, [sp, #16]
 8004114:	e7d2      	b.n	80040bc <_svfiprintf_r+0x9c>
 8004116:	9b03      	ldr	r3, [sp, #12]
 8004118:	1d19      	adds	r1, r3, #4
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	9103      	str	r1, [sp, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	bfbb      	ittet	lt
 8004122:	425b      	neglt	r3, r3
 8004124:	f042 0202 	orrlt.w	r2, r2, #2
 8004128:	9307      	strge	r3, [sp, #28]
 800412a:	9307      	strlt	r3, [sp, #28]
 800412c:	bfb8      	it	lt
 800412e:	9204      	strlt	r2, [sp, #16]
 8004130:	7823      	ldrb	r3, [r4, #0]
 8004132:	2b2e      	cmp	r3, #46	; 0x2e
 8004134:	d10c      	bne.n	8004150 <_svfiprintf_r+0x130>
 8004136:	7863      	ldrb	r3, [r4, #1]
 8004138:	2b2a      	cmp	r3, #42	; 0x2a
 800413a:	d135      	bne.n	80041a8 <_svfiprintf_r+0x188>
 800413c:	9b03      	ldr	r3, [sp, #12]
 800413e:	3402      	adds	r4, #2
 8004140:	1d1a      	adds	r2, r3, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	9203      	str	r2, [sp, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	bfb8      	it	lt
 800414a:	f04f 33ff 	movlt.w	r3, #4294967295
 800414e:	9305      	str	r3, [sp, #20]
 8004150:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004210 <_svfiprintf_r+0x1f0>
 8004154:	2203      	movs	r2, #3
 8004156:	4650      	mov	r0, sl
 8004158:	7821      	ldrb	r1, [r4, #0]
 800415a:	f000 f9f9 	bl	8004550 <memchr>
 800415e:	b140      	cbz	r0, 8004172 <_svfiprintf_r+0x152>
 8004160:	2340      	movs	r3, #64	; 0x40
 8004162:	eba0 000a 	sub.w	r0, r0, sl
 8004166:	fa03 f000 	lsl.w	r0, r3, r0
 800416a:	9b04      	ldr	r3, [sp, #16]
 800416c:	3401      	adds	r4, #1
 800416e:	4303      	orrs	r3, r0
 8004170:	9304      	str	r3, [sp, #16]
 8004172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004176:	2206      	movs	r2, #6
 8004178:	4826      	ldr	r0, [pc, #152]	; (8004214 <_svfiprintf_r+0x1f4>)
 800417a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800417e:	f000 f9e7 	bl	8004550 <memchr>
 8004182:	2800      	cmp	r0, #0
 8004184:	d038      	beq.n	80041f8 <_svfiprintf_r+0x1d8>
 8004186:	4b24      	ldr	r3, [pc, #144]	; (8004218 <_svfiprintf_r+0x1f8>)
 8004188:	bb1b      	cbnz	r3, 80041d2 <_svfiprintf_r+0x1b2>
 800418a:	9b03      	ldr	r3, [sp, #12]
 800418c:	3307      	adds	r3, #7
 800418e:	f023 0307 	bic.w	r3, r3, #7
 8004192:	3308      	adds	r3, #8
 8004194:	9303      	str	r3, [sp, #12]
 8004196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004198:	4433      	add	r3, r6
 800419a:	9309      	str	r3, [sp, #36]	; 0x24
 800419c:	e767      	b.n	800406e <_svfiprintf_r+0x4e>
 800419e:	460c      	mov	r4, r1
 80041a0:	2001      	movs	r0, #1
 80041a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80041a6:	e7a5      	b.n	80040f4 <_svfiprintf_r+0xd4>
 80041a8:	2300      	movs	r3, #0
 80041aa:	f04f 0c0a 	mov.w	ip, #10
 80041ae:	4619      	mov	r1, r3
 80041b0:	3401      	adds	r4, #1
 80041b2:	9305      	str	r3, [sp, #20]
 80041b4:	4620      	mov	r0, r4
 80041b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041ba:	3a30      	subs	r2, #48	; 0x30
 80041bc:	2a09      	cmp	r2, #9
 80041be:	d903      	bls.n	80041c8 <_svfiprintf_r+0x1a8>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0c5      	beq.n	8004150 <_svfiprintf_r+0x130>
 80041c4:	9105      	str	r1, [sp, #20]
 80041c6:	e7c3      	b.n	8004150 <_svfiprintf_r+0x130>
 80041c8:	4604      	mov	r4, r0
 80041ca:	2301      	movs	r3, #1
 80041cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80041d0:	e7f0      	b.n	80041b4 <_svfiprintf_r+0x194>
 80041d2:	ab03      	add	r3, sp, #12
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	462a      	mov	r2, r5
 80041d8:	4638      	mov	r0, r7
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <_svfiprintf_r+0x1fc>)
 80041dc:	a904      	add	r1, sp, #16
 80041de:	f3af 8000 	nop.w
 80041e2:	1c42      	adds	r2, r0, #1
 80041e4:	4606      	mov	r6, r0
 80041e6:	d1d6      	bne.n	8004196 <_svfiprintf_r+0x176>
 80041e8:	89ab      	ldrh	r3, [r5, #12]
 80041ea:	065b      	lsls	r3, r3, #25
 80041ec:	f53f af2c 	bmi.w	8004048 <_svfiprintf_r+0x28>
 80041f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041f2:	b01d      	add	sp, #116	; 0x74
 80041f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f8:	ab03      	add	r3, sp, #12
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	462a      	mov	r2, r5
 80041fe:	4638      	mov	r0, r7
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <_svfiprintf_r+0x1fc>)
 8004202:	a904      	add	r1, sp, #16
 8004204:	f000 f87c 	bl	8004300 <_printf_i>
 8004208:	e7eb      	b.n	80041e2 <_svfiprintf_r+0x1c2>
 800420a:	bf00      	nop
 800420c:	080046fe 	.word	0x080046fe
 8004210:	08004704 	.word	0x08004704
 8004214:	08004708 	.word	0x08004708
 8004218:	00000000 	.word	0x00000000
 800421c:	08003f69 	.word	0x08003f69

08004220 <_printf_common>:
 8004220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004224:	4616      	mov	r6, r2
 8004226:	4699      	mov	r9, r3
 8004228:	688a      	ldr	r2, [r1, #8]
 800422a:	690b      	ldr	r3, [r1, #16]
 800422c:	4607      	mov	r7, r0
 800422e:	4293      	cmp	r3, r2
 8004230:	bfb8      	it	lt
 8004232:	4613      	movlt	r3, r2
 8004234:	6033      	str	r3, [r6, #0]
 8004236:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800423a:	460c      	mov	r4, r1
 800423c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004240:	b10a      	cbz	r2, 8004246 <_printf_common+0x26>
 8004242:	3301      	adds	r3, #1
 8004244:	6033      	str	r3, [r6, #0]
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	0699      	lsls	r1, r3, #26
 800424a:	bf42      	ittt	mi
 800424c:	6833      	ldrmi	r3, [r6, #0]
 800424e:	3302      	addmi	r3, #2
 8004250:	6033      	strmi	r3, [r6, #0]
 8004252:	6825      	ldr	r5, [r4, #0]
 8004254:	f015 0506 	ands.w	r5, r5, #6
 8004258:	d106      	bne.n	8004268 <_printf_common+0x48>
 800425a:	f104 0a19 	add.w	sl, r4, #25
 800425e:	68e3      	ldr	r3, [r4, #12]
 8004260:	6832      	ldr	r2, [r6, #0]
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	42ab      	cmp	r3, r5
 8004266:	dc28      	bgt.n	80042ba <_printf_common+0x9a>
 8004268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800426c:	1e13      	subs	r3, r2, #0
 800426e:	6822      	ldr	r2, [r4, #0]
 8004270:	bf18      	it	ne
 8004272:	2301      	movne	r3, #1
 8004274:	0692      	lsls	r2, r2, #26
 8004276:	d42d      	bmi.n	80042d4 <_printf_common+0xb4>
 8004278:	4649      	mov	r1, r9
 800427a:	4638      	mov	r0, r7
 800427c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004280:	47c0      	blx	r8
 8004282:	3001      	adds	r0, #1
 8004284:	d020      	beq.n	80042c8 <_printf_common+0xa8>
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	68e5      	ldr	r5, [r4, #12]
 800428a:	f003 0306 	and.w	r3, r3, #6
 800428e:	2b04      	cmp	r3, #4
 8004290:	bf18      	it	ne
 8004292:	2500      	movne	r5, #0
 8004294:	6832      	ldr	r2, [r6, #0]
 8004296:	f04f 0600 	mov.w	r6, #0
 800429a:	68a3      	ldr	r3, [r4, #8]
 800429c:	bf08      	it	eq
 800429e:	1aad      	subeq	r5, r5, r2
 80042a0:	6922      	ldr	r2, [r4, #16]
 80042a2:	bf08      	it	eq
 80042a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042a8:	4293      	cmp	r3, r2
 80042aa:	bfc4      	itt	gt
 80042ac:	1a9b      	subgt	r3, r3, r2
 80042ae:	18ed      	addgt	r5, r5, r3
 80042b0:	341a      	adds	r4, #26
 80042b2:	42b5      	cmp	r5, r6
 80042b4:	d11a      	bne.n	80042ec <_printf_common+0xcc>
 80042b6:	2000      	movs	r0, #0
 80042b8:	e008      	b.n	80042cc <_printf_common+0xac>
 80042ba:	2301      	movs	r3, #1
 80042bc:	4652      	mov	r2, sl
 80042be:	4649      	mov	r1, r9
 80042c0:	4638      	mov	r0, r7
 80042c2:	47c0      	blx	r8
 80042c4:	3001      	adds	r0, #1
 80042c6:	d103      	bne.n	80042d0 <_printf_common+0xb0>
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295
 80042cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d0:	3501      	adds	r5, #1
 80042d2:	e7c4      	b.n	800425e <_printf_common+0x3e>
 80042d4:	2030      	movs	r0, #48	; 0x30
 80042d6:	18e1      	adds	r1, r4, r3
 80042d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042e2:	4422      	add	r2, r4
 80042e4:	3302      	adds	r3, #2
 80042e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042ea:	e7c5      	b.n	8004278 <_printf_common+0x58>
 80042ec:	2301      	movs	r3, #1
 80042ee:	4622      	mov	r2, r4
 80042f0:	4649      	mov	r1, r9
 80042f2:	4638      	mov	r0, r7
 80042f4:	47c0      	blx	r8
 80042f6:	3001      	adds	r0, #1
 80042f8:	d0e6      	beq.n	80042c8 <_printf_common+0xa8>
 80042fa:	3601      	adds	r6, #1
 80042fc:	e7d9      	b.n	80042b2 <_printf_common+0x92>
	...

08004300 <_printf_i>:
 8004300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004304:	7e0f      	ldrb	r7, [r1, #24]
 8004306:	4691      	mov	r9, r2
 8004308:	2f78      	cmp	r7, #120	; 0x78
 800430a:	4680      	mov	r8, r0
 800430c:	460c      	mov	r4, r1
 800430e:	469a      	mov	sl, r3
 8004310:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004312:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004316:	d807      	bhi.n	8004328 <_printf_i+0x28>
 8004318:	2f62      	cmp	r7, #98	; 0x62
 800431a:	d80a      	bhi.n	8004332 <_printf_i+0x32>
 800431c:	2f00      	cmp	r7, #0
 800431e:	f000 80d9 	beq.w	80044d4 <_printf_i+0x1d4>
 8004322:	2f58      	cmp	r7, #88	; 0x58
 8004324:	f000 80a4 	beq.w	8004470 <_printf_i+0x170>
 8004328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800432c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004330:	e03a      	b.n	80043a8 <_printf_i+0xa8>
 8004332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004336:	2b15      	cmp	r3, #21
 8004338:	d8f6      	bhi.n	8004328 <_printf_i+0x28>
 800433a:	a101      	add	r1, pc, #4	; (adr r1, 8004340 <_printf_i+0x40>)
 800433c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004340:	08004399 	.word	0x08004399
 8004344:	080043ad 	.word	0x080043ad
 8004348:	08004329 	.word	0x08004329
 800434c:	08004329 	.word	0x08004329
 8004350:	08004329 	.word	0x08004329
 8004354:	08004329 	.word	0x08004329
 8004358:	080043ad 	.word	0x080043ad
 800435c:	08004329 	.word	0x08004329
 8004360:	08004329 	.word	0x08004329
 8004364:	08004329 	.word	0x08004329
 8004368:	08004329 	.word	0x08004329
 800436c:	080044bb 	.word	0x080044bb
 8004370:	080043dd 	.word	0x080043dd
 8004374:	0800449d 	.word	0x0800449d
 8004378:	08004329 	.word	0x08004329
 800437c:	08004329 	.word	0x08004329
 8004380:	080044dd 	.word	0x080044dd
 8004384:	08004329 	.word	0x08004329
 8004388:	080043dd 	.word	0x080043dd
 800438c:	08004329 	.word	0x08004329
 8004390:	08004329 	.word	0x08004329
 8004394:	080044a5 	.word	0x080044a5
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	1d1a      	adds	r2, r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	602a      	str	r2, [r5, #0]
 80043a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0a4      	b.n	80044f6 <_printf_i+0x1f6>
 80043ac:	6820      	ldr	r0, [r4, #0]
 80043ae:	6829      	ldr	r1, [r5, #0]
 80043b0:	0606      	lsls	r6, r0, #24
 80043b2:	f101 0304 	add.w	r3, r1, #4
 80043b6:	d50a      	bpl.n	80043ce <_printf_i+0xce>
 80043b8:	680e      	ldr	r6, [r1, #0]
 80043ba:	602b      	str	r3, [r5, #0]
 80043bc:	2e00      	cmp	r6, #0
 80043be:	da03      	bge.n	80043c8 <_printf_i+0xc8>
 80043c0:	232d      	movs	r3, #45	; 0x2d
 80043c2:	4276      	negs	r6, r6
 80043c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c8:	230a      	movs	r3, #10
 80043ca:	485e      	ldr	r0, [pc, #376]	; (8004544 <_printf_i+0x244>)
 80043cc:	e019      	b.n	8004402 <_printf_i+0x102>
 80043ce:	680e      	ldr	r6, [r1, #0]
 80043d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	bf18      	it	ne
 80043d8:	b236      	sxthne	r6, r6
 80043da:	e7ef      	b.n	80043bc <_printf_i+0xbc>
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	6820      	ldr	r0, [r4, #0]
 80043e0:	1d19      	adds	r1, r3, #4
 80043e2:	6029      	str	r1, [r5, #0]
 80043e4:	0601      	lsls	r1, r0, #24
 80043e6:	d501      	bpl.n	80043ec <_printf_i+0xec>
 80043e8:	681e      	ldr	r6, [r3, #0]
 80043ea:	e002      	b.n	80043f2 <_printf_i+0xf2>
 80043ec:	0646      	lsls	r6, r0, #25
 80043ee:	d5fb      	bpl.n	80043e8 <_printf_i+0xe8>
 80043f0:	881e      	ldrh	r6, [r3, #0]
 80043f2:	2f6f      	cmp	r7, #111	; 0x6f
 80043f4:	bf0c      	ite	eq
 80043f6:	2308      	moveq	r3, #8
 80043f8:	230a      	movne	r3, #10
 80043fa:	4852      	ldr	r0, [pc, #328]	; (8004544 <_printf_i+0x244>)
 80043fc:	2100      	movs	r1, #0
 80043fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004402:	6865      	ldr	r5, [r4, #4]
 8004404:	2d00      	cmp	r5, #0
 8004406:	bfa8      	it	ge
 8004408:	6821      	ldrge	r1, [r4, #0]
 800440a:	60a5      	str	r5, [r4, #8]
 800440c:	bfa4      	itt	ge
 800440e:	f021 0104 	bicge.w	r1, r1, #4
 8004412:	6021      	strge	r1, [r4, #0]
 8004414:	b90e      	cbnz	r6, 800441a <_printf_i+0x11a>
 8004416:	2d00      	cmp	r5, #0
 8004418:	d04d      	beq.n	80044b6 <_printf_i+0x1b6>
 800441a:	4615      	mov	r5, r2
 800441c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004420:	fb03 6711 	mls	r7, r3, r1, r6
 8004424:	5dc7      	ldrb	r7, [r0, r7]
 8004426:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800442a:	4637      	mov	r7, r6
 800442c:	42bb      	cmp	r3, r7
 800442e:	460e      	mov	r6, r1
 8004430:	d9f4      	bls.n	800441c <_printf_i+0x11c>
 8004432:	2b08      	cmp	r3, #8
 8004434:	d10b      	bne.n	800444e <_printf_i+0x14e>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	07de      	lsls	r6, r3, #31
 800443a:	d508      	bpl.n	800444e <_printf_i+0x14e>
 800443c:	6923      	ldr	r3, [r4, #16]
 800443e:	6861      	ldr	r1, [r4, #4]
 8004440:	4299      	cmp	r1, r3
 8004442:	bfde      	ittt	le
 8004444:	2330      	movle	r3, #48	; 0x30
 8004446:	f805 3c01 	strble.w	r3, [r5, #-1]
 800444a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800444e:	1b52      	subs	r2, r2, r5
 8004450:	6122      	str	r2, [r4, #16]
 8004452:	464b      	mov	r3, r9
 8004454:	4621      	mov	r1, r4
 8004456:	4640      	mov	r0, r8
 8004458:	f8cd a000 	str.w	sl, [sp]
 800445c:	aa03      	add	r2, sp, #12
 800445e:	f7ff fedf 	bl	8004220 <_printf_common>
 8004462:	3001      	adds	r0, #1
 8004464:	d14c      	bne.n	8004500 <_printf_i+0x200>
 8004466:	f04f 30ff 	mov.w	r0, #4294967295
 800446a:	b004      	add	sp, #16
 800446c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004470:	4834      	ldr	r0, [pc, #208]	; (8004544 <_printf_i+0x244>)
 8004472:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004476:	6829      	ldr	r1, [r5, #0]
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	f851 6b04 	ldr.w	r6, [r1], #4
 800447e:	6029      	str	r1, [r5, #0]
 8004480:	061d      	lsls	r5, r3, #24
 8004482:	d514      	bpl.n	80044ae <_printf_i+0x1ae>
 8004484:	07df      	lsls	r7, r3, #31
 8004486:	bf44      	itt	mi
 8004488:	f043 0320 	orrmi.w	r3, r3, #32
 800448c:	6023      	strmi	r3, [r4, #0]
 800448e:	b91e      	cbnz	r6, 8004498 <_printf_i+0x198>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	f023 0320 	bic.w	r3, r3, #32
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	2310      	movs	r3, #16
 800449a:	e7af      	b.n	80043fc <_printf_i+0xfc>
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	f043 0320 	orr.w	r3, r3, #32
 80044a2:	6023      	str	r3, [r4, #0]
 80044a4:	2378      	movs	r3, #120	; 0x78
 80044a6:	4828      	ldr	r0, [pc, #160]	; (8004548 <_printf_i+0x248>)
 80044a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044ac:	e7e3      	b.n	8004476 <_printf_i+0x176>
 80044ae:	0659      	lsls	r1, r3, #25
 80044b0:	bf48      	it	mi
 80044b2:	b2b6      	uxthmi	r6, r6
 80044b4:	e7e6      	b.n	8004484 <_printf_i+0x184>
 80044b6:	4615      	mov	r5, r2
 80044b8:	e7bb      	b.n	8004432 <_printf_i+0x132>
 80044ba:	682b      	ldr	r3, [r5, #0]
 80044bc:	6826      	ldr	r6, [r4, #0]
 80044be:	1d18      	adds	r0, r3, #4
 80044c0:	6961      	ldr	r1, [r4, #20]
 80044c2:	6028      	str	r0, [r5, #0]
 80044c4:	0635      	lsls	r5, r6, #24
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	d501      	bpl.n	80044ce <_printf_i+0x1ce>
 80044ca:	6019      	str	r1, [r3, #0]
 80044cc:	e002      	b.n	80044d4 <_printf_i+0x1d4>
 80044ce:	0670      	lsls	r0, r6, #25
 80044d0:	d5fb      	bpl.n	80044ca <_printf_i+0x1ca>
 80044d2:	8019      	strh	r1, [r3, #0]
 80044d4:	2300      	movs	r3, #0
 80044d6:	4615      	mov	r5, r2
 80044d8:	6123      	str	r3, [r4, #16]
 80044da:	e7ba      	b.n	8004452 <_printf_i+0x152>
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	2100      	movs	r1, #0
 80044e0:	1d1a      	adds	r2, r3, #4
 80044e2:	602a      	str	r2, [r5, #0]
 80044e4:	681d      	ldr	r5, [r3, #0]
 80044e6:	6862      	ldr	r2, [r4, #4]
 80044e8:	4628      	mov	r0, r5
 80044ea:	f000 f831 	bl	8004550 <memchr>
 80044ee:	b108      	cbz	r0, 80044f4 <_printf_i+0x1f4>
 80044f0:	1b40      	subs	r0, r0, r5
 80044f2:	6060      	str	r0, [r4, #4]
 80044f4:	6863      	ldr	r3, [r4, #4]
 80044f6:	6123      	str	r3, [r4, #16]
 80044f8:	2300      	movs	r3, #0
 80044fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044fe:	e7a8      	b.n	8004452 <_printf_i+0x152>
 8004500:	462a      	mov	r2, r5
 8004502:	4649      	mov	r1, r9
 8004504:	4640      	mov	r0, r8
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	47d0      	blx	sl
 800450a:	3001      	adds	r0, #1
 800450c:	d0ab      	beq.n	8004466 <_printf_i+0x166>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	079b      	lsls	r3, r3, #30
 8004512:	d413      	bmi.n	800453c <_printf_i+0x23c>
 8004514:	68e0      	ldr	r0, [r4, #12]
 8004516:	9b03      	ldr	r3, [sp, #12]
 8004518:	4298      	cmp	r0, r3
 800451a:	bfb8      	it	lt
 800451c:	4618      	movlt	r0, r3
 800451e:	e7a4      	b.n	800446a <_printf_i+0x16a>
 8004520:	2301      	movs	r3, #1
 8004522:	4632      	mov	r2, r6
 8004524:	4649      	mov	r1, r9
 8004526:	4640      	mov	r0, r8
 8004528:	47d0      	blx	sl
 800452a:	3001      	adds	r0, #1
 800452c:	d09b      	beq.n	8004466 <_printf_i+0x166>
 800452e:	3501      	adds	r5, #1
 8004530:	68e3      	ldr	r3, [r4, #12]
 8004532:	9903      	ldr	r1, [sp, #12]
 8004534:	1a5b      	subs	r3, r3, r1
 8004536:	42ab      	cmp	r3, r5
 8004538:	dcf2      	bgt.n	8004520 <_printf_i+0x220>
 800453a:	e7eb      	b.n	8004514 <_printf_i+0x214>
 800453c:	2500      	movs	r5, #0
 800453e:	f104 0619 	add.w	r6, r4, #25
 8004542:	e7f5      	b.n	8004530 <_printf_i+0x230>
 8004544:	0800470f 	.word	0x0800470f
 8004548:	08004720 	.word	0x08004720

0800454c <__retarget_lock_acquire_recursive>:
 800454c:	4770      	bx	lr

0800454e <__retarget_lock_release_recursive>:
 800454e:	4770      	bx	lr

08004550 <memchr>:
 8004550:	4603      	mov	r3, r0
 8004552:	b510      	push	{r4, lr}
 8004554:	b2c9      	uxtb	r1, r1
 8004556:	4402      	add	r2, r0
 8004558:	4293      	cmp	r3, r2
 800455a:	4618      	mov	r0, r3
 800455c:	d101      	bne.n	8004562 <memchr+0x12>
 800455e:	2000      	movs	r0, #0
 8004560:	e003      	b.n	800456a <memchr+0x1a>
 8004562:	7804      	ldrb	r4, [r0, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	428c      	cmp	r4, r1
 8004568:	d1f6      	bne.n	8004558 <memchr+0x8>
 800456a:	bd10      	pop	{r4, pc}

0800456c <memcpy>:
 800456c:	440a      	add	r2, r1
 800456e:	4291      	cmp	r1, r2
 8004570:	f100 33ff 	add.w	r3, r0, #4294967295
 8004574:	d100      	bne.n	8004578 <memcpy+0xc>
 8004576:	4770      	bx	lr
 8004578:	b510      	push	{r4, lr}
 800457a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800457e:	4291      	cmp	r1, r2
 8004580:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004584:	d1f9      	bne.n	800457a <memcpy+0xe>
 8004586:	bd10      	pop	{r4, pc}

08004588 <memmove>:
 8004588:	4288      	cmp	r0, r1
 800458a:	b510      	push	{r4, lr}
 800458c:	eb01 0402 	add.w	r4, r1, r2
 8004590:	d902      	bls.n	8004598 <memmove+0x10>
 8004592:	4284      	cmp	r4, r0
 8004594:	4623      	mov	r3, r4
 8004596:	d807      	bhi.n	80045a8 <memmove+0x20>
 8004598:	1e43      	subs	r3, r0, #1
 800459a:	42a1      	cmp	r1, r4
 800459c:	d008      	beq.n	80045b0 <memmove+0x28>
 800459e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045a6:	e7f8      	b.n	800459a <memmove+0x12>
 80045a8:	4601      	mov	r1, r0
 80045aa:	4402      	add	r2, r0
 80045ac:	428a      	cmp	r2, r1
 80045ae:	d100      	bne.n	80045b2 <memmove+0x2a>
 80045b0:	bd10      	pop	{r4, pc}
 80045b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045ba:	e7f7      	b.n	80045ac <memmove+0x24>

080045bc <_realloc_r>:
 80045bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c0:	4680      	mov	r8, r0
 80045c2:	4614      	mov	r4, r2
 80045c4:	460e      	mov	r6, r1
 80045c6:	b921      	cbnz	r1, 80045d2 <_realloc_r+0x16>
 80045c8:	4611      	mov	r1, r2
 80045ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ce:	f7ff bc1b 	b.w	8003e08 <_malloc_r>
 80045d2:	b92a      	cbnz	r2, 80045e0 <_realloc_r+0x24>
 80045d4:	f7ff fbb0 	bl	8003d38 <_free_r>
 80045d8:	4625      	mov	r5, r4
 80045da:	4628      	mov	r0, r5
 80045dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e0:	f000 f81b 	bl	800461a <_malloc_usable_size_r>
 80045e4:	4284      	cmp	r4, r0
 80045e6:	4607      	mov	r7, r0
 80045e8:	d802      	bhi.n	80045f0 <_realloc_r+0x34>
 80045ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045ee:	d812      	bhi.n	8004616 <_realloc_r+0x5a>
 80045f0:	4621      	mov	r1, r4
 80045f2:	4640      	mov	r0, r8
 80045f4:	f7ff fc08 	bl	8003e08 <_malloc_r>
 80045f8:	4605      	mov	r5, r0
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d0ed      	beq.n	80045da <_realloc_r+0x1e>
 80045fe:	42bc      	cmp	r4, r7
 8004600:	4622      	mov	r2, r4
 8004602:	4631      	mov	r1, r6
 8004604:	bf28      	it	cs
 8004606:	463a      	movcs	r2, r7
 8004608:	f7ff ffb0 	bl	800456c <memcpy>
 800460c:	4631      	mov	r1, r6
 800460e:	4640      	mov	r0, r8
 8004610:	f7ff fb92 	bl	8003d38 <_free_r>
 8004614:	e7e1      	b.n	80045da <_realloc_r+0x1e>
 8004616:	4635      	mov	r5, r6
 8004618:	e7df      	b.n	80045da <_realloc_r+0x1e>

0800461a <_malloc_usable_size_r>:
 800461a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800461e:	1f18      	subs	r0, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	bfbc      	itt	lt
 8004624:	580b      	ldrlt	r3, [r1, r0]
 8004626:	18c0      	addlt	r0, r0, r3
 8004628:	4770      	bx	lr
	...

0800462c <_init>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	bf00      	nop
 8004630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004632:	bc08      	pop	{r3}
 8004634:	469e      	mov	lr, r3
 8004636:	4770      	bx	lr

08004638 <_fini>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	bf00      	nop
 800463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463e:	bc08      	pop	{r3}
 8004640:	469e      	mov	lr, r3
 8004642:	4770      	bx	lr
